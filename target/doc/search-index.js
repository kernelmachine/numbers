var searchIndex = {};
searchIndex['numbers'] = {"items":[[0,"","numbers","Numbers provides safe, modular, and fast high-dimensional matrix computations.",null,null],[3,"Matrix","","Generic Matrix object.",null,null],[12,"elements","","",0,null],[12,"row_size","","",0,null],[12,"col_size","","",0,null],[12,"transpose","","",0,null],[4,"Triangular","","Triangular represents two variants of triangular matrices : Upper and Lower. Use this enum\nfor functions that require specification of a triangular matrix output.",null,null],[13,"Upper","","",1,null],[13,"Lower","","",1,null],[4,"Norm","","Norm provides four variants of matrix norms.",null,null],[13,"OneNorm","","",2,null],[13,"InfinityNorm","","",2,null],[13,"FrobeniusNorm","","",2,null],[13,"MaxAbsValue","","",2,null],[4,"Eig","","For relevant functions, Eig represents the option to output either just eigenvalues or\nboth eigenvalues and eigenvectors.",null,null],[13,"Eigenvalues","","",3,null],[13,"EigenvaluesAndEigenvectors","","",3,null],[4,"Condition","","Condition provides four matrix conditions to determine the feasibility of inversion",null,null],[13,"WellConditioned","","",4,null],[13,"IllConditioned","","",4,null],[13,"Singular","","",4,null],[13,"NotAvailable","","",4,null],[4,"Trans","","Trans enumerates transpose/non-transpose matrices",null,null],[13,"Transpose","","",5,null],[13,"Regular","","",5,null],[0,"matrixerror","","",null,null],[4,"MatrixError","numbers::matrixerror","",null,null],[13,"MismatchedDimensions","","",6,null],[13,"NonSquareMatrix","","",6,null],[13,"MalformedMatrix","","",6,null],[13,"SingularMatrix","","",6,null],[13,"LapackComputationError","","",6,null],[13,"LapackInputError","","",6,null],[13,"UnknownError","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"matrixerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"matrixerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",6,{"inputs":[{"name":"matrixerror"}],"output":{"name":"str"}}],[11,"cause","","",6,{"inputs":[{"name":"matrixerror"}],"output":{"name":"option"}}],[0,"operations","numbers","",null,null],[5,"dot","numbers::operations","Compute dot product between two matrices.",null,{"inputs":[{"name":"matrix"},{"name":"matrix"}],"output":{"name":"result"}}],[5,"matrix_map","","Map a function to all elements of matrix.",null,{"inputs":[{"name":"fn"},{"name":"matrix"}],"output":{"name":"result"}}],[5,"triu","","Get upper triangular matrix",null,{"inputs":[{"name":"matrix"},{"name":"usize"}],"output":{"name":"result"}}],[5,"tril","","Get lower triangular matrix",null,{"inputs":[{"name":"matrix"},{"name":"usize"}],"output":{"name":"result"}}],[5,"inverse","","Invert a matrix via LU factorization.",null,{"inputs":[{"name":"matrix"}],"output":{"name":"result"}}],[5,"trace","","Get the trace of a matrix (the sum of its diagonal elements)",null,{"inputs":[{"name":"matrix"}],"output":{"name":"f64"}}],[5,"prod_diag","","Get the product of the diagonal elements of a matrix.",null,{"inputs":[{"name":"matrix"}],"output":{"name":"f64"}}],[5,"pseudoinverse","","Derive the pseudoinverse of a matrix via SVD.",null,{"inputs":[{"name":"matrix"}],"output":{"name":"result"}}],[5,"nullspace","","Get the nullspace (kernel) of a matrix. (x where Ax = 0)",null,{"inputs":[],"output":null}],[5,"is_unitary","","Check whether a matrix is unitary. A^T A = I",null,{"inputs":[{"name":"matrix"}],"output":{"name":"result"}}],[5,"is_normal","","Check whether a matrix is normal. A^T A = A A ^ T",null,{"inputs":[{"name":"matrix"}],"output":{"name":"result"}}],[5,"is_symmetric","","Check whether a matrix is symmetric. A^T == A.",null,{"inputs":[{"name":"matrix"}],"output":{"name":"result"}}],[0,"eigenvalues","numbers","",null,null],[5,"eigenvalues","numbers::eigenvalues","Get the eigenvalues of a matrix.",null,{"inputs":[{"name":"matrix"},{"name":"eig"},{"name":"triangular"}],"output":{"name":"result"}}],[0,"solvers","numbers","",null,null],[5,"lusolve","numbers::solvers","Solve Ax = b via LU Factorization.",null,{"inputs":[{"name":"matrix"},{"name":"matrix"}],"output":{"name":"result"}}],[5,"linearsolve","","Solve Ax = b via least squares error solution.",null,{"inputs":[],"output":null}],[5,"svdsolve","","Solve Ax = b via SVD.",null,{"inputs":[],"output":null}],[5,"cholsolve","","Solve Ax = b via Cholesky decomposition.",null,{"inputs":[],"output":null}],[0,"factorizations","numbers","",null,null],[5,"lufact","numbers::factorizations","Compute the LU factorization.",null,{"inputs":[{"name":"matrix"}],"output":{"name":"result"}}],[5,"qr","","Compute the QR Factorization.",null,{"inputs":[{"name":"matrix"}],"output":{"name":"result"}}],[5,"svd","","Compute the SVD Factorization.",null,{"inputs":[{"name":"matrix"}],"output":{"name":"result"}}],[5,"singular_values","","Get the singular values of a matrix.",null,{"inputs":[{"name":"matrix"}],"output":{"name":"result"}}],[0,"rank","numbers","",null,null],[5,"norm","numbers::rank","Calculate the norm of a matrix (1-Norm, Infinity-Norm, Frobenius Norm, or Max Absolute Value)",null,{"inputs":[{"name":"matrix"},{"name":"norm"}],"output":{"name":"f64"}}],[5,"rank","","Get the number of linearly independent rows or columns. TODO: use QR",null,{"inputs":[{"name":"matrix"}],"output":{"name":"result"}}],[5,"cond","","Determine the condition of a matrix via the condition number.",null,{"inputs":[{"name":"matrix"},{"name":"norm"}],"output":{"name":"result"}}],[6,"SVD","numbers","Type declaration of Singular Value Decomposition Output",null,null],[11,"clone","","",0,{"inputs":[{"name":"matrix"}],"output":{"name":"matrix"}}],[11,"fmt","","",0,{"inputs":[{"name":"matrix"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"triangular"}],"output":{"name":"triangular"}}],[11,"fmt","","",1,{"inputs":[{"name":"triangular"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"norm"}],"output":{"name":"norm"}}],[11,"fmt","","",2,{"inputs":[{"name":"norm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"eig"}],"output":{"name":"eig"}}],[11,"fmt","","",3,{"inputs":[{"name":"eig"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"condition"},{"name":"condition"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"condition"},{"name":"condition"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"condition"}],"output":{"name":"condition"}}],[11,"fmt","","",4,{"inputs":[{"name":"condition"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"trans"},{"name":"trans"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"trans"},{"name":"trans"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"trans"}],"output":{"name":"trans"}}],[11,"fmt","","",5,{"inputs":[{"name":"trans"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"matrix"},{"name":"matrix"}],"output":{"name":"bool"}}],[11,"new","","Create a new matrix",0,{"inputs":[{"name":"matrix"},{"name":"vec"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"zeros","","Create a matrix of zeros",0,{"inputs":[{"name":"matrix"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrix"}}],[11,"random","","",0,{"inputs":[{"name":"matrix"},{"name":"usize"},{"name":"usize"}],"output":{"name":"matrix"}}],[11,"diag_mat","","Create a square diagonal matrix from a vector of elements.",0,{"inputs":[{"name":"matrix"},{"name":"vec"}],"output":{"name":"matrix"}}],[11,"identity","","Create an square identity matrix of specified row size.",0,{"inputs":[{"name":"matrix"},{"name":"usize"}],"output":{"name":"matrix"}}],[11,"replace","","Replace a value in the matrix at specified row and column indices.",0,null],[11,"get_ind","","Map an index in a matrix to index in its corresponding 1-d vector.",0,{"inputs":[{"name":"matrix"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"get_element","","Get an element from the matrix.",0,{"inputs":[{"name":"matrix"},{"name":"usize"},{"name":"usize"}],"output":{"name":"t"}}],[11,"transpose","","Transpose the matrix. We're not actually changing anything in memory;",0,{"inputs":[{"name":"matrix"}],"output":{"name":"matrix"}}],[11,"diagonal","","Get the diagonal of a matrix.",0,{"inputs":[{"name":"matrix"}],"output":{"name":"vec"}}],[11,"tri","","Get a triangular matrix with specified dimensions above or below specified diagonal.",0,{"inputs":[{"name":"matrix"},{"name":"usize"},{"name":"usize"},{"name":"usize"},{"name":"triangular"}],"output":{"name":"matrix"}}],[14,"matrix_equal!","","",null,null]],"paths":[[3,"Matrix"],[4,"Triangular"],[4,"Norm"],[4,"Eig"],[4,"Condition"],[4,"Trans"],[4,"MatrixError"]]};
searchIndex['lapack'] = {"items":[[0,"","lapack","Interface to the [Linear Algebra PACKage][1].",null,null],[5,"sgetrf","","",null,null],[5,"dgetrf","","",null,null],[5,"cgetrf","","",null,null],[5,"zgetrf","","",null,null],[5,"sgbtrf","","",null,null],[5,"dgbtrf","","",null,null],[5,"cgbtrf","","",null,null],[5,"zgbtrf","","",null,null],[5,"sgttrf","","",null,null],[5,"dgttrf","","",null,null],[5,"cgttrf","","",null,null],[5,"zgttrf","","",null,null],[5,"spotrf","","",null,null],[5,"dpotrf","","",null,null],[5,"cpotrf","","",null,null],[5,"zpotrf","","",null,null],[5,"spstrf","","",null,null],[5,"dpstrf","","",null,null],[5,"cpstrf","","",null,null],[5,"zpstrf","","",null,null],[5,"spftrf","","",null,null],[5,"dpftrf","","",null,null],[5,"cpftrf","","",null,null],[5,"zpftrf","","",null,null],[5,"spptrf","","",null,null],[5,"dpptrf","","",null,null],[5,"cpptrf","","",null,null],[5,"zpptrf","","",null,null],[5,"spbtrf","","",null,null],[5,"dpbtrf","","",null,null],[5,"cpbtrf","","",null,null],[5,"zpbtrf","","",null,null],[5,"spttrf","","",null,null],[5,"dpttrf","","",null,null],[5,"cpttrf","","",null,null],[5,"zpttrf","","",null,null],[5,"ssytrf","","",null,null],[5,"dsytrf","","",null,null],[5,"csytrf","","",null,null],[5,"zsytrf","","",null,null],[5,"chetrf","","",null,null],[5,"zhetrf","","",null,null],[5,"ssptrf","","",null,null],[5,"dsptrf","","",null,null],[5,"csptrf","","",null,null],[5,"zsptrf","","",null,null],[5,"chptrf","","",null,null],[5,"zhptrf","","",null,null],[5,"sgetrs","","",null,null],[5,"dgetrs","","",null,null],[5,"cgetrs","","",null,null],[5,"zgetrs","","",null,null],[5,"sgbtrs","","",null,null],[5,"dgbtrs","","",null,null],[5,"cgbtrs","","",null,null],[5,"zgbtrs","","",null,null],[5,"sgttrs","","",null,null],[5,"dgttrs","","",null,null],[5,"cgttrs","","",null,null],[5,"zgttrs","","",null,null],[5,"spotrs","","",null,null],[5,"dpotrs","","",null,null],[5,"cpotrs","","",null,null],[5,"zpotrs","","",null,null],[5,"spftrs","","",null,null],[5,"dpftrs","","",null,null],[5,"cpftrs","","",null,null],[5,"zpftrs","","",null,null],[5,"spptrs","","",null,null],[5,"dpptrs","","",null,null],[5,"cpptrs","","",null,null],[5,"zpptrs","","",null,null],[5,"spbtrs","","",null,null],[5,"dpbtrs","","",null,null],[5,"cpbtrs","","",null,null],[5,"zpbtrs","","",null,null],[5,"spttrs","","",null,null],[5,"dpttrs","","",null,null],[5,"cpttrs","","",null,null],[5,"zpttrs","","",null,null],[5,"ssytrs","","",null,null],[5,"dsytrs","","",null,null],[5,"csytrs","","",null,null],[5,"zsytrs","","",null,null],[5,"chetrs","","",null,null],[5,"zhetrs","","",null,null],[5,"ssptrs","","",null,null],[5,"dsptrs","","",null,null],[5,"csptrs","","",null,null],[5,"zsptrs","","",null,null],[5,"chptrs","","",null,null],[5,"zhptrs","","",null,null],[5,"strtrs","","",null,null],[5,"dtrtrs","","",null,null],[5,"ctrtrs","","",null,null],[5,"ztrtrs","","",null,null],[5,"stptrs","","",null,null],[5,"dtptrs","","",null,null],[5,"ctptrs","","",null,null],[5,"ztptrs","","",null,null],[5,"stbtrs","","",null,null],[5,"dtbtrs","","",null,null],[5,"ctbtrs","","",null,null],[5,"ztbtrs","","",null,null],[5,"sgecon","","",null,null],[5,"dgecon","","",null,null],[5,"cgecon","","",null,null],[5,"zgecon","","",null,null],[5,"sgbcon","","",null,null],[5,"dgbcon","","",null,null],[5,"cgbcon","","",null,null],[5,"zgbcon","","",null,null],[5,"sgtcon","","",null,null],[5,"dgtcon","","",null,null],[5,"cgtcon","","",null,null],[5,"zgtcon","","",null,null],[5,"spocon","","",null,null],[5,"dpocon","","",null,null],[5,"cpocon","","",null,null],[5,"zpocon","","",null,null],[5,"sppcon","","",null,null],[5,"dppcon","","",null,null],[5,"cppcon","","",null,null],[5,"zppcon","","",null,null],[5,"spbcon","","",null,null],[5,"dpbcon","","",null,null],[5,"cpbcon","","",null,null],[5,"zpbcon","","",null,null],[5,"sptcon","","",null,null],[5,"dptcon","","",null,null],[5,"cptcon","","",null,null],[5,"zptcon","","",null,null],[5,"ssycon","","",null,null],[5,"dsycon","","",null,null],[5,"csycon","","",null,null],[5,"zsycon","","",null,null],[5,"checon","","",null,null],[5,"zhecon","","",null,null],[5,"sspcon","","",null,null],[5,"dspcon","","",null,null],[5,"cspcon","","",null,null],[5,"zspcon","","",null,null],[5,"chpcon","","",null,null],[5,"zhpcon","","",null,null],[5,"strcon","","",null,null],[5,"dtrcon","","",null,null],[5,"ctrcon","","",null,null],[5,"ztrcon","","",null,null],[5,"stpcon","","",null,null],[5,"dtpcon","","",null,null],[5,"ctpcon","","",null,null],[5,"ztpcon","","",null,null],[5,"stbcon","","",null,null],[5,"dtbcon","","",null,null],[5,"ctbcon","","",null,null],[5,"ztbcon","","",null,null],[5,"sgerfs","","",null,null],[5,"dgerfs","","",null,null],[5,"cgerfs","","",null,null],[5,"zgerfs","","",null,null],[5,"sgerfsx","","",null,null],[5,"dgerfsx","","",null,null],[5,"cgerfsx","","",null,null],[5,"zgerfsx","","",null,null],[5,"sgbrfs","","",null,null],[5,"dgbrfs","","",null,null],[5,"cgbrfs","","",null,null],[5,"zgbrfs","","",null,null],[5,"sgbrfsx","","",null,null],[5,"dgbrfsx","","",null,null],[5,"cgbrfsx","","",null,null],[5,"zgbrfsx","","",null,null],[5,"sgtrfs","","",null,null],[5,"dgtrfs","","",null,null],[5,"cgtrfs","","",null,null],[5,"zgtrfs","","",null,null],[5,"sporfs","","",null,null],[5,"dporfs","","",null,null],[5,"cporfs","","",null,null],[5,"zporfs","","",null,null],[5,"sporfsx","","",null,null],[5,"dporfsx","","",null,null],[5,"cporfsx","","",null,null],[5,"zporfsx","","",null,null],[5,"spprfs","","",null,null],[5,"dpprfs","","",null,null],[5,"cpprfs","","",null,null],[5,"zpprfs","","",null,null],[5,"spbrfs","","",null,null],[5,"dpbrfs","","",null,null],[5,"cpbrfs","","",null,null],[5,"zpbrfs","","",null,null],[5,"sptrfs","","",null,null],[5,"dptrfs","","",null,null],[5,"cptrfs","","",null,null],[5,"zptrfs","","",null,null],[5,"ssyrfs","","",null,null],[5,"dsyrfs","","",null,null],[5,"csyrfs","","",null,null],[5,"zsyrfs","","",null,null],[5,"ssyrfsx","","",null,null],[5,"dsyrfsx","","",null,null],[5,"csyrfsx","","",null,null],[5,"zsyrfsx","","",null,null],[5,"cherfs","","",null,null],[5,"zherfs","","",null,null],[5,"cherfsx","","",null,null],[5,"zherfsx","","",null,null],[5,"ssprfs","","",null,null],[5,"dsprfs","","",null,null],[5,"csprfs","","",null,null],[5,"zsprfs","","",null,null],[5,"chprfs","","",null,null],[5,"zhprfs","","",null,null],[5,"strrfs","","",null,null],[5,"dtrrfs","","",null,null],[5,"ctrrfs","","",null,null],[5,"ztrrfs","","",null,null],[5,"stprfs","","",null,null],[5,"dtprfs","","",null,null],[5,"ctprfs","","",null,null],[5,"ztprfs","","",null,null],[5,"stbrfs","","",null,null],[5,"dtbrfs","","",null,null],[5,"ctbrfs","","",null,null],[5,"ztbrfs","","",null,null],[5,"sgetri","","",null,null],[5,"dgetri","","",null,null],[5,"cgetri","","",null,null],[5,"zgetri","","",null,null],[5,"spotri","","",null,null],[5,"dpotri","","",null,null],[5,"cpotri","","",null,null],[5,"zpotri","","",null,null],[5,"spftri","","",null,null],[5,"dpftri","","",null,null],[5,"cpftri","","",null,null],[5,"zpftri","","",null,null],[5,"spptri","","",null,null],[5,"dpptri","","",null,null],[5,"cpptri","","",null,null],[5,"zpptri","","",null,null],[5,"ssytri","","",null,null],[5,"dsytri","","",null,null],[5,"csytri","","",null,null],[5,"zsytri","","",null,null],[5,"chetri","","",null,null],[5,"zhetri","","",null,null],[5,"ssptri","","",null,null],[5,"dsptri","","",null,null],[5,"csptri","","",null,null],[5,"zsptri","","",null,null],[5,"chptri","","",null,null],[5,"zhptri","","",null,null],[5,"strtri","","",null,null],[5,"dtrtri","","",null,null],[5,"ctrtri","","",null,null],[5,"ztrtri","","",null,null],[5,"stftri","","",null,null],[5,"dtftri","","",null,null],[5,"ctftri","","",null,null],[5,"ztftri","","",null,null],[5,"stptri","","",null,null],[5,"dtptri","","",null,null],[5,"ctptri","","",null,null],[5,"ztptri","","",null,null],[5,"sgeequ","","",null,null],[5,"dgeequ","","",null,null],[5,"cgeequ","","",null,null],[5,"zgeequ","","",null,null],[5,"sgeequb","","",null,null],[5,"dgeequb","","",null,null],[5,"cgeequb","","",null,null],[5,"zgeequb","","",null,null],[5,"sgbequ","","",null,null],[5,"dgbequ","","",null,null],[5,"cgbequ","","",null,null],[5,"zgbequ","","",null,null],[5,"sgbequb","","",null,null],[5,"dgbequb","","",null,null],[5,"cgbequb","","",null,null],[5,"zgbequb","","",null,null],[5,"spoequ","","",null,null],[5,"dpoequ","","",null,null],[5,"cpoequ","","",null,null],[5,"zpoequ","","",null,null],[5,"spoequb","","",null,null],[5,"dpoequb","","",null,null],[5,"cpoequb","","",null,null],[5,"zpoequb","","",null,null],[5,"sppequ","","",null,null],[5,"dppequ","","",null,null],[5,"cppequ","","",null,null],[5,"zppequ","","",null,null],[5,"spbequ","","",null,null],[5,"dpbequ","","",null,null],[5,"cpbequ","","",null,null],[5,"zpbequ","","",null,null],[5,"ssyequb","","",null,null],[5,"dsyequb","","",null,null],[5,"csyequb","","",null,null],[5,"zsyequb","","",null,null],[5,"cheequb","","",null,null],[5,"zheequb","","",null,null],[5,"sgesv","","",null,null],[5,"dgesv","","",null,null],[5,"cgesv","","",null,null],[5,"zgesv","","",null,null],[5,"dsgesv","","",null,null],[5,"zcgesv","","",null,null],[5,"sgesvx","","",null,null],[5,"dgesvx","","",null,null],[5,"cgesvx","","",null,null],[5,"zgesvx","","",null,null],[5,"sgesvxx","","",null,null],[5,"dgesvxx","","",null,null],[5,"cgesvxx","","",null,null],[5,"zgesvxx","","",null,null],[5,"sgbsv","","",null,null],[5,"dgbsv","","",null,null],[5,"cgbsv","","",null,null],[5,"zgbsv","","",null,null],[5,"sgbsvx","","",null,null],[5,"dgbsvx","","",null,null],[5,"cgbsvx","","",null,null],[5,"zgbsvx","","",null,null],[5,"sgbsvxx","","",null,null],[5,"dgbsvxx","","",null,null],[5,"cgbsvxx","","",null,null],[5,"zgbsvxx","","",null,null],[5,"sgtsv","","",null,null],[5,"dgtsv","","",null,null],[5,"cgtsv","","",null,null],[5,"zgtsv","","",null,null],[5,"sgtsvx","","",null,null],[5,"dgtsvx","","",null,null],[5,"cgtsvx","","",null,null],[5,"zgtsvx","","",null,null],[5,"sposv","","",null,null],[5,"dposv","","",null,null],[5,"cposv","","",null,null],[5,"zposv","","",null,null],[5,"dsposv","","",null,null],[5,"zcposv","","",null,null],[5,"sposvx","","",null,null],[5,"dposvx","","",null,null],[5,"cposvx","","",null,null],[5,"zposvx","","",null,null],[5,"sposvxx","","",null,null],[5,"dposvxx","","",null,null],[5,"cposvxx","","",null,null],[5,"zposvxx","","",null,null],[5,"sppsv","","",null,null],[5,"dppsv","","",null,null],[5,"cppsv","","",null,null],[5,"zppsv","","",null,null],[5,"sppsvx","","",null,null],[5,"dppsvx","","",null,null],[5,"cppsvx","","",null,null],[5,"zppsvx","","",null,null],[5,"spbsv","","",null,null],[5,"dpbsv","","",null,null],[5,"cpbsv","","",null,null],[5,"zpbsv","","",null,null],[5,"spbsvx","","",null,null],[5,"dpbsvx","","",null,null],[5,"cpbsvx","","",null,null],[5,"zpbsvx","","",null,null],[5,"sptsv","","",null,null],[5,"dptsv","","",null,null],[5,"cptsv","","",null,null],[5,"zptsv","","",null,null],[5,"sptsvx","","",null,null],[5,"dptsvx","","",null,null],[5,"cptsvx","","",null,null],[5,"zptsvx","","",null,null],[5,"ssysv","","",null,null],[5,"dsysv","","",null,null],[5,"csysv","","",null,null],[5,"zsysv","","",null,null],[5,"ssysvx","","",null,null],[5,"dsysvx","","",null,null],[5,"csysvx","","",null,null],[5,"zsysvx","","",null,null],[5,"dsysvxx","","",null,null],[5,"ssysvxx","","",null,null],[5,"csysvxx","","",null,null],[5,"zsysvxx","","",null,null],[5,"chesv","","",null,null],[5,"zhesv","","",null,null],[5,"chesvx","","",null,null],[5,"zhesvx","","",null,null],[5,"chesvxx","","",null,null],[5,"zhesvxx","","",null,null],[5,"sspsv","","",null,null],[5,"dspsv","","",null,null],[5,"cspsv","","",null,null],[5,"zspsv","","",null,null],[5,"sspsvx","","",null,null],[5,"dspsvx","","",null,null],[5,"cspsvx","","",null,null],[5,"zspsvx","","",null,null],[5,"chpsv","","",null,null],[5,"zhpsv","","",null,null],[5,"chpsvx","","",null,null],[5,"zhpsvx","","",null,null],[5,"sgeqrf","","",null,null],[5,"dgeqrf","","",null,null],[5,"cgeqrf","","",null,null],[5,"zgeqrf","","",null,null],[5,"sgeqpf","","",null,null],[5,"dgeqpf","","",null,null],[5,"cgeqpf","","",null,null],[5,"zgeqpf","","",null,null],[5,"sgeqp3","","",null,null],[5,"dgeqp3","","",null,null],[5,"cgeqp3","","",null,null],[5,"zgeqp3","","",null,null],[5,"sorgqr","","",null,null],[5,"dorgqr","","",null,null],[5,"sormqr","","",null,null],[5,"dormqr","","",null,null],[5,"cungqr","","",null,null],[5,"zungqr","","",null,null],[5,"cunmqr","","",null,null],[5,"zunmqr","","",null,null],[5,"sgelqf","","",null,null],[5,"dgelqf","","",null,null],[5,"cgelqf","","",null,null],[5,"zgelqf","","",null,null],[5,"sorglq","","",null,null],[5,"dorglq","","",null,null],[5,"sormlq","","",null,null],[5,"dormlq","","",null,null],[5,"cunglq","","",null,null],[5,"zunglq","","",null,null],[5,"cunmlq","","",null,null],[5,"zunmlq","","",null,null],[5,"sgeqlf","","",null,null],[5,"dgeqlf","","",null,null],[5,"cgeqlf","","",null,null],[5,"zgeqlf","","",null,null],[5,"sorgql","","",null,null],[5,"dorgql","","",null,null],[5,"cungql","","",null,null],[5,"zungql","","",null,null],[5,"sormql","","",null,null],[5,"dormql","","",null,null],[5,"cunmql","","",null,null],[5,"zunmql","","",null,null],[5,"sgerqf","","",null,null],[5,"dgerqf","","",null,null],[5,"cgerqf","","",null,null],[5,"zgerqf","","",null,null],[5,"sorgrq","","",null,null],[5,"dorgrq","","",null,null],[5,"cungrq","","",null,null],[5,"zungrq","","",null,null],[5,"sormrq","","",null,null],[5,"dormrq","","",null,null],[5,"cunmrq","","",null,null],[5,"zunmrq","","",null,null],[5,"stzrzf","","",null,null],[5,"dtzrzf","","",null,null],[5,"ctzrzf","","",null,null],[5,"ztzrzf","","",null,null],[5,"sormrz","","",null,null],[5,"dormrz","","",null,null],[5,"cunmrz","","",null,null],[5,"zunmrz","","",null,null],[5,"sggqrf","","",null,null],[5,"dggqrf","","",null,null],[5,"cggqrf","","",null,null],[5,"zggqrf","","",null,null],[5,"sggrqf","","",null,null],[5,"dggrqf","","",null,null],[5,"cggrqf","","",null,null],[5,"zggrqf","","",null,null],[5,"sgebrd","","",null,null],[5,"dgebrd","","",null,null],[5,"cgebrd","","",null,null],[5,"zgebrd","","",null,null],[5,"sgbbrd","","",null,null],[5,"dgbbrd","","",null,null],[5,"cgbbrd","","",null,null],[5,"zgbbrd","","",null,null],[5,"sorgbr","","",null,null],[5,"dorgbr","","",null,null],[5,"sormbr","","",null,null],[5,"dormbr","","",null,null],[5,"cungbr","","",null,null],[5,"zungbr","","",null,null],[5,"cunmbr","","",null,null],[5,"zunmbr","","",null,null],[5,"sbdsqr","","",null,null],[5,"dbdsqr","","",null,null],[5,"cbdsqr","","",null,null],[5,"zbdsqr","","",null,null],[5,"sbdsdc","","",null,null],[5,"dbdsdc","","",null,null],[5,"ssytrd","","",null,null],[5,"dsytrd","","",null,null],[5,"sorgtr","","",null,null],[5,"dorgtr","","",null,null],[5,"sormtr","","",null,null],[5,"dormtr","","",null,null],[5,"chetrd","","",null,null],[5,"zhetrd","","",null,null],[5,"cungtr","","",null,null],[5,"zungtr","","",null,null],[5,"cunmtr","","",null,null],[5,"zunmtr","","",null,null],[5,"ssptrd","","",null,null],[5,"dsptrd","","",null,null],[5,"sopgtr","","",null,null],[5,"dopgtr","","",null,null],[5,"sopmtr","","",null,null],[5,"dopmtr","","",null,null],[5,"chptrd","","",null,null],[5,"zhptrd","","",null,null],[5,"cupgtr","","",null,null],[5,"zupgtr","","",null,null],[5,"cupmtr","","",null,null],[5,"zupmtr","","",null,null],[5,"ssbtrd","","",null,null],[5,"dsbtrd","","",null,null],[5,"chbtrd","","",null,null],[5,"zhbtrd","","",null,null],[5,"ssterf","","",null,null],[5,"dsterf","","",null,null],[5,"ssteqr","","",null,null],[5,"dsteqr","","",null,null],[5,"csteqr","","",null,null],[5,"zsteqr","","",null,null],[5,"sstemr","","",null,null],[5,"dstemr","","",null,null],[5,"cstemr","","",null,null],[5,"zstemr","","",null,null],[5,"sstedc","","",null,null],[5,"dstedc","","",null,null],[5,"cstedc","","",null,null],[5,"zstedc","","",null,null],[5,"sstegr","","",null,null],[5,"dstegr","","",null,null],[5,"cstegr","","",null,null],[5,"zstegr","","",null,null],[5,"spteqr","","",null,null],[5,"dpteqr","","",null,null],[5,"cpteqr","","",null,null],[5,"zpteqr","","",null,null],[5,"sstebz","","",null,null],[5,"dstebz","","",null,null],[5,"sstein","","",null,null],[5,"dstein","","",null,null],[5,"cstein","","",null,null],[5,"zstein","","",null,null],[5,"sdisna","","",null,null],[5,"ddisna","","",null,null],[5,"ssygst","","",null,null],[5,"dsygst","","",null,null],[5,"chegst","","",null,null],[5,"zhegst","","",null,null],[5,"sspgst","","",null,null],[5,"dspgst","","",null,null],[5,"chpgst","","",null,null],[5,"zhpgst","","",null,null],[5,"ssbgst","","",null,null],[5,"dsbgst","","",null,null],[5,"chbgst","","",null,null],[5,"zhbgst","","",null,null],[5,"spbstf","","",null,null],[5,"dpbstf","","",null,null],[5,"cpbstf","","",null,null],[5,"zpbstf","","",null,null],[5,"sgehrd","","",null,null],[5,"dgehrd","","",null,null],[5,"cgehrd","","",null,null],[5,"zgehrd","","",null,null],[5,"sorghr","","",null,null],[5,"dorghr","","",null,null],[5,"sormhr","","",null,null],[5,"dormhr","","",null,null],[5,"cunghr","","",null,null],[5,"zunghr","","",null,null],[5,"cunmhr","","",null,null],[5,"zunmhr","","",null,null],[5,"sgebal","","",null,null],[5,"dgebal","","",null,null],[5,"cgebal","","",null,null],[5,"zgebal","","",null,null],[5,"sgebak","","",null,null],[5,"dgebak","","",null,null],[5,"cgebak","","",null,null],[5,"zgebak","","",null,null],[5,"shseqr","","",null,null],[5,"dhseqr","","",null,null],[5,"chseqr","","",null,null],[5,"zhseqr","","",null,null],[5,"shsein","","",null,null],[5,"dhsein","","",null,null],[5,"chsein","","",null,null],[5,"zhsein","","",null,null],[5,"strevc","","",null,null],[5,"dtrevc","","",null,null],[5,"ctrevc","","",null,null],[5,"ztrevc","","",null,null],[5,"strsna","","",null,null],[5,"dtrsna","","",null,null],[5,"ctrsna","","",null,null],[5,"ztrsna","","",null,null],[5,"strexc","","",null,null],[5,"dtrexc","","",null,null],[5,"ctrexc","","",null,null],[5,"ztrexc","","",null,null],[5,"strsen","","",null,null],[5,"dtrsen","","",null,null],[5,"ctrsen","","",null,null],[5,"ztrsen","","",null,null],[5,"strsyl","","",null,null],[5,"dtrsyl","","",null,null],[5,"ctrsyl","","",null,null],[5,"ztrsyl","","",null,null],[5,"sgghrd","","",null,null],[5,"dgghrd","","",null,null],[5,"cgghrd","","",null,null],[5,"zgghrd","","",null,null],[5,"sggbal","","",null,null],[5,"dggbal","","",null,null],[5,"cggbal","","",null,null],[5,"zggbal","","",null,null],[5,"sggbak","","",null,null],[5,"dggbak","","",null,null],[5,"cggbak","","",null,null],[5,"zggbak","","",null,null],[5,"shgeqz","","",null,null],[5,"dhgeqz","","",null,null],[5,"chgeqz","","",null,null],[5,"zhgeqz","","",null,null],[5,"stgevc","","",null,null],[5,"dtgevc","","",null,null],[5,"ctgevc","","",null,null],[5,"ztgevc","","",null,null],[5,"stgexc","","",null,null],[5,"dtgexc","","",null,null],[5,"ctgexc","","",null,null],[5,"ztgexc","","",null,null],[5,"stgsen","","",null,null],[5,"dtgsen","","",null,null],[5,"ctgsen","","",null,null],[5,"ztgsen","","",null,null],[5,"stgsyl","","",null,null],[5,"dtgsyl","","",null,null],[5,"ctgsyl","","",null,null],[5,"ztgsyl","","",null,null],[5,"stgsna","","",null,null],[5,"dtgsna","","",null,null],[5,"ctgsna","","",null,null],[5,"ztgsna","","",null,null],[5,"sggsvp","","",null,null],[5,"dggsvp","","",null,null],[5,"cggsvp","","",null,null],[5,"zggsvp","","",null,null],[5,"stgsja","","",null,null],[5,"dtgsja","","",null,null],[5,"ctgsja","","",null,null],[5,"ztgsja","","",null,null],[5,"sgels","","",null,null],[5,"dgels","","",null,null],[5,"cgels","","",null,null],[5,"zgels","","",null,null],[5,"sgelsy","","",null,null],[5,"dgelsy","","",null,null],[5,"cgelsy","","",null,null],[5,"zgelsy","","",null,null],[5,"sgelss","","",null,null],[5,"dgelss","","",null,null],[5,"cgelss","","",null,null],[5,"zgelss","","",null,null],[5,"sgelsd","","",null,null],[5,"dgelsd","","",null,null],[5,"cgelsd","","",null,null],[5,"zgelsd","","",null,null],[5,"sgglse","","",null,null],[5,"dgglse","","",null,null],[5,"cgglse","","",null,null],[5,"zgglse","","",null,null],[5,"sggglm","","",null,null],[5,"dggglm","","",null,null],[5,"cggglm","","",null,null],[5,"zggglm","","",null,null],[5,"ssyev","","",null,null],[5,"dsyev","","",null,null],[5,"cheev","","",null,null],[5,"zheev","","",null,null],[5,"ssyevd","","",null,null],[5,"dsyevd","","",null,null],[5,"cheevd","","",null,null],[5,"zheevd","","",null,null],[5,"ssyevx","","",null,null],[5,"dsyevx","","",null,null],[5,"cheevx","","",null,null],[5,"zheevx","","",null,null],[5,"ssyevr","","",null,null],[5,"dsyevr","","",null,null],[5,"cheevr","","",null,null],[5,"zheevr","","",null,null],[5,"sspev","","",null,null],[5,"dspev","","",null,null],[5,"chpev","","",null,null],[5,"zhpev","","",null,null],[5,"sspevd","","",null,null],[5,"dspevd","","",null,null],[5,"chpevd","","",null,null],[5,"zhpevd","","",null,null],[5,"sspevx","","",null,null],[5,"dspevx","","",null,null],[5,"chpevx","","",null,null],[5,"zhpevx","","",null,null],[5,"ssbev","","",null,null],[5,"dsbev","","",null,null],[5,"chbev","","",null,null],[5,"zhbev","","",null,null],[5,"ssbevd","","",null,null],[5,"dsbevd","","",null,null],[5,"chbevd","","",null,null],[5,"zhbevd","","",null,null],[5,"ssbevx","","",null,null],[5,"dsbevx","","",null,null],[5,"chbevx","","",null,null],[5,"zhbevx","","",null,null],[5,"sstev","","",null,null],[5,"dstev","","",null,null],[5,"sstevd","","",null,null],[5,"dstevd","","",null,null],[5,"sstevx","","",null,null],[5,"dstevx","","",null,null],[5,"sstevr","","",null,null],[5,"dstevr","","",null,null],[5,"sgees","","",null,null],[5,"dgees","","",null,null],[5,"cgees","","",null,null],[5,"zgees","","",null,null],[5,"sgeesx","","",null,null],[5,"dgeesx","","",null,null],[5,"cgeesx","","",null,null],[5,"zgeesx","","",null,null],[5,"sgeev","","",null,null],[5,"dgeev","","",null,null],[5,"cgeev","","",null,null],[5,"zgeev","","",null,null],[5,"sgeevx","","",null,null],[5,"dgeevx","","",null,null],[5,"cgeevx","","",null,null],[5,"zgeevx","","",null,null],[5,"sgesvd","","",null,null],[5,"dgesvd","","",null,null],[5,"cgesvd","","",null,null],[5,"zgesvd","","",null,null],[5,"sgesdd","","",null,null],[5,"dgesdd","","",null,null],[5,"cgesdd","","",null,null],[5,"zgesdd","","",null,null],[5,"dgejsv","","",null,null],[5,"sgejsv","","",null,null],[5,"dgesvj","","",null,null],[5,"sgesvj","","",null,null],[5,"sggsvd","","",null,null],[5,"dggsvd","","",null,null],[5,"cggsvd","","",null,null],[5,"zggsvd","","",null,null],[5,"ssygv","","",null,null],[5,"dsygv","","",null,null],[5,"chegv","","",null,null],[5,"zhegv","","",null,null],[5,"ssygvd","","",null,null],[5,"dsygvd","","",null,null],[5,"chegvd","","",null,null],[5,"zhegvd","","",null,null],[5,"ssygvx","","",null,null],[5,"dsygvx","","",null,null],[5,"chegvx","","",null,null],[5,"zhegvx","","",null,null],[5,"sspgv","","",null,null],[5,"dspgv","","",null,null],[5,"chpgv","","",null,null],[5,"zhpgv","","",null,null],[5,"sspgvd","","",null,null],[5,"dspgvd","","",null,null],[5,"chpgvd","","",null,null],[5,"zhpgvd","","",null,null],[5,"sspgvx","","",null,null],[5,"dspgvx","","",null,null],[5,"chpgvx","","",null,null],[5,"zhpgvx","","",null,null],[5,"ssbgv","","",null,null],[5,"dsbgv","","",null,null],[5,"chbgv","","",null,null],[5,"zhbgv","","",null,null],[5,"ssbgvd","","",null,null],[5,"dsbgvd","","",null,null],[5,"chbgvd","","",null,null],[5,"zhbgvd","","",null,null],[5,"ssbgvx","","",null,null],[5,"dsbgvx","","",null,null],[5,"chbgvx","","",null,null],[5,"zhbgvx","","",null,null],[5,"sgges","","",null,null],[5,"dgges","","",null,null],[5,"cgges","","",null,null],[5,"zgges","","",null,null],[5,"sggesx","","",null,null],[5,"dggesx","","",null,null],[5,"cggesx","","",null,null],[5,"zggesx","","",null,null],[5,"sggev","","",null,null],[5,"dggev","","",null,null],[5,"cggev","","",null,null],[5,"zggev","","",null,null],[5,"sggevx","","",null,null],[5,"dggevx","","",null,null],[5,"cggevx","","",null,null],[5,"zggevx","","",null,null],[5,"ssfrk","","",null,null],[5,"dsfrk","","",null,null],[5,"chfrk","","",null,null],[5,"zhfrk","","",null,null],[5,"stfsm","","",null,null],[5,"dtfsm","","",null,null],[5,"ctfsm","","",null,null],[5,"ztfsm","","",null,null],[5,"stfttp","","",null,null],[5,"dtfttp","","",null,null],[5,"ctfttp","","",null,null],[5,"ztfttp","","",null,null],[5,"stfttr","","",null,null],[5,"dtfttr","","",null,null],[5,"ctfttr","","",null,null],[5,"ztfttr","","",null,null],[5,"stpttf","","",null,null],[5,"dtpttf","","",null,null],[5,"ctpttf","","",null,null],[5,"ztpttf","","",null,null],[5,"stpttr","","",null,null],[5,"dtpttr","","",null,null],[5,"ctpttr","","",null,null],[5,"ztpttr","","",null,null],[5,"strttf","","",null,null],[5,"dtrttf","","",null,null],[5,"ctrttf","","",null,null],[5,"ztrttf","","",null,null],[5,"strttp","","",null,null],[5,"dtrttp","","",null,null],[5,"ctrttp","","",null,null],[5,"ztrttp","","",null,null],[5,"sgeqrfp","","",null,null],[5,"dgeqrfp","","",null,null],[5,"cgeqrfp","","",null,null],[5,"zgeqrfp","","",null,null],[5,"clacgv","","",null,null],[5,"zlacgv","","",null,null],[5,"slarnv","","",null,null],[5,"dlarnv","","",null,null],[5,"clarnv","","",null,null],[5,"zlarnv","","",null,null],[5,"sgeqr2","","",null,null],[5,"dgeqr2","","",null,null],[5,"cgeqr2","","",null,null],[5,"zgeqr2","","",null,null],[5,"slacn2","","",null,null],[5,"dlacn2","","",null,null],[5,"clacn2","","",null,null],[5,"zlacn2","","",null,null],[5,"slacpy","","",null,null],[5,"dlacpy","","",null,null],[5,"clacpy","","",null,null],[5,"zlacpy","","",null,null],[5,"clacp2","","",null,null],[5,"zlacp2","","",null,null],[5,"sgetf2","","",null,null],[5,"dgetf2","","",null,null],[5,"cgetf2","","",null,null],[5,"zgetf2","","",null,null],[5,"slaswp","","",null,null],[5,"dlaswp","","",null,null],[5,"claswp","","",null,null],[5,"zlaswp","","",null,null],[5,"slange","","",null,null],[5,"dlange","","",null,null],[5,"clange","","",null,null],[5,"zlange","","",null,null],[5,"clanhe","","",null,null],[5,"zlanhe","","",null,null],[5,"slansy","","",null,null],[5,"dlansy","","",null,null],[5,"clansy","","",null,null],[5,"zlansy","","",null,null],[5,"slantr","","",null,null],[5,"dlantr","","",null,null],[5,"clantr","","",null,null],[5,"zlantr","","",null,null],[5,"slamch","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"f32"}}],[5,"dlamch","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"f64"}}],[5,"sgelq2","","",null,null],[5,"dgelq2","","",null,null],[5,"cgelq2","","",null,null],[5,"zgelq2","","",null,null],[5,"slarfb","","",null,null],[5,"dlarfb","","",null,null],[5,"clarfb","","",null,null],[5,"zlarfb","","",null,null],[5,"slarfg","","",null,null],[5,"dlarfg","","",null,null],[5,"clarfg","","",null,null],[5,"zlarfg","","",null,null],[5,"slarft","","",null,null],[5,"dlarft","","",null,null],[5,"clarft","","",null,null],[5,"zlarft","","",null,null],[5,"slarfx","","",null,null],[5,"dlarfx","","",null,null],[5,"clarfx","","",null,null],[5,"zlarfx","","",null,null],[5,"slatms","","",null,null],[5,"dlatms","","",null,null],[5,"clatms","","",null,null],[5,"zlatms","","",null,null],[5,"dlag2s","","",null,null],[5,"slag2d","","",null,null],[5,"zlag2c","","",null,null],[5,"clag2z","","",null,null],[5,"slauum","","",null,null],[5,"dlauum","","",null,null],[5,"clauum","","",null,null],[5,"zlauum","","",null,null],[5,"slagge","","",null,null],[5,"dlagge","","",null,null],[5,"clagge","","",null,null],[5,"zlagge","","",null,null],[5,"slaset","","",null,null],[5,"dlaset","","",null,null],[5,"claset","","",null,null],[5,"zlaset","","",null,null],[5,"slasrt","","",null,null],[5,"dlasrt","","",null,null],[5,"claghe","","",null,null],[5,"zlaghe","","",null,null],[5,"slagsy","","",null,null],[5,"dlagsy","","",null,null],[5,"clagsy","","",null,null],[5,"zlagsy","","",null,null],[5,"slapmr","","",null,null],[5,"dlapmr","","",null,null],[5,"clapmr","","",null,null],[5,"zlapmr","","",null,null],[5,"slapy2","","",null,null],[5,"dlapy2","","",null,null],[5,"slapy3","","",null,null],[5,"dlapy3","","",null,null],[5,"slartgp","","",null,null],[5,"dlartgp","","",null,null],[5,"slartgs","","",null,null],[5,"dlartgs","","",null,null],[5,"sbbcsd","","",null,null],[5,"dbbcsd","","",null,null],[5,"cbbcsd","","",null,null],[5,"zbbcsd","","",null,null],[5,"cheswapr","","",null,null],[5,"zheswapr","","",null,null],[5,"chetri2","","",null,null],[5,"zhetri2","","",null,null],[5,"chetri2x","","",null,null],[5,"zhetri2x","","",null,null],[5,"chetrs2","","",null,null],[5,"zhetrs2","","",null,null],[5,"ssyconv","","",null,null],[5,"dsyconv","","",null,null],[5,"csyconv","","",null,null],[5,"zsyconv","","",null,null],[5,"ssyswapr","","",null,null],[5,"dsyswapr","","",null,null],[5,"csyswapr","","",null,null],[5,"zsyswapr","","",null,null],[5,"ssytri2","","",null,null],[5,"dsytri2","","",null,null],[5,"csytri2","","",null,null],[5,"zsytri2","","",null,null],[5,"ssytri2x","","",null,null],[5,"dsytri2x","","",null,null],[5,"csytri2x","","",null,null],[5,"zsytri2x","","",null,null],[5,"ssytrs2","","",null,null],[5,"dsytrs2","","",null,null],[5,"csytrs2","","",null,null],[5,"zsytrs2","","",null,null],[5,"cunbdb","","",null,null],[5,"zunbdb","","",null,null],[5,"cuncsd","","",null,null],[5,"zuncsd","","",null,null],[5,"sorbdb","","",null,null],[5,"dorbdb","","",null,null],[5,"sorcsd","","",null,null],[5,"dorcsd","","",null,null],[5,"sgemqrt","","",null,null],[5,"dgemqrt","","",null,null],[5,"cgemqrt","","",null,null],[5,"zgemqrt","","",null,null],[5,"sgeqrt","","",null,null],[5,"dgeqrt","","",null,null],[5,"cgeqrt","","",null,null],[5,"zgeqrt","","",null,null],[5,"sgeqrt2","","",null,null],[5,"dgeqrt2","","",null,null],[5,"cgeqrt2","","",null,null],[5,"zgeqrt2","","",null,null],[5,"sgeqrt3","","",null,null],[5,"dgeqrt3","","",null,null],[5,"cgeqrt3","","",null,null],[5,"zgeqrt3","","",null,null],[5,"stpmqrt","","",null,null],[5,"dtpmqrt","","",null,null],[5,"ctpmqrt","","",null,null],[5,"ztpmqrt","","",null,null],[5,"stpqrt","","",null,null],[5,"dtpqrt","","",null,null],[5,"ctpqrt","","",null,null],[5,"ztpqrt","","",null,null],[5,"stpqrt2","","",null,null],[5,"dtpqrt2","","",null,null],[5,"ctpqrt2","","",null,null],[5,"ztpqrt2","","",null,null],[5,"stprfb","","",null,null],[5,"dtprfb","","",null,null],[5,"ctprfb","","",null,null],[5,"ztprfb","","",null,null],[5,"ssysv_rook","","",null,null],[5,"dsysv_rook","","",null,null],[5,"csysv_rook","","",null,null],[5,"zsysv_rook","","",null,null],[5,"csyr","","",null,null],[5,"zsyr","","",null,null],[5,"ilaver","","",null,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":null}],[6,"c32","","",null,null],[6,"c64","","",null,null],[6,"Select2F32","","",null,null],[6,"Select3F32","","",null,null],[6,"Select2F64","","",null,null],[6,"Select3F64","","",null,null],[6,"Select1C32","","",null,null],[6,"Select2C32","","",null,null],[6,"Select1C64","","",null,null],[6,"Select2C64","","",null,null]],"paths":[]};
searchIndex['blas'] = {"items":[[0,"","blas","Interface to the [Basic Linear Algebra Subprograms][1].",null,null],[5,"srotg","","",null,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":null}],[5,"srotmg","","",null,null],[5,"srot","","",null,null],[5,"srotm","","",null,null],[5,"sswap","","",null,null],[5,"sscal","","",null,null],[5,"scopy","","",null,null],[5,"saxpy","","",null,null],[5,"sdot","","",null,null],[5,"sdsdot","","",null,null],[5,"snrm2","","",null,null],[5,"scnrm2","","",null,null],[5,"sasum","","",null,null],[5,"isamax","","",null,null],[5,"drotg","","",null,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":null}],[5,"drotmg","","",null,null],[5,"drot","","",null,null],[5,"drotm","","",null,null],[5,"dswap","","",null,null],[5,"dscal","","",null,null],[5,"dcopy","","",null,null],[5,"daxpy","","",null,null],[5,"ddot","","",null,null],[5,"dsdot","","",null,null],[5,"dnrm2","","",null,null],[5,"dznrm2","","",null,null],[5,"dasum","","",null,null],[5,"idamax","","",null,null],[5,"crotg","","",null,{"inputs":[{"name":"c32"},{"name":"c32"},{"name":"f32"},{"name":"c32"}],"output":null}],[5,"csrot","","",null,null],[5,"cswap","","",null,null],[5,"cscal","","",null,null],[5,"csscal","","",null,null],[5,"ccopy","","",null,null],[5,"caxpy","","",null,null],[5,"cdotu","","",null,null],[5,"cdotc","","",null,null],[5,"scasum","","",null,null],[5,"icamax","","",null,null],[5,"zrotg","","",null,{"inputs":[{"name":"c64"},{"name":"c64"},{"name":"f64"},{"name":"c64"}],"output":null}],[5,"zdrot","","",null,null],[5,"zswap","","",null,null],[5,"zscal","","",null,null],[5,"zdscal","","",null,null],[5,"zcopy","","",null,null],[5,"zaxpy","","",null,null],[5,"zdotu","","",null,null],[5,"zdotc","","",null,null],[5,"dzasum","","",null,null],[5,"izamax","","",null,null],[5,"sgemv","","",null,null],[5,"sgbmv","","",null,null],[5,"ssymv","","",null,null],[5,"ssbmv","","",null,null],[5,"sspmv","","",null,null],[5,"strmv","","",null,null],[5,"stbmv","","",null,null],[5,"stpmv","","",null,null],[5,"strsv","","",null,null],[5,"stbsv","","",null,null],[5,"stpsv","","",null,null],[5,"sger","","",null,null],[5,"ssyr","","",null,null],[5,"sspr","","",null,null],[5,"ssyr2","","",null,null],[5,"sspr2","","",null,null],[5,"dgemv","","",null,null],[5,"dgbmv","","",null,null],[5,"dsymv","","",null,null],[5,"dsbmv","","",null,null],[5,"dspmv","","",null,null],[5,"dtrmv","","",null,null],[5,"dtbmv","","",null,null],[5,"dtpmv","","",null,null],[5,"dtrsv","","",null,null],[5,"dtbsv","","",null,null],[5,"dtpsv","","",null,null],[5,"dger","","",null,null],[5,"dsyr","","",null,null],[5,"dspr","","",null,null],[5,"dsyr2","","",null,null],[5,"dspr2","","",null,null],[5,"cgemv","","",null,null],[5,"cgbmv","","",null,null],[5,"chemv","","",null,null],[5,"chbmv","","",null,null],[5,"chpmv","","",null,null],[5,"ctrmv","","",null,null],[5,"ctbmv","","",null,null],[5,"ctpmv","","",null,null],[5,"ctrsv","","",null,null],[5,"ctbsv","","",null,null],[5,"ctpsv","","",null,null],[5,"cgeru","","",null,null],[5,"cgerc","","",null,null],[5,"cher","","",null,null],[5,"chpr","","",null,null],[5,"chpr2","","",null,null],[5,"cher2","","",null,null],[5,"zgemv","","",null,null],[5,"zgbmv","","",null,null],[5,"zhemv","","",null,null],[5,"zhbmv","","",null,null],[5,"zhpmv","","",null,null],[5,"ztrmv","","",null,null],[5,"ztbmv","","",null,null],[5,"ztpmv","","",null,null],[5,"ztrsv","","",null,null],[5,"ztbsv","","",null,null],[5,"ztpsv","","",null,null],[5,"zgeru","","",null,null],[5,"zgerc","","",null,null],[5,"zher","","",null,null],[5,"zhpr","","",null,null],[5,"zher2","","",null,null],[5,"zhpr2","","",null,null],[5,"sgemm","","",null,null],[5,"ssymm","","",null,null],[5,"ssyrk","","",null,null],[5,"ssyr2k","","",null,null],[5,"strmm","","",null,null],[5,"strsm","","",null,null],[5,"dgemm","","",null,null],[5,"dsymm","","",null,null],[5,"dsyrk","","",null,null],[5,"dsyr2k","","",null,null],[5,"dtrmm","","",null,null],[5,"dtrsm","","",null,null],[5,"cgemm","","",null,null],[5,"csymm","","",null,null],[5,"chemm","","",null,null],[5,"csyrk","","",null,null],[5,"cherk","","",null,null],[5,"csyr2k","","",null,null],[5,"cher2k","","",null,null],[5,"ctrmm","","",null,null],[5,"ctrsm","","",null,null],[5,"zgemm","","",null,null],[5,"zsymm","","",null,null],[5,"zhemm","","",null,null],[5,"zsyrk","","",null,null],[5,"zherk","","",null,null],[5,"zsyr2k","","",null,null],[5,"zher2k","","",null,null],[5,"ztrmm","","",null,null],[5,"ztrsm","","",null,null],[6,"c32","","",null,null],[6,"c64","","",null,null]],"paths":[]};
searchIndex['num'] = {"items":[[0,"","num","Simple numerics.",null,null],[5,"zero","","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[0,"bigint","","A Big integer (signed version: `BigInt`, unsigned version: `BigUint`).",null,null],[3,"BigUint","num::bigint","A big unsigned integer type.",null,null],[3,"RadixFmt","","",null,null],[3,"BigInt","","A big signed integer type.",null,null],[4,"Sign","","A Sign is a `BigInt`'s composing element.",null,null],[13,"Minus","","",0,null],[13,"NoSign","","",0,null],[13,"Plus","","",0,null],[4,"ParseBigIntError","","",null,null],[13,"ParseInt","","",1,null],[13,"Other","","",1,null],[0,"big_digit","","",null,null],[5,"from_doublebigdigit","num::bigint::big_digit","Split one `DoubleBigDigit` into two `BigDigit`s.",null,null],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`",null,{"inputs":[{"name":"bigdigit"},{"name":"bigdigit"}],"output":{"name":"doublebigdigit"}}],[17,"BITS","","",null,null],[17,"BASE","","",null,null],[6,"BigDigit","num::bigint","A `BigDigit` is a `BigUint`'s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its\nsize is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",2,{"inputs":[{"name":"tobiguint"}],"output":{"name":"option"}}],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`.",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",3,{"inputs":[{"name":"tobigint"}],"output":{"name":"option"}}],[8,"RandBigInt","","",null,null],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",4,{"inputs":[{"name":"randbigint"},{"name":"usize"}],"output":{"name":"biguint"}}],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",4,{"inputs":[{"name":"randbigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails\nwhen the bound is zero.",4,{"inputs":[{"name":"randbigint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",4,{"inputs":[{"name":"randbigint"},{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",4,{"inputs":[{"name":"randbigint"},{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"biguint"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",5,{"inputs":[{"name":"biguint"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"eq","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"cmp","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"ordering"}}],[11,"default","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"hash","","",5,{"inputs":[{"name":"biguint"},{"name":"h"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",5,{"inputs":[{"name":"biguint"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",5,{"inputs":[{"name":"biguint"},{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"bitand","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"shl","","",5,{"inputs":[{"name":"biguint"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shr","","",5,{"inputs":[{"name":"biguint"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"zero","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"is_zero","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"one","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"neg","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"checked_add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"div_rem","","",5,null],[11,"div_floor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mod_floor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_mod_floor","","",5,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"to_i64","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_u64","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"from_i64","","",5,{"inputs":[{"name":"biguint"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",5,{"inputs":[{"name":"biguint"},{"name":"u64"}],"output":{"name":"option"}}],[11,"to_biguint","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_biguint","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"clone","","",7,{"inputs":[{"name":"radixfmt"}],"output":{"name":"radixfmt"}}],[11,"fmt","","",7,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates and initializes a `BigUint`.",5,{"inputs":[{"name":"biguint"},{"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",5,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",5,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",5,null],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"vec"}}],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"vec"}}],[11,"parse_bytes","","Creates and initializes a `BigUint`.",5,null],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"usize"}}],[11,"decode","","",0,{"inputs":[{"name":"sign"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"sign"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"cmp","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"neg","","Negate Sign value.",0,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",6,{"inputs":[{"name":"bigint"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",6,{"inputs":[{"name":"bigint"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"eq","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"cmp","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"ordering"}}],[11,"default","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",6,{"inputs":[{"name":"bigint"},{"name":"h"}],"output":null}],[11,"from_str","","",6,{"inputs":[{"name":"bigint"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",6,{"inputs":[{"name":"bigint"},{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"shl","","",6,{"inputs":[{"name":"bigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"shr","","",6,{"inputs":[{"name":"bigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"zero","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"is_zero","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"one","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"abs","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"abs_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"signum","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"is_positive","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_negative","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"neg","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"checked_add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"div_rem","","",6,null],[11,"div_floor","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mod_floor","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div_mod_floor","","",6,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"to_i64","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_u64","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"from_i64","","",6,{"inputs":[{"name":"bigint"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",6,{"inputs":[{"name":"bigint"},{"name":"u64"}],"output":{"name":"option"}}],[11,"to_bigint","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_bigint","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"new","","Creates and initializes a BigInt.",6,{"inputs":[{"name":"bigint"},{"name":"sign"},{"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",6,{"inputs":[{"name":"bigint"},{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",6,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",6,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",6,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",6,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",6,null],[11,"parse_bytes","","Creates and initializes a `BigInt`.",6,null],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"parsebiginterror"}],"output":{"name":"str"}}],[11,"from","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"parseinterror"}],"output":{"name":"parsebiginterror"}}],[0,"complex","num","Complex numbers.",null,null],[3,"Complex","num::complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",8,null],[12,"im","","Imaginary portion of the complex number",8,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[11,"fmt","","",8,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",8,null],[11,"clone","","",8,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"eq","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"decode","","",8,{"inputs":[{"name":"complex"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",8,{"inputs":[{"name":"complex"},{"name":"__s"}],"output":{"name":"result"}}],[11,"new","","Create a new Complex",8,{"inputs":[{"name":"complex"},{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily\nhave a sqrt function), i.e. `re^2 + im^2`.",8,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",8,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",8,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",8,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"inv","","Returns `1/self`",8,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"norm","","Calculate |self|",8,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"arg","","Calculate the principal Arg of self.",8,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i\n* theta)`",8,null],[11,"from_polar","","Convert a polar representation into a complex number.",8,{"inputs":[{"name":"complex"},{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"neg","","",8,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"zero","","",8,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"is_zero","","",8,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"one","","",8,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"fmt","","",8,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"integer","num","Integer trait and functions.",null,null],[5,"div_rem","num::integer","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The\nresult is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",9,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",9,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",9,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",9,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",9,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",9,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",9,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",9,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",9,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",9,null],[0,"iter","num","External iterators for generic mathematics",null,null],[3,"Range","num::iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"clone","","",10,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",10,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"next_back","","",10,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",11,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",11,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",11,null],[11,"next_back","","",11,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"clone","","",12,{"inputs":[{"name":"rangestep"}],"output":{"name":"rangestep"}}],[11,"next","","",12,{"inputs":[{"name":"rangestep"}],"output":{"name":"option"}}],[11,"clone","","",13,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"rangestepinclusive"}}],[11,"next","","",13,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"option"}}],[0,"traits","num","Numeric traits for generic mathematics",null,null],[3,"ParseFloatError","num::traits","",null,null],[12,"kind","","",14,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",15,null],[13,"Invalid","","",15,null],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"Num","","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","Parse error for `from_str_radix`",16,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",16,{"inputs":[{"name":"num"},{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",17,{"inputs":[{"name":"zero"}],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",17,{"inputs":[{"name":"zero"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",18,{"inputs":[{"name":"one"}],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",19,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",19,{"inputs":[{"name":"signed"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",19,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",19,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",19,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",20,{"inputs":[{"name":"bounded"}],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",20,{"inputs":[{"name":"bounded"}],"output":{"name":"self"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",21,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",21,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",22,{"inputs":[{"name":"checkedadd"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",23,{"inputs":[{"name":"checkedsub"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",24,{"inputs":[{"name":"checkedmul"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",25,{"inputs":[{"name":"checkeddiv"},{"name":"self"}],"output":{"name":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",26,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",26,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",26,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",26,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",26,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",26,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",26,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",26,{"inputs":[{"name":"primint"},{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",26,{"inputs":[{"name":"primint"},{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",26,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",26,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",26,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",29,{"inputs":[{"name":"numcast"},{"name":"t"}],"output":{"name":"option"}}],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",30,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",30,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",30,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",30,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",30,{"inputs":[{"name":"float"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",30,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",30,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",30,{"inputs":[{"name":"float"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",30,{"inputs":[{"name":"float"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",30,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",30,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",30,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",30,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",30,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",30,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",30,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",30,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",30,null],[0,"rational","num","Rational numbers",null,null],[3,"Ratio","num::rational","Represents the ratio between 2 numbers.",null,null],[3,"ParseRatioError","","",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","",null,null],[6,"Rational64","","",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[11,"fmt","","",31,{"inputs":[{"name":"ratio"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",31,null],[11,"clone","","",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"decode","","",31,{"inputs":[{"name":"ratio"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",31,{"inputs":[{"name":"ratio"},{"name":"__s"}],"output":{"name":"result"}}],[11,"from_integer","","Creates a ratio representing the integer `t`.",31,{"inputs":[{"name":"ratio"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"new_raw","","Creates a ratio without checking for `denom == 0` or reducing.",31,{"inputs":[{"name":"ratio"},{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"new","","Create a new Ratio. Fails if `denom == 0`.",31,{"inputs":[{"name":"ratio"},{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"to_integer","","Converts to an integer.",31,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"numer","","Gets an immutable reference to the numerator.",31,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"denom","","Gets an immutable reference to the denominator.",31,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",31,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"reduced","","Returns a `reduce`d copy of self.",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"recip","","Returns the reciprocal.",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"floor","","Rounds towards minus infinity.",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"ceil","","Rounds towards plus infinity.",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"trunc","","Rounds towards zero.",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"fract","","Returns the fractional part of a number.",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"pow","","Raises the ratio to the power of an exponent",31,{"inputs":[{"name":"ratio"},{"name":"i32"}],"output":{"name":"ratio"}}],[11,"from_float","","Converts a float into a rational number.",31,{"inputs":[{"name":"ratio"},{"name":"t"}],"output":{"name":"option"}}],[11,"eq","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"lt","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"gt","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"le","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"ge","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"option"}}],[11,"cmp","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ordering"}}],[11,"mul","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"mul","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"neg","","",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"zero","","",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"is_zero","","",31,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"one","","",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",31,{"inputs":[{"name":"ratio"},{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"abs","","",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"abs_sub","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"signum","","",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"is_positive","","",31,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"is_negative","","",31,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",31,{"inputs":[{"name":"ratio"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Parses `numer/denom` or just `numer`.",31,{"inputs":[{"name":"ratio"},{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"parseratioerror"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"parseratioerror"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"fmt","","",32,{"inputs":[{"name":"parseratioerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"parseratioerror"}],"output":{"name":"parseratioerror"}}],[11,"fmt","","",32,{"inputs":[{"name":"parseratioerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",32,{"inputs":[{"name":"parseratioerror"}],"output":{"name":"str"}}]],"paths":[[4,"Sign"],[4,"ParseBigIntError"],[8,"ToBigUint"],[8,"ToBigInt"],[8,"RandBigInt"],[3,"BigUint"],[3,"BigInt"],[3,"RadixFmt"],[3,"Complex"],[8,"Integer"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"Float"],[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex['rustc_serialize'] = {"items":[[0,"","rustc_serialize","Support code for encoding and decoding types.",null,null],[11,"encode","collections::string","",0,{"inputs":[{"name":"string"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"string"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::boxed","",1,{"inputs":[{"name":"box"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"box"},{"name":"d"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"box"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::rc","",2,{"inputs":[{"name":"rc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"rc"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::borrow","",3,{"inputs":[{"name":"cow"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"cow"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec","",4,{"inputs":[{"name":"vec"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"vec"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::option","",5,{"inputs":[{"name":"option"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"option"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::marker","",6,{"inputs":[{"name":"phantomdata"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",6,{"inputs":[{"name":"phantomdata"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::path","",7,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"result"}}],[11,"encode","","",8,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",8,{"inputs":[{"name":"pathbuf"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::cell","",9,{"inputs":[{"name":"cell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",9,{"inputs":[{"name":"cell"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",10,{"inputs":[{"name":"refcell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",10,{"inputs":[{"name":"refcell"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::arc","",11,{"inputs":[{"name":"arc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",11,{"inputs":[{"name":"arc"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::linked_list","",12,{"inputs":[{"name":"linkedlist"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",12,{"inputs":[{"name":"linkedlist"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec_deque","",13,{"inputs":[{"name":"vecdeque"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",13,{"inputs":[{"name":"vecdeque"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::map","",14,{"inputs":[{"name":"btreemap"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",14,{"inputs":[{"name":"btreemap"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::set","",15,{"inputs":[{"name":"btreeset"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",15,{"inputs":[{"name":"btreeset"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::map","",16,{"inputs":[{"name":"hashmap"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",16,{"inputs":[{"name":"hashmap"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::set","",17,{"inputs":[{"name":"hashset"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",17,{"inputs":[{"name":"hashset"},{"name":"d"}],"output":{"name":"result"}}],[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",18,null],[12,"newline","","Newline to use",18,null],[12,"pad","","True to pad output with `=` characters",18,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",18,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",19,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",19,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",20,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",20,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",21,null],[13,"InvalidBase64Length","","The input had an invalid length",21,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",22,{"inputs":[{"name":"tobase64"},{"name":"config"}],"output":{"name":"string"}}],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",23,{"inputs":[{"name":"frombase64"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"characterset"}],"output":{"name":"characterset"}}],[11,"clone","","",20,{"inputs":[{"name":"newline"}],"output":{"name":"newline"}}],[11,"clone","","",18,{"inputs":[{"name":"config"}],"output":{"name":"config"}}],[11,"clone","","",21,{"inputs":[{"name":"frombase64error"}],"output":{"name":"frombase64error"}}],[11,"fmt","","",21,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",21,{"inputs":[{"name":"frombase64error"}],"output":{"name":"str"}}],[11,"fmt","","",21,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",24,null],[13,"InvalidHexLength","","The input had an invalid length",24,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",25,{"inputs":[{"name":"tohex"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",26,{"inputs":[{"name":"fromhex"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",24,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",24,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"str"}}],[11,"fmt","","",24,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",27,null],[13,"U64","","",27,null],[13,"F64","","",27,null],[13,"String","","",27,null],[13,"Boolean","","",27,null],[13,"Array","","",27,null],[13,"Object","","",27,null],[13,"Null","","",27,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",28,null],[13,"InvalidNumber","","",28,null],[13,"EOFWhileParsingObject","","",28,null],[13,"EOFWhileParsingArray","","",28,null],[13,"EOFWhileParsingValue","","",28,null],[13,"EOFWhileParsingString","","",28,null],[13,"KeyMustBeAString","","",28,null],[13,"ExpectedColon","","",28,null],[13,"TrailingCharacters","","",28,null],[13,"TrailingComma","","",28,null],[13,"InvalidEscape","","",28,null],[13,"InvalidUnicodeCodePoint","","",28,null],[13,"LoneLeadingSurrogateInHexEscape","","",28,null],[13,"UnexpectedEndOfHexEscape","","",28,null],[13,"UnrecognizedHex","","",28,null],[13,"NotFourDigit","","",28,null],[13,"ControlCharacterInString","","",28,null],[13,"NotUtf8","","",28,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",29,null],[13,"IoError","","",29,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",30,null],[13,"ExpectedError","","",30,null],[13,"MissingFieldError","","",30,null],[13,"UnknownVariantError","","",30,null],[13,"ApplicationError","","",30,null],[13,"EOF","","",30,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",31,null],[13,"BadHashmapKey","","",31,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",32,null],[13,"ObjectEnd","","",32,null],[13,"ArrayStart","","",32,null],[13,"ArrayEnd","","",32,null],[13,"BooleanValue","","",32,null],[13,"I64Value","","",32,null],[13,"U64Value","","",32,null],[13,"F64Value","","",32,null],[13,"StringValue","","",32,null],[13,"NullValue","","",32,null],[13,"Error","","",32,null],[4,"StackElement","","StackElements compose a Stack.\nFor example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the\nStackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",33,null],[13,"Key","","",33,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",34,{"inputs":[{"name":"tojson"}],"output":{"name":"json"}}],[11,"fmt","","",27,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"option"}}],[11,"lt","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"eq","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"eq","","",28,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"errorcode"}],"output":{"name":"errorcode"}}],[11,"fmt","","",29,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"parsererror"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"encodererror"}],"output":{"name":"self"}}],[11,"fmt","","",28,{"inputs":[{"name":"errorcode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",30,{"inputs":[{"name":"decodererror"}],"output":{"name":"str"}}],[11,"cause","","",30,{"inputs":[{"name":"decodererror"}],"output":{"name":"option"}}],[11,"fmt","","",30,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",30,{"inputs":[{"name":"decodererror"},{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",29,{"inputs":[{"name":"parsererror"}],"output":{"name":"str"}}],[11,"fmt","","",29,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",29,{"inputs":[{"name":"parsererror"},{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",31,{"inputs":[{"name":"encodererror"}],"output":{"name":"str"}}],[11,"fmt","","",31,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",31,{"inputs":[{"name":"encodererror"},{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",35,{"inputs":[{"name":"encoder"},{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",35,{"inputs":[{"name":"encoder"},{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",35,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_nil","","",35,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",35,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",35,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",35,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",35,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",35,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",35,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",35,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",35,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",35,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",35,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",35,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",35,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",35,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",35,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",35,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",35,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",35,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"encode","","",27,{"inputs":[{"name":"json"},{"name":"s"}],"output":{"name":"result"}}],[11,"from_reader","","Decodes a json value from an `&mut io::Read`",27,{"inputs":[{"name":"json"},{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",27,{"inputs":[{"name":"json"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",27,null],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns the associated mutable vector.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"index","","",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"json"}}],[11,"index","","",27,{"inputs":[{"name":"json"},{"name":"usize"}],"output":{"name":"json"}}],[11,"fmt","","",32,{"inputs":[{"name":"jsonevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"stackelement"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"stackelement"}],"output":{"name":"stackelement"}}],[11,"eq","","",33,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"new","","",36,{"inputs":[{"name":"stack"}],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",36,{"inputs":[{"name":"stack"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",36,{"inputs":[{"name":"stack"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",36,{"inputs":[{"name":"stack"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",36,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"top","","Returns the top-most element (if any).",36,{"inputs":[{"name":"stack"}],"output":{"name":"option"}}],[11,"next","","",37,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[11,"new","","Creates the JSON parser.",37,{"inputs":[{"name":"parser"},{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",37,{"inputs":[{"name":"parser"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",38,{"inputs":[{"name":"builder"},{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",38,{"inputs":[{"name":"builder"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",39,{"inputs":[{"name":"decoder"},{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_usize","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u8","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u16","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_isize","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i8","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i16","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_bool","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_char","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_str","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_enum","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_variant","","",39,null],[11,"read_enum_variant_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_struct_variant","","",39,null],[11,"read_enum_struct_variant_field","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct_field","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_option","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq_elt","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_key","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_val","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"error","","",39,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",27,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"to_json","collections::string","",0,{"inputs":[{"name":"string"}],"output":{"name":"json"}}],[11,"to_json","collections::vec","",4,{"inputs":[{"name":"vec"}],"output":{"name":"json"}}],[11,"to_json","collections::btree::map","",14,{"inputs":[{"name":"btreemap"}],"output":{"name":"json"}}],[11,"to_json","std::collections::hash::map","",16,{"inputs":[{"name":"hashmap"}],"output":{"name":"json"}}],[11,"to_json","core::option","",5,{"inputs":[{"name":"option"}],"output":{"name":"json"}}],[11,"fmt","rustc_serialize::json","Encodes a json value into a string",27,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",40,{"inputs":[{"name":"prettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",41,{"inputs":[{"name":"asjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",42,{"inputs":[{"name":"asprettyjson"},{"name":"u32"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",42,{"inputs":[{"name":"asprettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","",null,null],[16,"Error","","",43,null],[10,"read_nil","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_usize","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u16","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u8","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_isize","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i16","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i8","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_bool","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_char","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_str","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_enum","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_variant","","",43,null],[10,"read_enum_variant_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_struct_variant","","",43,null],[10,"read_enum_struct_variant_field","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct_field","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_option","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq_elt","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_key","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_val","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"error","","",43,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"error"}}],[8,"Encoder","","",null,null],[16,"Error","","",44,null],[10,"emit_nil","","",44,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_usize","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_u64","","",44,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_u32","","",44,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_u16","","",44,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_u8","","",44,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_isize","","",44,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_i64","","",44,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_i32","","",44,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_i16","","",44,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_i8","","",44,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_bool","","",44,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_f64","","",44,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_f32","","",44,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_char","","",44,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_str","","",44,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_enum","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant_field","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct_field","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option","","",44,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option_none","","",44,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_option_some","","",44,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq_elt","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_key","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_val","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[8,"Decodable","","",null,null],[10,"decode","","",45,{"inputs":[{"name":"decodable"},{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","",null,null],[10,"encode","","",46,{"inputs":[{"name":"encodable"},{"name":"s"}],"output":{"name":"result"}}],[8,"DecoderHelpers","","",null,null],[10,"read_to_vec","","",47,{"inputs":[{"name":"decoderhelpers"},{"name":"f"}],"output":{"name":"result"}}],[8,"EncoderHelpers","","",null,null],[10,"emit_from_vec","","",48,null]],"paths":[[3,"String"],[3,"Box"],[3,"Rc"],[4,"Cow"],[3,"Vec"],[4,"Option"],[3,"PhantomData"],[3,"Path"],[3,"PathBuf"],[3,"Cell"],[3,"RefCell"],[3,"Arc"],[3,"LinkedList"],[3,"VecDeque"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"HashMap"],[3,"HashSet"],[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex['rand'] = {"items":[[0,"","rand","Utilities for random number generation",null,null],[3,"Generator","","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number\ngenerator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the\nopen interval `(0,1)` (not including either endpoint).",null,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the\nclosed interval `[0,1]` (including both endpoints).",null,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current\nplatform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number\ngenerator, seeded by the system. Intended to be used in method\nchaining style, e.g. `thread_rng().gen::<i32>()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","Randomly sample up to `amount` elements from an iterator.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the\n`Sample` & `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",0,null],[12,"item","","The actual item which is being weighted",0,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample\nuniformly between two values. This should not be used directly,\nand is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range`\nrequires. This should not ever be called directly, only via\n`Range::new`, which will check that `low < high`, so this\nfunction doesn't have to repeat the check.",1,{"inputs":[{"name":"samplerange"},{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as\na source of randomness.",1,{"inputs":[{"name":"samplerange"},{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",2,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"new","","Create a new `Range` instance that samples uniformly from\n`[low, high)`. Panics if `low >= high`.",2,{"inputs":[{"name":"range"},{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",2,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",2,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"sup"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of\nfreedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of\nfreedom.",null,null],[11,"clone","","",3,{"inputs":[{"name":"gamma"}],"output":{"name":"gamma"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)`\ndistribution.",3,{"inputs":[{"name":"gamma"},{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",3,{"inputs":[{"name":"gamma"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",3,{"inputs":[{"name":"gamma"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",4,{"inputs":[{"name":"chisquared"}],"output":{"name":"chisquared"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom\n`k`. Panics if `k < 0`.",4,{"inputs":[{"name":"chisquared"},{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",4,{"inputs":[{"name":"chisquared"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",4,{"inputs":[{"name":"chisquared"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",5,{"inputs":[{"name":"fisherf"}],"output":{"name":"fisherf"}}],[11,"new","","Create a new `FisherF` distribution, with the given\nparameter. Panics if either `m` or `n` are not positive.",5,{"inputs":[{"name":"fisherf"},{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",5,{"inputs":[{"name":"fisherf"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",5,{"inputs":[{"name":"fisherf"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",6,{"inputs":[{"name":"studentt"}],"output":{"name":"studentt"}}],[11,"new","","Create a new Student t distribution with `n` degrees of\nfreedom. Panics if `n <= 0`.",6,{"inputs":[{"name":"studentt"},{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",6,{"inputs":[{"name":"studentt"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",6,{"inputs":[{"name":"studentt"},{"name":"r"}],"output":{"name":"f64"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers\n(a.k.a.  a standard normal, or Gaussian).",null,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",7,{"inputs":[{"name":"standardnormal"}],"output":{"name":"standardnormal"}}],[11,"rand","","",7,{"inputs":[{"name":"standardnormal"},{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",8,{"inputs":[{"name":"normal"}],"output":{"name":"normal"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and\nstandard deviation.",8,{"inputs":[{"name":"normal"},{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",8,{"inputs":[{"name":"normal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",8,{"inputs":[{"name":"normal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",9,{"inputs":[{"name":"lognormal"}],"output":{"name":"lognormal"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean\nand standard deviation.",9,{"inputs":[{"name":"lognormal"},{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",9,{"inputs":[{"name":"lognormal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",9,{"inputs":[{"name":"lognormal"},{"name":"r"}],"output":{"name":"f64"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",10,{"inputs":[{"name":"exp1"}],"output":{"name":"exp1"}}],[11,"rand","","",10,{"inputs":[{"name":"exp1"},{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",11,{"inputs":[{"name":"exp"}],"output":{"name":"exp"}}],[11,"new","","Construct a new `Exp` with the given shape parameter\n`lambda`. Panics if `lambda <= 0`.",11,{"inputs":[{"name":"exp"},{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",11,{"inputs":[{"name":"exp"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",11,{"inputs":[{"name":"exp"},{"name":"r"}],"output":{"name":"f64"}}],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the\nsource of randomness.",12,{"inputs":[{"name":"sample"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",13,{"inputs":[{"name":"independentsample"},{"name":"r"}],"output":{"name":"support"}}],[11,"clone","","",14,{"inputs":[{"name":"randsample"}],"output":{"name":"self"}}],[11,"sample","","",14,{"inputs":[{"name":"randsample"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",14,{"inputs":[{"name":"randsample"},{"name":"r"}],"output":{"name":"sup"}}],[11,"new","","",14,{"inputs":[{"name":"randsample"}],"output":{"name":"randsample"}}],[11,"clone","","",0,{"inputs":[{"name":"weighted"}],"output":{"name":"weighted"}}],[11,"new","","Create a new `WeightedChoice`.",15,null],[11,"sample","","",15,{"inputs":[{"name":"weightedchoice"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",15,{"inputs":[{"name":"weightedchoice"},{"name":"r"}],"output":{"name":"t"}}],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit\nvariant of the ISAAC algorithm.",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default\nfixed seed.",16,{"inputs":[{"name":"isaacrng"}],"output":{"name":"isaacrng"}}],[11,"clone","","",16,{"inputs":[{"name":"isaacrng"}],"output":{"name":"isaacrng"}}],[11,"next_u32","","",16,{"inputs":[{"name":"isaacrng"}],"output":{"name":"u32"}}],[11,"reseed","","",16,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",16,null],[11,"rand","","",16,{"inputs":[{"name":"isaacrng"},{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the\ndefault fixed seed.",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"isaac64rng"}}],[11,"clone","","",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"isaac64rng"}}],[11,"next_u32","","",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"u32"}}],[11,"next_u64","","",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"u64"}}],[11,"reseed","","",17,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",17,null],[11,"rand","","",17,{"inputs":[{"name":"isaac64rng"},{"name":"r"}],"output":{"name":"isaac64rng"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",18,{"inputs":[{"name":"chacharng"}],"output":{"name":"chacharng"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default\nfixed key of 8 zero words.",18,{"inputs":[{"name":"chacharng"}],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to\na user-provided value. This permits jumping\narbitrarily ahead (or backwards) in the pseudorandom stream.",18,{"inputs":[{"name":"chacharng"},{"name":"u64"},{"name":"u64"}],"output":null}],[11,"next_u32","","",18,{"inputs":[{"name":"chacharng"}],"output":{"name":"u32"}}],[11,"reseed","","",18,null],[11,"from_seed","","Create a ChaCha generator from a seed,\nobtained from a variable-length u32 array.\nOnly up to 8 words are used; if less than 8\nwords are used, the remaining are set to zero.",18,null],[11,"rand","","",18,{"inputs":[{"name":"chacharng"},{"name":"r"}],"output":{"name":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it\ngenerates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it\nhas generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",19,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by\nreplacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",20,{"inputs":[{"name":"reseeder"},{"name":"r"}],"output":null}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",19,{"inputs":[{"name":"reseedingrng"},{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been\ngenerated exceed the threshold.",19,{"inputs":[{"name":"reseedingrng"}],"output":null}],[11,"next_u32","","",19,{"inputs":[{"name":"reseedingrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",19,{"inputs":[{"name":"reseedingrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",19,null],[11,"reseed","","",19,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and\nseed. This uses a default value for `generation_threshold`.",19,null],[11,"clone","","",21,{"inputs":[{"name":"reseedwithdefault"}],"output":{"name":"reseedwithdefault"}}],[11,"reseed","","",21,{"inputs":[{"name":"reseedwithdefault"},{"name":"r"}],"output":null}],[11,"default","","",21,{"inputs":[{"name":"reseedwithdefault"}],"output":{"name":"reseedwithdefault"}}],[11,"rand","rand","",22,{"inputs":[{"name":"open01"},{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",23,{"inputs":[{"name":"closed01"},{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","","",22,{"inputs":[{"name":"open01"},{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",23,{"inputs":[{"name":"closed01"},{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","core::option","",24,{"inputs":[{"name":"option"},{"name":"r"}],"output":{"name":"option"}}],[0,"os","rand","Interfaces to the operating system provided random number\ngenerators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from\nthe operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",25,{"inputs":[{"name":"osrng"}],"output":{"name":"result"}}],[11,"next_u32","","",25,{"inputs":[{"name":"osrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",25,{"inputs":[{"name":"osrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",25,null],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will\nwork best with an infinite reader, but this is not required.",null,null],[11,"new","","Create a new `ReadRng` from a `Read`.",26,{"inputs":[{"name":"readrng"},{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",26,{"inputs":[{"name":"readrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",26,{"inputs":[{"name":"readrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",26,null],[8,"Rand","rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of\nrandomness.",27,{"inputs":[{"name":"rand"},{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",28,{"inputs":[{"name":"rng"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",28,{"inputs":[{"name":"rng"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open\ninterval `[0, 1)`.",28,{"inputs":[{"name":"rng"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open\ninterval `[0, 1)`.",28,{"inputs":[{"name":"rng"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",28,null],[11,"gen","","Return a random value of a `Rand` type.",28,{"inputs":[{"name":"rng"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly\ngenerated items.",28,{"inputs":[{"name":"rng"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",28,{"inputs":[{"name":"rng"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",28,{"inputs":[{"name":"rng"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",28,{"inputs":[{"name":"rng"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",28,null],[11,"shuffle","","Shuffle a mutable slice in place.",28,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce\nthe same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",29,{"inputs":[{"name":"seedablerng"},{"name":"seed"}],"output":null}],[10,"from_seed","","Create a new RNG with the given seed.",29,{"inputs":[{"name":"seedablerng"},{"name":"seed"}],"output":{"name":"self"}}],[11,"next_u32","alloc::boxed","",30,{"inputs":[{"name":"box"}],"output":{"name":"u32"}}],[11,"next_u64","","",30,{"inputs":[{"name":"box"}],"output":{"name":"u64"}}],[11,"next_f32","","",30,{"inputs":[{"name":"box"}],"output":{"name":"f32"}}],[11,"next_f64","","",30,{"inputs":[{"name":"box"}],"output":{"name":"f64"}}],[11,"fill_bytes","","",30,null],[11,"next","rand","",31,{"inputs":[{"name":"generator"}],"output":{"name":"option"}}],[11,"next","","",32,{"inputs":[{"name":"asciigenerator"}],"output":{"name":"option"}}],[11,"clone","","",33,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"xorshiftrng"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",33,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",33,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",33,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",33,null],[11,"rand","","",33,{"inputs":[{"name":"xorshiftrng"},{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"clone","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"stdrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"result"}}],[11,"next_u32","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"u64"}}],[11,"reseed","","",34,null],[11,"from_seed","","",34,null],[11,"clone","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"threadrng"}}],[11,"next_u32","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",35,null]],"paths":[[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"Open01"],[3,"Closed01"],[4,"Option"],[3,"OsRng"],[3,"ReadRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Box"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex['clippy'] = {"items":[[0,"","clippy","",null,null],[5,"plugin_registrar","","",null,{"inputs":[{"name":"registry"}],"output":null}],[0,"utils","","",null,null],[5,"in_macro","clippy::utils","returns true this expn_info was expanded by any macro",null,{"inputs":[{"name":"latecontext"},{"name":"span"}],"output":{"name":"bool"}}],[5,"in_external_macro","","returns true if the macro that expanded the crate was outside of\nthe current crate or was a compiler plugin",null,{"inputs":[{"name":"t"},{"name":"span"}],"output":{"name":"bool"}}],[5,"match_def_path","","check if a DefId's path matches the given absolute type path\nusage e.g. with\n`match_def_path(cx, id, &[\"core\", \"option\", \"Option\"])`",null,null],[5,"match_type","","check if type is struct or enum type with given def path",null,null],[5,"match_impl_method","","check if method call given in \"expr\" belongs to given trait",null,null],[5,"match_trait_method","","check if method call given in \"expr\" belongs to given trait",null,null],[5,"match_path","","match a Path against a slice of segment string literals, e.g.\n`match_path(path, &[\"std\", \"rt\", \"begin_unwind\"])`",null,null],[5,"match_path_ast","","match a Path against a slice of segment string literals, e.g.\n`match_path(path, &[\"std\", \"rt\", \"begin_unwind\"])`",null,null],[5,"get_item_name","","get the name of the item the expression is in, if available",null,{"inputs":[{"name":"latecontext"},{"name":"expr"}],"output":{"name":"option"}}],[5,"is_from_for_desugar","","checks if a `let` decl is from a for loop desugaring",null,{"inputs":[{"name":"decl"}],"output":{"name":"bool"}}],[5,"snippet","","convert a span to a code snippet if available, otherwise use default, e.g.\n`snippet(cx, expr.span, \"..\")`",null,{"inputs":[{"name":"t"},{"name":"span"},{"name":"str"}],"output":{"name":"cow"}}],[5,"snippet_block","","convert a span (from a block) to a code snippet if available, otherwise use default, e.g.\n`snippet(cx, expr.span, \"..\")`\nThis trims the code of indentation, except for the first line\nUse it for blocks or block-like things which need to be printed as such",null,{"inputs":[{"name":"t"},{"name":"span"},{"name":"str"}],"output":{"name":"cow"}}],[5,"expr_block","","Like snippet_block, but add braces if the expr is not an ExprBlock\nAlso takes an Option<String> which can be put inside the braces",null,{"inputs":[{"name":"t"},{"name":"expr"},{"name":"option"},{"name":"str"}],"output":{"name":"cow"}}],[5,"trim_multiline","","Trim indentation from a multiline string\nwith possibility of ignoring the first line",null,{"inputs":[{"name":"cow"},{"name":"bool"}],"output":{"name":"cow"}}],[5,"get_parent_expr","","get a parent expr if any – this is useful to constrain a lint",null,{"inputs":[{"name":"latecontext"},{"name":"expr"}],"output":{"name":"option"}}],[5,"get_enclosing_block","","",null,{"inputs":[{"name":"latecontext"},{"name":"nodeid"}],"output":{"name":"option"}}],[5,"span_lint","","",null,{"inputs":[{"name":"t"},{"name":"lint"},{"name":"span"},{"name":"str"}],"output":null}],[5,"span_help_and_lint","","",null,{"inputs":[{"name":"t"},{"name":"lint"},{"name":"span"},{"name":"str"},{"name":"str"}],"output":null}],[5,"span_note_and_lint","","",null,{"inputs":[{"name":"t"},{"name":"lint"},{"name":"span"},{"name":"str"},{"name":"span"},{"name":"str"}],"output":null}],[5,"walk_ptrs_ty","","return the base type for references and raw pointers",null,{"inputs":[{"name":"ty"}],"output":{"name":"ty"}}],[5,"walk_ptrs_ty_depth","","return the base type for references and raw pointers, and count reference depth",null,null],[5,"is_integer_literal","","",null,{"inputs":[{"name":"expr"},{"name":"u64"}],"output":{"name":"bool"}}],[5,"is_adjusted","","",null,{"inputs":[{"name":"latecontext"},{"name":"expr"}],"output":{"name":"bool"}}],[17,"OPTION_PATH","","",null,null],[17,"RESULT_PATH","","",null,null],[17,"STRING_PATH","","",null,null],[17,"VEC_PATH","","",null,null],[17,"LL_PATH","","",null,null],[17,"OPEN_OPTIONS_PATH","","",null,null],[17,"MUTEX_PATH","","",null,null],[0,"consts","clippy","",null,null],[4,"FloatWidth","clippy::consts","",null,null],[13,"Fw32","","",0,null],[13,"Fw64","","",0,null],[13,"FwAny","","",0,null],[4,"Constant","","a Lit_-like enum to fold constant `Expr`s into",null,null],[13,"ConstantStr","","a String \"abc\"",1,null],[13,"ConstantBinary","","a Binary String b\"abc\"",1,null],[13,"ConstantByte","","a single byte b'a'",1,null],[13,"ConstantChar","","a single char 'a'",1,null],[13,"ConstantInt","","an integer",1,null],[13,"ConstantFloat","","a float with given type",1,null],[13,"ConstantBool","","true or false",1,null],[13,"ConstantVec","","an array of constants",1,null],[13,"ConstantRepeat","","also an array, but with only one constant, repeated N times",1,null],[13,"ConstantTuple","","a tuple of constants",1,null],[5,"is_negative","","is the given LitIntType negative?",null,{"inputs":[{"name":"litinttype"}],"output":{"name":"bool"}}],[5,"constant","","",null,{"inputs":[{"name":"latecontext"},{"name":"expr"}],"output":{"name":"option"}}],[5,"constant_simple","","",null,{"inputs":[{"name":"expr"}],"output":{"name":"option"}}],[11,"clone","","",0,{"inputs":[{"name":"floatwidth"}],"output":{"name":"floatwidth"}}],[11,"fmt","","",0,{"inputs":[{"name":"floatwidth"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"floatwidth"},{"name":"floatwidth"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"floatwidth"},{"name":"floatwidth"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"floatwidth"},{"name":"floatty"}],"output":{"name":"floatwidth"}}],[11,"clone","","",1,{"inputs":[{"name":"constant"}],"output":{"name":"constant"}}],[11,"fmt","","",1,{"inputs":[{"name":"constant"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_float","","convert this constant to a f64, if possible",1,{"inputs":[{"name":"constant"}],"output":{"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"constant"},{"name":"constant"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"constant"},{"name":"constant"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"constant"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"types","clippy","",null,null],[3,"TypePass","clippy::types","Handles all the linting of funky types",null,null],[3,"LetPass","","",null,null],[3,"UnitCmp","","",null,null],[3,"CastPass","","",null,null],[3,"TypeComplexityPass","","",null,null],[7,"BOX_VEC","","",null,null],[7,"LINKEDLIST","","",null,null],[7,"LET_UNIT_VALUE","","",null,null],[7,"UNIT_CMP","","",null,null],[7,"CAST_PRECISION_LOSS","","",null,null],[7,"CAST_SIGN_LOSS","","",null,null],[7,"CAST_POSSIBLE_TRUNCATION","","",null,null],[7,"CAST_POSSIBLE_WRAP","","",null,null],[7,"TYPE_COMPLEXITY","","",null,null],[11,"get_lints","","",2,{"inputs":[{"name":"typepass"}],"output":{"name":"lintarray"}}],[11,"check_ty","","",2,{"inputs":[{"name":"typepass"},{"name":"latecontext"},{"name":"ty"}],"output":null}],[11,"get_lints","","",3,{"inputs":[{"name":"letpass"}],"output":{"name":"lintarray"}}],[11,"check_decl","","",3,{"inputs":[{"name":"letpass"},{"name":"latecontext"},{"name":"decl"}],"output":null}],[11,"get_lints","","",4,{"inputs":[{"name":"unitcmp"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",4,{"inputs":[{"name":"unitcmp"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[11,"get_lints","","",5,{"inputs":[{"name":"castpass"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",5,{"inputs":[{"name":"castpass"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[11,"get_lints","","",6,{"inputs":[{"name":"typecomplexitypass"}],"output":{"name":"lintarray"}}],[11,"check_fn","","",6,{"inputs":[{"name":"typecomplexitypass"},{"name":"latecontext"},{"name":"fnkind"},{"name":"fndecl"},{"name":"block"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"check_struct_field","","",6,{"inputs":[{"name":"typecomplexitypass"},{"name":"latecontext"},{"name":"structfield"}],"output":null}],[11,"check_item","","",6,{"inputs":[{"name":"typecomplexitypass"},{"name":"latecontext"},{"name":"item"}],"output":null}],[11,"check_trait_item","","",6,{"inputs":[{"name":"typecomplexitypass"},{"name":"latecontext"},{"name":"traititem"}],"output":null}],[11,"check_impl_item","","",6,{"inputs":[{"name":"typecomplexitypass"},{"name":"latecontext"},{"name":"implitem"}],"output":null}],[11,"check_local","","",6,{"inputs":[{"name":"typecomplexitypass"},{"name":"latecontext"},{"name":"local"}],"output":null}],[0,"misc","clippy","",null,null],[3,"TopLevelRefPass","clippy::misc","",null,null],[3,"CmpNan","","",null,null],[3,"FloatCmp","","",null,null],[3,"CmpOwned","","",null,null],[3,"ModuloOne","","",null,null],[3,"PatternPass","","",null,null],[7,"TOPLEVEL_REF_ARG","","",null,null],[7,"CMP_NAN","","",null,null],[7,"FLOAT_CMP","","",null,null],[7,"CMP_OWNED","","",null,null],[7,"MODULO_ONE","","",null,null],[7,"REDUNDANT_PATTERN","","",null,null],[11,"get_lints","","",7,{"inputs":[{"name":"toplevelrefpass"}],"output":{"name":"lintarray"}}],[11,"check_fn","","",7,{"inputs":[{"name":"toplevelrefpass"},{"name":"latecontext"},{"name":"fnkind"},{"name":"fndecl"},{"name":"block"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"check_stmt","","",7,{"inputs":[{"name":"toplevelrefpass"},{"name":"latecontext"},{"name":"stmt"}],"output":null}],[11,"clone","","",8,{"inputs":[{"name":"cmpnan"}],"output":{"name":"cmpnan"}}],[11,"get_lints","","",8,{"inputs":[{"name":"cmpnan"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",8,{"inputs":[{"name":"cmpnan"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[11,"clone","","",9,{"inputs":[{"name":"floatcmp"}],"output":{"name":"floatcmp"}}],[11,"get_lints","","",9,{"inputs":[{"name":"floatcmp"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",9,{"inputs":[{"name":"floatcmp"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[11,"clone","","",10,{"inputs":[{"name":"cmpowned"}],"output":{"name":"cmpowned"}}],[11,"get_lints","","",10,{"inputs":[{"name":"cmpowned"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",10,{"inputs":[{"name":"cmpowned"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[11,"clone","","",11,{"inputs":[{"name":"moduloone"}],"output":{"name":"moduloone"}}],[11,"get_lints","","",11,{"inputs":[{"name":"moduloone"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",11,{"inputs":[{"name":"moduloone"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[11,"clone","","",12,{"inputs":[{"name":"patternpass"}],"output":{"name":"patternpass"}}],[11,"get_lints","","",12,{"inputs":[{"name":"patternpass"}],"output":{"name":"lintarray"}}],[11,"check_pat","","",12,{"inputs":[{"name":"patternpass"},{"name":"latecontext"},{"name":"pat"}],"output":null}],[0,"eq_op","clippy","",null,null],[3,"EqOp","clippy::eq_op","",null,null],[5,"is_exp_equal","","",null,{"inputs":[{"name":"latecontext"},{"name":"expr"},{"name":"expr"}],"output":{"name":"bool"}}],[7,"EQ_OP","","",null,null],[11,"clone","","",13,{"inputs":[{"name":"eqop"}],"output":{"name":"eqop"}}],[11,"get_lints","","",13,{"inputs":[{"name":"eqop"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",13,{"inputs":[{"name":"eqop"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"bit_mask","clippy","",null,null],[3,"BitMask","clippy::bit_mask","Checks for incompatible bit masks in comparisons, e.g. `x & 1 == 2`.\nThis cannot work because the bit that makes up the value two was\nzeroed out by the bit-and with 1. So the formula for detecting if an\nexpression of the type  `_ <bit_op> m <cmp_op> c` (where `<bit_op>`\nis one of {`&`, '|'} and `<cmp_op>` is one of {`!=`, `>=`, `>` ,\n`!=`, `>=`, `>`}) can be determined from the following table:",null,null],[7,"BAD_BIT_MASK","","",null,null],[7,"INEFFECTIVE_BIT_MASK","","",null,null],[11,"clone","","",14,{"inputs":[{"name":"bitmask"}],"output":{"name":"bitmask"}}],[11,"get_lints","","",14,{"inputs":[{"name":"bitmask"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",14,{"inputs":[{"name":"bitmask"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"ptr_arg","clippy","Checks for usage of &Vec[_] and &String",null,null],[3,"PtrArg","clippy::ptr_arg","",null,null],[7,"PTR_ARG","","",null,null],[11,"clone","","",15,{"inputs":[{"name":"ptrarg"}],"output":{"name":"ptrarg"}}],[11,"get_lints","","",15,{"inputs":[{"name":"ptrarg"}],"output":{"name":"lintarray"}}],[11,"check_item","","",15,{"inputs":[{"name":"ptrarg"},{"name":"latecontext"},{"name":"item"}],"output":null}],[11,"check_impl_item","","",15,{"inputs":[{"name":"ptrarg"},{"name":"latecontext"},{"name":"implitem"}],"output":null}],[11,"check_trait_item","","",15,{"inputs":[{"name":"ptrarg"},{"name":"latecontext"},{"name":"traititem"}],"output":null}],[0,"needless_bool","clippy","Checks for needless boolean results of if-else expressions",null,null],[3,"NeedlessBool","clippy::needless_bool","",null,null],[7,"NEEDLESS_BOOL","","",null,null],[11,"clone","","",16,{"inputs":[{"name":"needlessbool"}],"output":{"name":"needlessbool"}}],[11,"get_lints","","",16,{"inputs":[{"name":"needlessbool"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",16,{"inputs":[{"name":"needlessbool"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"approx_const","clippy","",null,null],[3,"ApproxConstant","clippy::approx_const","",null,null],[7,"APPROX_CONSTANT","","",null,null],[11,"clone","","",17,{"inputs":[{"name":"approxconstant"}],"output":{"name":"approxconstant"}}],[11,"get_lints","","",17,{"inputs":[{"name":"approxconstant"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",17,{"inputs":[{"name":"approxconstant"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"eta_reduction","clippy","",null,null],[3,"EtaPass","clippy::eta_reduction","",null,null],[7,"REDUNDANT_CLOSURE","","",null,null],[11,"get_lints","","",18,{"inputs":[{"name":"etapass"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",18,{"inputs":[{"name":"etapass"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"identity_op","clippy","",null,null],[3,"IdentityOp","clippy::identity_op","",null,null],[7,"IDENTITY_OP","","",null,null],[11,"clone","","",19,{"inputs":[{"name":"identityop"}],"output":{"name":"identityop"}}],[11,"get_lints","","",19,{"inputs":[{"name":"identityop"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",19,{"inputs":[{"name":"identityop"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"minmax","clippy","",null,null],[3,"MinMaxPass","clippy::minmax","",null,null],[7,"MIN_MAX","","",null,null],[11,"get_lints","","",20,{"inputs":[{"name":"minmaxpass"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",20,{"inputs":[{"name":"minmaxpass"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"mut_mut","clippy","",null,null],[3,"MutMut","clippy::mut_mut","",null,null],[7,"MUT_MUT","","",null,null],[11,"clone","","",21,{"inputs":[{"name":"mutmut"}],"output":{"name":"mutmut"}}],[11,"get_lints","","",21,{"inputs":[{"name":"mutmut"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",21,{"inputs":[{"name":"mutmut"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[11,"check_ty","","",21,{"inputs":[{"name":"mutmut"},{"name":"latecontext"},{"name":"ty"}],"output":null}],[0,"mut_reference","clippy","",null,null],[3,"UnnecessaryMutPassed","clippy::mut_reference","",null,null],[7,"UNNECESSARY_MUT_PASSED","","",null,null],[11,"clone","","",22,{"inputs":[{"name":"unnecessarymutpassed"}],"output":{"name":"unnecessarymutpassed"}}],[11,"get_lints","","",22,{"inputs":[{"name":"unnecessarymutpassed"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",22,{"inputs":[{"name":"unnecessarymutpassed"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"len_zero","clippy","",null,null],[3,"LenZero","clippy::len_zero","",null,null],[7,"LEN_ZERO","","",null,null],[7,"LEN_WITHOUT_IS_EMPTY","","",null,null],[11,"clone","","",23,{"inputs":[{"name":"lenzero"}],"output":{"name":"lenzero"}}],[11,"get_lints","","",23,{"inputs":[{"name":"lenzero"}],"output":{"name":"lintarray"}}],[11,"check_item","","",23,{"inputs":[{"name":"lenzero"},{"name":"latecontext"},{"name":"item"}],"output":null}],[11,"check_expr","","",23,{"inputs":[{"name":"lenzero"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"attrs","clippy","checks for attributes",null,null],[3,"AttrPass","clippy::attrs","",null,null],[7,"INLINE_ALWAYS","","",null,null],[11,"clone","","",24,{"inputs":[{"name":"attrpass"}],"output":{"name":"attrpass"}}],[11,"get_lints","","",24,{"inputs":[{"name":"attrpass"}],"output":{"name":"lintarray"}}],[11,"check_item","","",24,{"inputs":[{"name":"attrpass"},{"name":"latecontext"},{"name":"item"}],"output":null}],[11,"check_impl_item","","",24,{"inputs":[{"name":"attrpass"},{"name":"latecontext"},{"name":"implitem"}],"output":null}],[11,"check_trait_item","","",24,{"inputs":[{"name":"attrpass"},{"name":"latecontext"},{"name":"traititem"}],"output":null}],[0,"collapsible_if","clippy","Checks for if expressions that contain only an if expression.",null,null],[3,"CollapsibleIf","clippy::collapsible_if","",null,null],[7,"COLLAPSIBLE_IF","","",null,null],[11,"clone","","",25,{"inputs":[{"name":"collapsibleif"}],"output":{"name":"collapsibleif"}}],[11,"get_lints","","",25,{"inputs":[{"name":"collapsibleif"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",25,{"inputs":[{"name":"collapsibleif"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"unicode","clippy","",null,null],[3,"Unicode","clippy::unicode","",null,null],[7,"ZERO_WIDTH_SPACE","","",null,null],[7,"NON_ASCII_LITERAL","","",null,null],[7,"UNICODE_NOT_NFC","","",null,null],[11,"clone","","",26,{"inputs":[{"name":"unicode"}],"output":{"name":"unicode"}}],[11,"get_lints","","",26,{"inputs":[{"name":"unicode"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",26,{"inputs":[{"name":"unicode"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"shadow","clippy","",null,null],[3,"ShadowPass","clippy::shadow","",null,null],[7,"SHADOW_SAME","","",null,null],[7,"SHADOW_REUSE","","",null,null],[7,"SHADOW_UNRELATED","","",null,null],[11,"clone","","",27,{"inputs":[{"name":"shadowpass"}],"output":{"name":"shadowpass"}}],[11,"get_lints","","",27,{"inputs":[{"name":"shadowpass"}],"output":{"name":"lintarray"}}],[11,"check_fn","","",27,{"inputs":[{"name":"shadowpass"},{"name":"latecontext"},{"name":"fnkind"},{"name":"fndecl"},{"name":"block"},{"name":"span"},{"name":"nodeid"}],"output":null}],[0,"strings","clippy","This LintPass catches both string addition and string addition + assignment",null,null],[3,"StringAdd","clippy::strings","",null,null],[7,"STRING_ADD_ASSIGN","","",null,null],[7,"STRING_ADD","","",null,null],[11,"clone","","",28,{"inputs":[{"name":"stringadd"}],"output":{"name":"stringadd"}}],[11,"get_lints","","",28,{"inputs":[{"name":"stringadd"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",28,{"inputs":[{"name":"stringadd"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"methods","clippy","",null,null],[3,"MethodsPass","clippy::methods","",null,null],[7,"OPTION_UNWRAP_USED","","",null,null],[7,"RESULT_UNWRAP_USED","","",null,null],[7,"STR_TO_STRING","","",null,null],[7,"STRING_TO_STRING","","",null,null],[7,"SHOULD_IMPLEMENT_TRAIT","","",null,null],[7,"WRONG_SELF_CONVENTION","","",null,null],[7,"WRONG_PUB_SELF_CONVENTION","","",null,null],[11,"clone","","",29,{"inputs":[{"name":"methodspass"}],"output":{"name":"methodspass"}}],[11,"get_lints","","",29,{"inputs":[{"name":"methodspass"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",29,{"inputs":[{"name":"methodspass"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[11,"check_item","","",29,{"inputs":[{"name":"methodspass"},{"name":"latecontext"},{"name":"item"}],"output":null}],[0,"returns","clippy","",null,null],[3,"ReturnPass","clippy::returns","",null,null],[7,"NEEDLESS_RETURN","","",null,null],[7,"LET_AND_RETURN","","",null,null],[11,"clone","","",30,{"inputs":[{"name":"returnpass"}],"output":{"name":"returnpass"}}],[11,"get_lints","","",30,{"inputs":[{"name":"returnpass"}],"output":{"name":"lintarray"}}],[11,"check_fn","","",30,{"inputs":[{"name":"returnpass"},{"name":"earlycontext"},{"name":"fnkind"},{"name":"fndecl"},{"name":"block"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"check_block","","",30,{"inputs":[{"name":"returnpass"},{"name":"earlycontext"},{"name":"block"}],"output":null}],[0,"lifetimes","clippy","",null,null],[3,"LifetimePass","clippy::lifetimes","",null,null],[7,"NEEDLESS_LIFETIMES","","",null,null],[11,"clone","","",31,{"inputs":[{"name":"lifetimepass"}],"output":{"name":"lifetimepass"}}],[11,"get_lints","","",31,{"inputs":[{"name":"lifetimepass"}],"output":{"name":"lintarray"}}],[11,"check_item","","",31,{"inputs":[{"name":"lifetimepass"},{"name":"latecontext"},{"name":"item"}],"output":null}],[11,"check_impl_item","","",31,{"inputs":[{"name":"lifetimepass"},{"name":"latecontext"},{"name":"implitem"}],"output":null}],[11,"check_trait_item","","",31,{"inputs":[{"name":"lifetimepass"},{"name":"latecontext"},{"name":"traititem"}],"output":null}],[0,"loops","clippy","",null,null],[3,"LoopsPass","clippy::loops","",null,null],[7,"NEEDLESS_RANGE_LOOP","","",null,null],[7,"EXPLICIT_ITER_LOOP","","",null,null],[7,"ITER_NEXT_LOOP","","",null,null],[7,"WHILE_LET_LOOP","","",null,null],[7,"UNUSED_COLLECT","","",null,null],[7,"REVERSE_RANGE_LOOP","","",null,null],[7,"EXPLICIT_COUNTER_LOOP","","",null,null],[7,"EMPTY_LOOP","","",null,null],[7,"WHILE_LET_ON_ITERATOR","","",null,null],[11,"clone","","",32,{"inputs":[{"name":"loopspass"}],"output":{"name":"loopspass"}}],[11,"get_lints","","",32,{"inputs":[{"name":"loopspass"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",32,{"inputs":[{"name":"loopspass"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[11,"check_stmt","","",32,{"inputs":[{"name":"loopspass"},{"name":"latecontext"},{"name":"stmt"}],"output":null}],[0,"ranges","clippy","",null,null],[3,"StepByZero","clippy::ranges","",null,null],[7,"RANGE_STEP_BY_ZERO","","",null,null],[7,"RANGE_ZIP_WITH_LEN","","",null,null],[11,"clone","","",33,{"inputs":[{"name":"stepbyzero"}],"output":{"name":"stepbyzero"}}],[11,"get_lints","","",33,{"inputs":[{"name":"stepbyzero"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",33,{"inputs":[{"name":"stepbyzero"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"map_clone","clippy","",null,null],[3,"MapClonePass","clippy::map_clone","",null,null],[7,"MAP_CLONE","","",null,null],[11,"clone","","",34,{"inputs":[{"name":"mapclonepass"}],"output":{"name":"mapclonepass"}}],[11,"check_expr","","",34,{"inputs":[{"name":"mapclonepass"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[11,"get_lints","","",34,{"inputs":[{"name":"mapclonepass"}],"output":{"name":"lintarray"}}],[0,"matches","clippy","",null,null],[3,"MatchPass","clippy::matches","",null,null],[7,"SINGLE_MATCH","","",null,null],[7,"MATCH_REF_PATS","","",null,null],[7,"MATCH_BOOL","","",null,null],[11,"get_lints","","",35,{"inputs":[{"name":"matchpass"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",35,{"inputs":[{"name":"matchpass"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"precedence","clippy","",null,null],[3,"Precedence","clippy::precedence","",null,null],[7,"PRECEDENCE","","",null,null],[11,"clone","","",36,{"inputs":[{"name":"precedence"}],"output":{"name":"precedence"}}],[11,"get_lints","","",36,{"inputs":[{"name":"precedence"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",36,{"inputs":[{"name":"precedence"},{"name":"earlycontext"},{"name":"expr"}],"output":null}],[0,"mutex_atomic","clippy","Checks for uses of Mutex where an atomic value could be used",null,null],[3,"MutexAtomic","clippy::mutex_atomic","",null,null],[7,"MUTEX_ATOMIC","","",null,null],[7,"MUTEX_INTEGER","","",null,null],[11,"get_lints","","",37,{"inputs":[{"name":"mutexatomic"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",37,{"inputs":[{"name":"mutexatomic"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"zero_div_zero","clippy","",null,null],[3,"ZeroDivZeroPass","clippy::zero_div_zero","ZeroDivZeroPass is a pass that checks for a binary expression that consists\nof 0.0/0.0, which is always NaN. It is more clear to replace instances of\n0.0/0.0 with std::f32::NaN or std::f64::NaN, depending on the precision.",null,null],[7,"ZERO_DIVIDED_BY_ZERO","","",null,null],[11,"get_lints","","",38,{"inputs":[{"name":"zerodivzeropass"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",38,{"inputs":[{"name":"zerodivzeropass"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"open_options","clippy","",null,null],[3,"NonSensicalOpenOptions","clippy::open_options","",null,null],[7,"NONSENSICAL_OPEN_OPTIONS","","",null,null],[11,"clone","","",39,{"inputs":[{"name":"nonsensicalopenoptions"}],"output":{"name":"nonsensicalopenoptions"}}],[11,"get_lints","","",39,{"inputs":[{"name":"nonsensicalopenoptions"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",39,{"inputs":[{"name":"nonsensicalopenoptions"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"needless_features","clippy","Checks for usage of nightly features that have simple stable equivalents",null,null],[3,"NeedlessFeaturesPass","clippy::needless_features","",null,null],[7,"UNSTABLE_AS_SLICE","","",null,null],[7,"UNSTABLE_AS_MUT_SLICE","","",null,null],[11,"clone","","",40,{"inputs":[{"name":"needlessfeaturespass"}],"output":{"name":"needlessfeaturespass"}}],[11,"get_lints","","",40,{"inputs":[{"name":"needlessfeaturespass"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",40,{"inputs":[{"name":"needlessfeaturespass"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"needless_update","clippy","",null,null],[3,"NeedlessUpdatePass","clippy::needless_update","",null,null],[7,"NEEDLESS_UPDATE","","",null,null],[11,"clone","","",41,{"inputs":[{"name":"needlessupdatepass"}],"output":{"name":"needlessupdatepass"}}],[11,"get_lints","","",41,{"inputs":[{"name":"needlessupdatepass"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",41,{"inputs":[{"name":"needlessupdatepass"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"no_effect","clippy","",null,null],[3,"NoEffectPass","clippy::no_effect","",null,null],[7,"NO_EFFECT","","",null,null],[11,"clone","","",42,{"inputs":[{"name":"noeffectpass"}],"output":{"name":"noeffectpass"}}],[11,"get_lints","","",42,{"inputs":[{"name":"noeffectpass"}],"output":{"name":"lintarray"}}],[11,"check_stmt","","",42,{"inputs":[{"name":"noeffectpass"},{"name":"latecontext"},{"name":"stmt"}],"output":null}],[0,"temporary_assignment","clippy","",null,null],[3,"TemporaryAssignmentPass","clippy::temporary_assignment","",null,null],[7,"TEMPORARY_ASSIGNMENT","","",null,null],[11,"clone","","",43,{"inputs":[{"name":"temporaryassignmentpass"}],"output":{"name":"temporaryassignmentpass"}}],[11,"get_lints","","",43,{"inputs":[{"name":"temporaryassignmentpass"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",43,{"inputs":[{"name":"temporaryassignmentpass"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[11,"as_str","syntax::ast","",44,{"inputs":[{"name":"name"}],"output":{"name":"internedstring"}}],[11,"new","syntax::util::interner","",45,{"inputs":[{"name":"interner"}],"output":{"name":"interner"}}],[11,"prefill","","",45,null],[11,"intern","","",45,{"inputs":[{"name":"interner"},{"name":"t"}],"output":{"name":"name"}}],[11,"gensym","","",45,{"inputs":[{"name":"interner"},{"name":"t"}],"output":{"name":"name"}}],[11,"get","","",45,{"inputs":[{"name":"interner"},{"name":"name"}],"output":{"name":"t"}}],[11,"len","","",45,{"inputs":[{"name":"interner"}],"output":{"name":"usize"}}],[11,"find","","",45,{"inputs":[{"name":"interner"},{"name":"q"}],"output":{"name":"option"}}],[11,"clear","","",45,null],[11,"partial_cmp","","",46,{"inputs":[{"name":"rcstr"},{"name":"rcstr"}],"output":{"name":"option"}}],[11,"lt","","",46,{"inputs":[{"name":"rcstr"},{"name":"rcstr"}],"output":{"name":"bool"}}],[11,"le","","",46,{"inputs":[{"name":"rcstr"},{"name":"rcstr"}],"output":{"name":"bool"}}],[11,"gt","","",46,{"inputs":[{"name":"rcstr"},{"name":"rcstr"}],"output":{"name":"bool"}}],[11,"ge","","",46,{"inputs":[{"name":"rcstr"},{"name":"rcstr"}],"output":{"name":"bool"}}],[11,"hash","","",46,null],[11,"eq","","",46,{"inputs":[{"name":"rcstr"},{"name":"rcstr"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"rcstr"},{"name":"rcstr"}],"output":{"name":"bool"}}],[11,"clone","","",46,{"inputs":[{"name":"rcstr"}],"output":{"name":"rcstr"}}],[11,"new","","",46,{"inputs":[{"name":"rcstr"},{"name":"str"}],"output":{"name":"rcstr"}}],[11,"cmp","","",46,{"inputs":[{"name":"rcstr"},{"name":"rcstr"}],"output":{"name":"ordering"}}],[11,"fmt","","",46,{"inputs":[{"name":"rcstr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"rcstr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","",46,{"inputs":[{"name":"rcstr"}],"output":{"name":"str"}}],[11,"deref","","",46,{"inputs":[{"name":"rcstr"}],"output":{"name":"str"}}],[11,"new","","",47,{"inputs":[{"name":"strinterner"}],"output":{"name":"strinterner"}}],[11,"prefill","","",47,null],[11,"intern","","",47,{"inputs":[{"name":"strinterner"},{"name":"str"}],"output":{"name":"name"}}],[11,"gensym","","",47,{"inputs":[{"name":"strinterner"},{"name":"str"}],"output":{"name":"name"}}],[11,"gensym_copy","","Create a gensym with the same name as an existing\nentry.",47,{"inputs":[{"name":"strinterner"},{"name":"name"}],"output":{"name":"name"}}],[11,"get","","",47,{"inputs":[{"name":"strinterner"},{"name":"name"}],"output":{"name":"rcstr"}}],[11,"len","","",47,{"inputs":[{"name":"strinterner"}],"output":{"name":"usize"}}],[11,"find","","",47,{"inputs":[{"name":"strinterner"},{"name":"q"}],"output":{"name":"option"}}],[11,"clear","","",47,null],[11,"reset","","",47,null],[11,"from_iter","syntax::util::small_vector","",48,{"inputs":[{"name":"smallvector"},{"name":"i"}],"output":{"name":"smallvector"}}],[11,"extend","","",48,null],[11,"zero","","",48,{"inputs":[{"name":"smallvector"}],"output":{"name":"smallvector"}}],[11,"one","","",48,{"inputs":[{"name":"smallvector"},{"name":"t"}],"output":{"name":"smallvector"}}],[11,"many","","",48,{"inputs":[{"name":"smallvector"},{"name":"vec"}],"output":{"name":"smallvector"}}],[11,"as_slice","","",48,null],[11,"pop","","",48,{"inputs":[{"name":"smallvector"}],"output":{"name":"option"}}],[11,"push","","",48,null],[11,"push_all","","",48,null],[11,"get","","",48,{"inputs":[{"name":"smallvector"},{"name":"usize"}],"output":{"name":"t"}}],[11,"expect_one","","",48,{"inputs":[{"name":"smallvector"},{"name":"str"}],"output":{"name":"t"}}],[11,"move_iter","","Deprecated: use `into_iter`.",48,{"inputs":[{"name":"smallvector"}],"output":{"name":"intoiter"}}],[11,"into_iter","","",48,{"inputs":[{"name":"smallvector"}],"output":{"name":"intoiter"}}],[11,"len","","",48,{"inputs":[{"name":"smallvector"}],"output":{"name":"usize"}}],[11,"is_empty","","",48,{"inputs":[{"name":"smallvector"}],"output":{"name":"bool"}}],[11,"next","","",49,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",49,null],[11,"move_map","","",48,{"inputs":[{"name":"smallvector"},{"name":"f"}],"output":{"name":"smallvector"}}],[11,"eq","syntax::util::parser","",50,{"inputs":[{"name":"assocop"},{"name":"assocop"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"assocop"},{"name":"assocop"}],"output":{"name":"bool"}}],[11,"fmt","","",50,{"inputs":[{"name":"assocop"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",51,{"inputs":[{"name":"fixity"},{"name":"fixity"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"fixity"},{"name":"fixity"}],"output":{"name":"bool"}}],[11,"fmt","","",51,{"inputs":[{"name":"fixity"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_token","","Create a new AssocOP from a token",50,{"inputs":[{"name":"assocop"},{"name":"token"}],"output":{"name":"option"}}],[11,"from_ast_binop","","Create a new AssocOp from ast::BinOp_.",50,{"inputs":[{"name":"assocop"},{"name":"binop_"}],"output":{"name":"assocop"}}],[11,"precedence","","Gets the precedence of this operator",50,{"inputs":[{"name":"assocop"}],"output":{"name":"usize"}}],[11,"fixity","","Gets the fixity of this operator",50,{"inputs":[{"name":"assocop"}],"output":{"name":"fixity"}}],[11,"is_comparison","","",50,{"inputs":[{"name":"assocop"}],"output":{"name":"bool"}}],[11,"is_assign_like","","",50,{"inputs":[{"name":"assocop"}],"output":{"name":"bool"}}],[11,"to_ast_binop","","",50,{"inputs":[{"name":"assocop"}],"output":{"name":"option"}}],[11,"clone","syntax::diagnostics::registry","",52,{"inputs":[{"name":"registry"}],"output":{"name":"registry"}}],[11,"new","","",52,null],[11,"find_description","","",52,{"inputs":[{"name":"registry"},{"name":"str"}],"output":{"name":"option"}}],[11,"encode","syntax::diagnostics::metadata","",53,{"inputs":[{"name":"errormetadata"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",53,{"inputs":[{"name":"errormetadata"},{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",53,{"inputs":[{"name":"errormetadata"},{"name":"errormetadata"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"errormetadata"},{"name":"errormetadata"}],"output":{"name":"bool"}}],[11,"encode","","",54,{"inputs":[{"name":"errorlocation"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",54,{"inputs":[{"name":"errorlocation"},{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",54,{"inputs":[{"name":"errorlocation"},{"name":"errorlocation"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"errorlocation"},{"name":"errorlocation"}],"output":{"name":"bool"}}],[11,"from_span","","Create an error location from a span.",54,{"inputs":[{"name":"errorlocation"},{"name":"extctxt"},{"name":"span"}],"output":{"name":"errorlocation"}}],[11,"hash","syntax::parse::parser","",55,null],[11,"cmp","","",55,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",55,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":{"name":"option"}}],[11,"lt","","",55,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"le","","",55,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"gt","","",55,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"ge","","",55,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"clone","","",55,{"inputs":[{"name":"restrictions"}],"output":{"name":"restrictions"}}],[11,"eq","","",55,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",55,{"inputs":[{"name":"restrictions"}],"output":{"name":"restrictions"}}],[11,"all","","Returns the set containing all flags.",55,{"inputs":[{"name":"restrictions"}],"output":{"name":"restrictions"}}],[11,"bits","","Returns the raw value of the flags currently stored.",55,{"inputs":[{"name":"restrictions"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",55,{"inputs":[{"name":"restrictions"},{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",55,{"inputs":[{"name":"restrictions"},{"name":"u8"}],"output":{"name":"restrictions"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",55,{"inputs":[{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",55,{"inputs":[{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",55,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",55,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",55,null],[11,"remove","","Removes the specified flags in-place.",55,null],[11,"toggle","","Toggles the specified flags in-place.",55,null],[11,"bitor","","Returns the union of the two sets of flags.",55,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":{"name":"restrictions"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",55,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":{"name":"restrictions"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",55,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":{"name":"restrictions"}}],[11,"sub","","Returns the set difference of the two sets of flags.",55,{"inputs":[{"name":"restrictions"},{"name":"restrictions"}],"output":{"name":"restrictions"}}],[11,"not","","Returns the complement of this set of flags.",55,{"inputs":[{"name":"restrictions"}],"output":{"name":"restrictions"}}],[11,"eq","","",56,{"inputs":[{"name":"pathparsingmode"},{"name":"pathparsingmode"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"pathparsingmode"},{"name":"pathparsingmode"}],"output":{"name":"bool"}}],[11,"clone","","",56,{"inputs":[{"name":"pathparsingmode"}],"output":{"name":"pathparsingmode"}}],[11,"eq","","",57,{"inputs":[{"name":"boundparsingmode"},{"name":"boundparsingmode"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"boundparsingmode"},{"name":"boundparsingmode"}],"output":{"name":"bool"}}],[11,"clone","","",57,{"inputs":[{"name":"boundparsingmode"}],"output":{"name":"boundparsingmode"}}],[11,"clone","","",58,{"inputs":[{"name":"tokentype"}],"output":{"name":"tokentype"}}],[11,"eq","","",58,{"inputs":[{"name":"tokentype"},{"name":"tokentype"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"tokentype"},{"name":"tokentype"}],"output":{"name":"bool"}}],[11,"new","","",59,{"inputs":[{"name":"parser"},{"name":"parsesess"},{"name":"vec"},{"name":"box"}],"output":{"name":"parser"}}],[11,"parse_expr_panic","","",59,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[11,"parse_item_panic","","",59,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[11,"parse_pat_panic","","",59,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[11,"parse_arm_panic","","",59,{"inputs":[{"name":"parser"}],"output":{"name":"arm"}}],[11,"parse_ty_panic","","",59,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[11,"parse_stmt_panic","","",59,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[11,"parse_attribute_panic","","",59,{"inputs":[{"name":"parser"},{"name":"bool"}],"output":{"name":"spanned"}}],[11,"token_to_string","","Convert a token to a string using self's reader",59,{"inputs":[{"name":"parser"},{"name":"token"}],"output":{"name":"string"}}],[11,"this_token_to_string","","Convert the current token to a string using self's reader",59,{"inputs":[{"name":"parser"}],"output":{"name":"string"}}],[11,"unexpected_last","","",59,{"inputs":[{"name":"parser"},{"name":"token"}],"output":{"name":"fatalerror"}}],[11,"unexpected","","",59,{"inputs":[{"name":"parser"}],"output":{"name":"fatalerror"}}],[11,"expect","","Expect and consume the token t. Signal an error if\nthe next token is not t.",59,{"inputs":[{"name":"parser"},{"name":"token"}],"output":{"name":"result"}}],[11,"expect_one_of","","Expect next token to be edible or inedible token.  If edible,\nthen consume it; if inedible, then return without consuming\nanything.  Signal a fatal error if next token is unexpected.",59,null],[11,"check_for_erroneous_unit_struct_expecting","","Check for erroneous `ident { }`; if matches, signal error and\nrecover (without consuming any expected input token).  Returns\ntrue if and only if input was consumed for recovery.",59,null],[11,"commit_expr","","Commit to parsing a complete expression `e` expected to be\nfollowed by some token from the set edible + inedible.  Recover\nfrom anticipated input errors, discarding erroneous characters.",59,null],[11,"commit_expr_expecting","","",59,{"inputs":[{"name":"parser"},{"name":"expr"},{"name":"token"}],"output":{"name":"result"}}],[11,"commit_stmt","","Commit to parsing a complete statement `s`, which expects to be\nfollowed by some token from the set edible + inedible.  Check\nfor recoverable input errors, discarding erroneous characters.",59,null],[11,"commit_stmt_expecting","","",59,{"inputs":[{"name":"parser"},{"name":"token"}],"output":{"name":"result"}}],[11,"parse_ident","","",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_ident_or_self_type","","",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_path_list_item","","",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"check","","Check if the next token is `tok`, and return `true` if so.",59,{"inputs":[{"name":"parser"},{"name":"token"}],"output":{"name":"bool"}}],[11,"eat","","Consume token 'tok' if it exists. Returns true if the given\ntoken was present, false otherwise.",59,{"inputs":[{"name":"parser"},{"name":"token"}],"output":{"name":"result"}}],[11,"check_keyword","","",59,{"inputs":[{"name":"parser"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"eat_keyword","","If the next token is the given keyword, eat it and return\ntrue. Otherwise, return false.",59,{"inputs":[{"name":"parser"},{"name":"keyword"}],"output":{"name":"result"}}],[11,"eat_keyword_noexpect","","",59,{"inputs":[{"name":"parser"},{"name":"keyword"}],"output":{"name":"result"}}],[11,"expect_keyword","","If the given word is not a keyword, signal an error.\nIf the next token is not the given word, signal an error.\nOtherwise, eat it.",59,{"inputs":[{"name":"parser"},{"name":"keyword"}],"output":{"name":"result"}}],[11,"check_strict_keywords","","Signal an error if the given string is a strict keyword",59,null],[11,"check_reserved_keywords","","Signal an error if the current token is a reserved keyword",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"expect_no_suffix","","",59,null],[11,"expect_gt","","Expect and consume a GT. if a >> is seen, replace it\nwith a single > and continue. If a GT is not seen,\nsignal an error.",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_seq_to_before_gt_or_return","","",59,{"inputs":[{"name":"parser"},{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"parse_seq_to_before_gt","","Parse a sequence bracketed by '<' and '>', stopping\nbefore the '>'.",59,{"inputs":[{"name":"parser"},{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"parse_seq_to_gt","","",59,{"inputs":[{"name":"parser"},{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"parse_seq_to_gt_or_return","","",59,{"inputs":[{"name":"parser"},{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"parse_seq_to_end","","Parse a sequence, including the closing delimiter. The function\nf must consume tokens until reaching the next separator or\nclosing bracket.",59,{"inputs":[{"name":"parser"},{"name":"token"},{"name":"seqsep"},{"name":"f"}],"output":{"name":"result"}}],[11,"parse_seq_to_before_end","","Parse a sequence, not including the closing delimiter. The function\nf must consume tokens until reaching the next separator or\nclosing bracket.",59,{"inputs":[{"name":"parser"},{"name":"token"},{"name":"seqsep"},{"name":"f"}],"output":{"name":"result"}}],[11,"parse_unspanned_seq","","Parse a sequence, including the closing delimiter. The function\nf must consume tokens until reaching the next separator or\nclosing bracket.",59,{"inputs":[{"name":"parser"},{"name":"token"},{"name":"token"},{"name":"seqsep"},{"name":"f"}],"output":{"name":"result"}}],[11,"parse_enum_variant_seq","","Parse a sequence parameter of enum variant. For consistency purposes,\nthese should not be empty.",59,{"inputs":[{"name":"parser"},{"name":"token"},{"name":"token"},{"name":"seqsep"},{"name":"f"}],"output":{"name":"result"}}],[11,"parse_seq","","",59,{"inputs":[{"name":"parser"},{"name":"token"},{"name":"token"},{"name":"seqsep"},{"name":"f"}],"output":{"name":"result"}}],[11,"bump","","Advance the parser by one token",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"bump_and_get","","Advance the parser by one token and return the bumped token.",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"replace_token","","EFFECT: replace the current token and span with the given one",59,null],[11,"buffer_length","","",59,{"inputs":[{"name":"parser"}],"output":{"name":"isize"}}],[11,"look_ahead","","",59,{"inputs":[{"name":"parser"},{"name":"usize"},{"name":"f"}],"output":{"name":"r"}}],[11,"fatal","","",59,{"inputs":[{"name":"parser"},{"name":"str"}],"output":{"name":"fatalerror"}}],[11,"span_fatal","","",59,{"inputs":[{"name":"parser"},{"name":"span"},{"name":"str"}],"output":{"name":"fatalerror"}}],[11,"span_fatal_help","","",59,{"inputs":[{"name":"parser"},{"name":"span"},{"name":"str"},{"name":"str"}],"output":{"name":"fatalerror"}}],[11,"span_note","","",59,null],[11,"span_help","","",59,null],[11,"span_suggestion","","",59,null],[11,"fileline_help","","",59,null],[11,"bug","","",59,null],[11,"warn","","",59,null],[11,"span_warn","","",59,null],[11,"span_err","","",59,null],[11,"span_bug","","",59,null],[11,"abort_if_errors","","",59,null],[11,"id_to_interned_str","","",59,{"inputs":[{"name":"parser"},{"name":"ident"}],"output":{"name":"internedstring"}}],[11,"token_is_bare_fn_keyword","","Is the current token one of the keywords that signals a bare function\ntype?",59,{"inputs":[{"name":"parser"}],"output":{"name":"bool"}}],[11,"get_lifetime","","",59,{"inputs":[{"name":"parser"}],"output":{"name":"ident"}}],[11,"parse_for_in_type","","",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_ty_path","","",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_ty_bare_fn","","parse a TyBareFn type:",59,{"inputs":[{"name":"parser"},{"name":"vec"}],"output":{"name":"result"}}],[11,"parse_obsolete_closure_kind","","Parses an obsolete closure kind (`&:`, `&mut:`, or `:`).",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_unsafety","","",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_trait_items","","Parse the items in a trait declaration",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_mt","","Parse a possibly mutable type",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_ret_ty","","Parse optional return type [ -> TY ] in function decl",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_ty_sum","","Parse a type in a context where `T1+T2` is allowed.",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_ty_nopanic","","Parse a type.",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_borrowed_pointee","","",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_ptr","","",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"is_named_argument","","",59,{"inputs":[{"name":"parser"}],"output":{"name":"bool"}}],[11,"parse_arg_general","","This version of parse arg doesn't necessarily require\nidentifier names.",59,{"inputs":[{"name":"parser"},{"name":"bool"}],"output":{"name":"result"}}],[11,"parse_arg","","Parse a single function argument",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_fn_block_arg","","Parse an argument in a lambda header e.g. |arg, arg|",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"maybe_parse_fixed_length_of_vec","","",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"lit_from_token","","Matches token_lit = LIT_INTEGER | ...",59,{"inputs":[{"name":"parser"},{"name":"token"}],"output":{"name":"result"}}],[11,"parse_lit","","Matches lit = true | false | token_lit",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_literal_maybe_minus","","matches '-' lit | lit",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_qualified_path","","Parses qualified path.",59,{"inputs":[{"name":"parser"},{"name":"pathparsingmode"}],"output":{"name":"result"}}],[11,"parse_path","","Parses a path and optional type parameter bounds, depending on the\nmode. The `mode` parameter determines whether lifetimes, types, and/or\nbounds are permitted and whether `::` must precede type parameter\ngroups.",59,{"inputs":[{"name":"parser"},{"name":"pathparsingmode"}],"output":{"name":"result"}}],[11,"parse_path_segments_without_colons","","Examples:\n- `a::b<T,U>::c<V,W>`\n- `a::b<T,U>::c(V) -> W`\n- `a::b<T,U>::c(V)`",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_path_segments_with_colons","","Examples:\n- `a::b::<T,U>::c`",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_path_segments_without_types","","Examples:\n- `a::b::c`",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_opt_lifetime","","parses 0 or 1 lifetime",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_lifetime","","Parses a single lifetime\nMatches lifetime = LIFETIME",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_lifetime_defs","","Parses `lifetime_defs = [ lifetime_defs { ',' lifetime_defs } ]` where `lifetime_def  =\nlifetime [':' lifetimes]`",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_lifetimes","","matches lifetimes = ( lifetime ) | ( lifetime , lifetimes ) actually, it matches the empty\none too, but putting that in there messes up the grammar....",59,{"inputs":[{"name":"parser"},{"name":"token"}],"output":{"name":"result"}}],[11,"parse_mutability","","Parse mutability declaration (mut/const/imm)",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_field","","Parse ident COLON expr",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"mk_expr","","",59,{"inputs":[{"name":"parser"},{"name":"bytepos"},{"name":"bytepos"},{"name":"expr_"}],"output":{"name":"p"}}],[11,"mk_unary","","",59,{"inputs":[{"name":"parser"},{"name":"unop"},{"name":"p"}],"output":{"name":"expr_"}}],[11,"mk_binary","","",59,{"inputs":[{"name":"parser"},{"name":"spanned"},{"name":"p"},{"name":"p"}],"output":{"name":"expr_"}}],[11,"mk_call","","",59,{"inputs":[{"name":"parser"},{"name":"p"},{"name":"vec"}],"output":{"name":"expr_"}}],[11,"mk_index","","",59,{"inputs":[{"name":"parser"},{"name":"p"},{"name":"p"}],"output":{"name":"expr_"}}],[11,"mk_range","","",59,{"inputs":[{"name":"parser"},{"name":"option"},{"name":"option"}],"output":{"name":"expr_"}}],[11,"mk_field","","",59,{"inputs":[{"name":"parser"},{"name":"p"},{"name":"spanned"}],"output":{"name":"expr_"}}],[11,"mk_tup_field","","",59,{"inputs":[{"name":"parser"},{"name":"p"},{"name":"spanned"}],"output":{"name":"expr_"}}],[11,"mk_assign_op","","",59,{"inputs":[{"name":"parser"},{"name":"spanned"},{"name":"p"},{"name":"p"}],"output":{"name":"expr_"}}],[11,"mk_mac_expr","","",59,{"inputs":[{"name":"parser"},{"name":"bytepos"},{"name":"bytepos"},{"name":"mac_"}],"output":{"name":"p"}}],[11,"mk_lit_u32","","",59,{"inputs":[{"name":"parser"},{"name":"u32"}],"output":{"name":"p"}}],[11,"parse_bottom_expr","","At the bottom (top?) of the precedence hierarchy,\nparse things like parenthesized exprs,\nmacros, return, etc.",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_block_expr","","Parse a block or unsafe block",59,{"inputs":[{"name":"parser"},{"name":"bytepos"},{"name":"blockcheckmode"}],"output":{"name":"result"}}],[11,"parse_dot_or_call_expr","","parse a.b or a(13) or a[4] or just a",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_dot_or_call_expr_with","","",59,{"inputs":[{"name":"parser"},{"name":"p"}],"output":{"name":"result"}}],[11,"check_unknown_macro_variable","","",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_sep_and_kleene_op","","Parse an optional separator followed by a Kleene-style\nrepetition token (+ or *).",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_token_tree","","parse a single token tree from the input.",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_all_token_trees","","",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_prefix_expr","","Parse a prefix-unary-operator expr",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_assoc_expr","","Parse an associative expression",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_assoc_expr_with","","Parse an associative expression with operators of at least `min_prec` precedence",59,{"inputs":[{"name":"parser"},{"name":"usize"},{"name":"option"}],"output":{"name":"result"}}],[11,"parse_if_expr","","Parse an 'if' or 'if let' expression ('if' token already eaten)",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_if_let_expr","","Parse an 'if let' expression ('if' token already eaten)",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_lambda_expr","","",59,{"inputs":[{"name":"parser"},{"name":"bytepos"},{"name":"captureclause"}],"output":{"name":"result"}}],[11,"parse_else_expr","","",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_for_expr","","Parse a 'for' .. 'in' expression ('for' token already eaten)",59,{"inputs":[{"name":"parser"},{"name":"option"},{"name":"bytepos"}],"output":{"name":"result"}}],[11,"parse_while_expr","","Parse a 'while' or 'while let' expression ('while' token already eaten)",59,{"inputs":[{"name":"parser"},{"name":"option"},{"name":"bytepos"}],"output":{"name":"result"}}],[11,"parse_while_let_expr","","Parse a 'while let' expression ('while' token already eaten)",59,{"inputs":[{"name":"parser"},{"name":"option"},{"name":"bytepos"}],"output":{"name":"result"}}],[11,"parse_loop_expr","","",59,{"inputs":[{"name":"parser"},{"name":"option"},{"name":"bytepos"}],"output":{"name":"result"}}],[11,"parse_arm_nopanic","","",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_expr_nopanic","","Parse an expression",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"with_res","","Evaluate the closure with restrictions in place.",59,{"inputs":[{"name":"parser"},{"name":"restrictions"},{"name":"f"}],"output":{"name":"result"}}],[11,"parse_expr_res","","Parse an expression, subject to the given restrictions",59,{"inputs":[{"name":"parser"},{"name":"restrictions"}],"output":{"name":"result"}}],[11,"parse_pat_nopanic","","Parse a pattern.",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_stmt_nopanic","","Parse a statement. may include decl.",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_block","","Parse a block. No inner attrs are allowed.",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_generics","","Parse a set of optional generic type parameter declarations. Where\nclauses are not parsed here, and must be added later via\n`parse_where_clause()`.",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_where_clause","","Parses an optional `where` clause and places it in `generics`.",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_fn_decl","","Parse the argument list and result type of a function declaration",59,{"inputs":[{"name":"parser"},{"name":"bool"}],"output":{"name":"result"}}],[11,"is_const_item","","true if we are looking at `const ID`, false for things like `const fn` etc",59,{"inputs":[{"name":"parser"}],"output":{"name":"bool"}}],[11,"parse_fn_front_matter","","parses all the \"front matter\" for a `fn` declaration, up to\nand including the `fn` keyword:",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_impl_item","","Parse an impl item.",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_record_struct_body","","",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_tuple_struct_body","","",59,{"inputs":[{"name":"parser"},{"name":"generics"}],"output":{"name":"result"}}],[11,"parse_single_struct_field","","Parse a structure field declaration",59,{"inputs":[{"name":"parser"},{"name":"visibility"},{"name":"vec"}],"output":{"name":"result"}}],[11,"submod_path_from_attr","","",59,null],[11,"default_submod_path","","Returns either a path to a module, or .",59,{"inputs":[{"name":"parser"},{"name":"ident"},{"name":"path"},{"name":"codemap"}],"output":{"name":"modulepath"}}],[11,"parse_item_nopanic","","",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_crate_mod","","Parses a source module as a crate. This is the main\nentry point for the parser.",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_optional_str","","",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_str","","",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"eq","syntax::parse::lexer::comments","",60,{"inputs":[{"name":"commentstyle"},{"name":"commentstyle"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"commentstyle"},{"name":"commentstyle"}],"output":{"name":"bool"}}],[11,"clone","","",60,{"inputs":[{"name":"commentstyle"}],"output":{"name":"commentstyle"}}],[11,"clone","","",61,{"inputs":[{"name":"comment"}],"output":{"name":"comment"}}],[11,"clone","","",62,{"inputs":[{"name":"literal"}],"output":{"name":"literal"}}],[11,"fmt","syntax::parse::lexer","",63,{"inputs":[{"name":"tokenandspan"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",63,{"inputs":[{"name":"tokenandspan"},{"name":"tokenandspan"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"tokenandspan"},{"name":"tokenandspan"}],"output":{"name":"bool"}}],[11,"clone","","",63,{"inputs":[{"name":"tokenandspan"}],"output":{"name":"tokenandspan"}}],[11,"is_eof","","",64,{"inputs":[{"name":"stringreader"}],"output":{"name":"bool"}}],[11,"next_token","","Return the next token. EFFECT: advances the string_reader.",64,{"inputs":[{"name":"stringreader"}],"output":{"name":"tokenandspan"}}],[11,"fatal","","",64,{"inputs":[{"name":"stringreader"},{"name":"str"}],"output":{"name":"fatalerror"}}],[11,"err","","",64,null],[11,"peek","","",64,{"inputs":[{"name":"stringreader"}],"output":{"name":"tokenandspan"}}],[11,"is_eof","syntax::ext::tt::transcribe","",65,{"inputs":[{"name":"ttreader"}],"output":{"name":"bool"}}],[11,"next_token","","",65,{"inputs":[{"name":"ttreader"}],"output":{"name":"tokenandspan"}}],[11,"fatal","","",65,{"inputs":[{"name":"ttreader"},{"name":"str"}],"output":{"name":"fatalerror"}}],[11,"err","","",65,null],[11,"peek","","",65,{"inputs":[{"name":"ttreader"}],"output":{"name":"tokenandspan"}}],[11,"new_raw","syntax::parse::lexer","For comments.rs, which hackily pokes into pos and curr",64,{"inputs":[{"name":"stringreader"},{"name":"spanhandler"},{"name":"rc"}],"output":{"name":"stringreader"}}],[11,"new","","",64,{"inputs":[{"name":"stringreader"},{"name":"spanhandler"},{"name":"rc"}],"output":{"name":"stringreader"}}],[11,"curr_is","","",64,{"inputs":[{"name":"stringreader"},{"name":"char"}],"output":{"name":"bool"}}],[11,"fatal_span","","Report a fatal lexical error with a given span.",64,{"inputs":[{"name":"stringreader"},{"name":"span"},{"name":"str"}],"output":{"name":"fatalerror"}}],[11,"err_span","","Report a lexical error with a given span.",64,null],[11,"help_span","","Suggest some help with a given span.",64,null],[11,"with_str_from","","Calls `f` with a string slice of the source text spanning from `start`\nup to but excluding `self.last_pos`, meaning the slice does not include\nthe character `self.curr`.",64,{"inputs":[{"name":"stringreader"},{"name":"bytepos"},{"name":"f"}],"output":{"name":"t"}}],[11,"name_from","","Create a Name from a given offset to the current offset, each\nadjusted 1 towards each other (assumes that on either side there is a\nsingle-byte delimiter).",64,{"inputs":[{"name":"stringreader"},{"name":"bytepos"}],"output":{"name":"name"}}],[11,"name_from_to","","As name_from, with an explicit endpoint.",64,{"inputs":[{"name":"stringreader"},{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"name"}}],[11,"bump","","Advance the StringReader by one character. If a newline is\ndiscovered, add it to the FileMap's list of line start offsets.",64,null],[11,"nextch","","",64,{"inputs":[{"name":"stringreader"}],"output":{"name":"option"}}],[11,"nextch_is","","",64,{"inputs":[{"name":"stringreader"},{"name":"char"}],"output":{"name":"bool"}}],[11,"nextnextch","","",64,{"inputs":[{"name":"stringreader"}],"output":{"name":"option"}}],[11,"nextnextch_is","","",64,{"inputs":[{"name":"stringreader"},{"name":"char"}],"output":{"name":"bool"}}],[11,"fmt","syntax::parse::token","",66,{"inputs":[{"name":"binoptoken"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",66,null],[11,"eq","","",66,{"inputs":[{"name":"binoptoken"},{"name":"binoptoken"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"binoptoken"},{"name":"binoptoken"}],"output":{"name":"bool"}}],[11,"decode","","",66,{"inputs":[{"name":"binoptoken"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",66,{"inputs":[{"name":"binoptoken"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"binoptoken"}],"output":{"name":"binoptoken"}}],[11,"fmt","","",67,{"inputs":[{"name":"delimtoken"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",67,null],[11,"eq","","",67,{"inputs":[{"name":"delimtoken"},{"name":"delimtoken"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"delimtoken"},{"name":"delimtoken"}],"output":{"name":"bool"}}],[11,"decode","","",67,{"inputs":[{"name":"delimtoken"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",67,{"inputs":[{"name":"delimtoken"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"delimtoken"}],"output":{"name":"delimtoken"}}],[11,"fmt","","",68,{"inputs":[{"name":"identstyle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",68,null],[11,"eq","","",68,{"inputs":[{"name":"identstyle"},{"name":"identstyle"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"identstyle"},{"name":"identstyle"}],"output":{"name":"bool"}}],[11,"decode","","",68,{"inputs":[{"name":"identstyle"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",68,{"inputs":[{"name":"identstyle"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"identstyle"}],"output":{"name":"identstyle"}}],[11,"fmt","","",69,{"inputs":[{"name":"specialmacrovar"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",69,null],[11,"eq","","",69,{"inputs":[{"name":"specialmacrovar"},{"name":"specialmacrovar"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"specialmacrovar"},{"name":"specialmacrovar"}],"output":{"name":"bool"}}],[11,"decode","","",69,{"inputs":[{"name":"specialmacrovar"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",69,{"inputs":[{"name":"specialmacrovar"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"specialmacrovar"}],"output":{"name":"specialmacrovar"}}],[11,"as_str","","",69,{"inputs":[{"name":"specialmacrovar"}],"output":{"name":"str"}}],[11,"fmt","","",70,{"inputs":[{"name":"lit"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",70,null],[11,"eq","","",70,{"inputs":[{"name":"lit"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"lit"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"decode","","",70,{"inputs":[{"name":"lit"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",70,{"inputs":[{"name":"lit"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"lit"}],"output":{"name":"lit"}}],[11,"short_name","","",70,{"inputs":[{"name":"lit"}],"output":{"name":"str"}}],[11,"fmt","","",71,{"inputs":[{"name":"token"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",71,null],[11,"eq","","",71,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"decode","","",71,{"inputs":[{"name":"token"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",71,{"inputs":[{"name":"token"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",71,{"inputs":[{"name":"token"}],"output":{"name":"token"}}],[11,"is_like_gt","","Returns `true` if the token starts with '>'.",71,{"inputs":[{"name":"token"}],"output":{"name":"bool"}}],[11,"can_begin_expr","","Returns `true` if the token can appear at the start of an expression.",71,{"inputs":[{"name":"token"}],"output":{"name":"bool"}}],[11,"is_lit","","Returns `true` if the token is any literal",71,{"inputs":[{"name":"token"}],"output":{"name":"bool"}}],[11,"is_ident","","Returns `true` if the token is an identifier.",71,{"inputs":[{"name":"token"}],"output":{"name":"bool"}}],[11,"is_path","","Returns `true` if the token is an interpolated path.",71,{"inputs":[{"name":"token"}],"output":{"name":"bool"}}],[11,"is_plain_ident","","Returns `true` if the token is a path that is not followed by a `::`\ntoken.",71,{"inputs":[{"name":"token"}],"output":{"name":"bool"}}],[11,"is_lifetime","","Returns `true` if the token is a lifetime.",71,{"inputs":[{"name":"token"}],"output":{"name":"bool"}}],[11,"is_mutability","","Returns `true` if the token is either the `mut` or `const` keyword.",71,{"inputs":[{"name":"token"}],"output":{"name":"bool"}}],[11,"to_binop","","Maps a token to its corresponding binary operator.",71,{"inputs":[{"name":"token"}],"output":{"name":"option"}}],[11,"is_keyword","","Returns `true` if the token is a given keyword, `kw`.",71,{"inputs":[{"name":"token"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"is_keyword_allow_following_colon","","",71,{"inputs":[{"name":"token"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"is_any_keyword","","Returns `true` if the token is either a special identifier, or a strict\nor reserved keyword.",71,{"inputs":[{"name":"token"}],"output":{"name":"bool"}}],[11,"is_strict_keyword","","Returns `true` if the token may not appear as an identifier.",71,{"inputs":[{"name":"token"}],"output":{"name":"bool"}}],[11,"is_reserved_keyword","","Returns `true` if the token is a keyword that has been reserved for\npossible future use.",71,{"inputs":[{"name":"token"}],"output":{"name":"bool"}}],[11,"mtwt_eq","","Hygienic identifier equality comparison.",71,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"hash","","",72,null],[11,"eq","","",72,{"inputs":[{"name":"nonterminal"},{"name":"nonterminal"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"nonterminal"},{"name":"nonterminal"}],"output":{"name":"bool"}}],[11,"decode","","",72,{"inputs":[{"name":"nonterminal"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",72,{"inputs":[{"name":"nonterminal"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",72,{"inputs":[{"name":"nonterminal"}],"output":{"name":"nonterminal"}}],[11,"fmt","","",72,{"inputs":[{"name":"nonterminal"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","syntax::parse::token::keywords","",73,{"inputs":[{"name":"keyword"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"keyword"},{"name":"keyword"}],"output":{"name":"bool"}}],[11,"clone","","",73,{"inputs":[{"name":"keyword"}],"output":{"name":"keyword"}}],[11,"to_name","","",73,{"inputs":[{"name":"keyword"}],"output":{"name":"name"}}],[11,"cmp","syntax::parse::token","",74,{"inputs":[{"name":"internedstring"},{"name":"internedstring"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",74,{"inputs":[{"name":"internedstring"},{"name":"internedstring"}],"output":{"name":"option"}}],[11,"lt","","",74,{"inputs":[{"name":"internedstring"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"le","","",74,{"inputs":[{"name":"internedstring"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"gt","","",74,{"inputs":[{"name":"internedstring"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"ge","","",74,{"inputs":[{"name":"internedstring"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"hash","","",74,null],[11,"eq","","",74,{"inputs":[{"name":"internedstring"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"internedstring"},{"name":"internedstring"}],"output":{"name":"bool"}}],[11,"clone","","",74,{"inputs":[{"name":"internedstring"}],"output":{"name":"internedstring"}}],[11,"new","","",74,{"inputs":[{"name":"internedstring"},{"name":"str"}],"output":{"name":"internedstring"}}],[11,"new_from_name","","",74,{"inputs":[{"name":"internedstring"},{"name":"name"}],"output":{"name":"internedstring"}}],[11,"deref","","",74,{"inputs":[{"name":"internedstring"}],"output":{"name":"str"}}],[11,"fmt","","",74,{"inputs":[{"name":"internedstring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"internedstring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",74,{"inputs":[{"name":"internedstring"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"internedstring"},{"name":"str"}],"output":{"name":"bool"}}],[11,"decode","","",74,{"inputs":[{"name":"internedstring"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",74,{"inputs":[{"name":"internedstring"},{"name":"s"}],"output":{"name":"result"}}],[11,"parse_outer_attributes","syntax::parse::parser","Parse attributes that appear before an item",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_attribute","","Matches `attribute = # ! [ meta_item ]`",59,{"inputs":[{"name":"parser"},{"name":"bool"}],"output":{"name":"result"}}],[11,"parse_inner_attributes","","Parse attributes that appear after the opening of an item. These should\nbe preceded by an exclamation mark, but we accept and warn about one\nterminated by a semicolon.\nmatches inner_attrs*",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"parse_meta_item","","matches meta_item = IDENT\n| IDENT = lit\n| IDENT meta_seq",59,{"inputs":[{"name":"parser"}],"output":{"name":"result"}}],[11,"hash","syntax::parse::obsolete","",75,null],[11,"eq","","",75,{"inputs":[{"name":"obsoletesyntax"},{"name":"obsoletesyntax"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"obsoletesyntax"},{"name":"obsoletesyntax"}],"output":{"name":"bool"}}],[11,"clone","","",75,{"inputs":[{"name":"obsoletesyntax"}],"output":{"name":"obsoletesyntax"}}],[11,"obsolete","syntax::parse::parser","Reports an obsolete syntax non-fatal error.",59,null],[11,"report","","",59,null],[11,"new","syntax::parse","",76,{"inputs":[{"name":"parsesess"}],"output":{"name":"parsesess"}}],[11,"with_span_handler","","",76,{"inputs":[{"name":"parsesess"},{"name":"spanhandler"}],"output":{"name":"parsesess"}}],[11,"codemap","","",76,{"inputs":[{"name":"parsesess"}],"output":{"name":"codemap"}}],[11,"clone","syntax::ext::base","",77,{"inputs":[{"name":"annotatable"}],"output":{"name":"annotatable"}}],[11,"fmt","","",77,{"inputs":[{"name":"annotatable"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"attrs","","",77,null],[11,"fold_attrs","","",77,{"inputs":[{"name":"annotatable"},{"name":"vec"}],"output":{"name":"annotatable"}}],[11,"expect_item","","",77,{"inputs":[{"name":"annotatable"}],"output":{"name":"p"}}],[11,"map_item_or","","",77,{"inputs":[{"name":"annotatable"},{"name":"f"},{"name":"g"}],"output":{"name":"annotatable"}}],[11,"expect_trait_item","","",77,{"inputs":[{"name":"annotatable"}],"output":{"name":"p"}}],[11,"expect_impl_item","","",77,{"inputs":[{"name":"annotatable"}],"output":{"name":"p"}}],[11,"default","","",78,{"inputs":[{"name":"maceager"}],"output":{"name":"maceager"}}],[11,"expr","","",78,{"inputs":[{"name":"maceager"},{"name":"p"}],"output":{"name":"box"}}],[11,"pat","","",78,{"inputs":[{"name":"maceager"},{"name":"p"}],"output":{"name":"box"}}],[11,"items","","",78,{"inputs":[{"name":"maceager"},{"name":"smallvector"}],"output":{"name":"box"}}],[11,"impl_items","","",78,{"inputs":[{"name":"maceager"},{"name":"smallvector"}],"output":{"name":"box"}}],[11,"stmts","","",78,{"inputs":[{"name":"maceager"},{"name":"smallvector"}],"output":{"name":"box"}}],[11,"ty","","",78,{"inputs":[{"name":"maceager"},{"name":"p"}],"output":{"name":"box"}}],[11,"make_expr","","",78,{"inputs":[{"name":"maceager"}],"output":{"name":"option"}}],[11,"make_items","","",78,{"inputs":[{"name":"maceager"}],"output":{"name":"option"}}],[11,"make_impl_items","","",78,{"inputs":[{"name":"maceager"}],"output":{"name":"option"}}],[11,"make_stmts","","",78,{"inputs":[{"name":"maceager"}],"output":{"name":"option"}}],[11,"make_pat","","",78,{"inputs":[{"name":"maceager"}],"output":{"name":"option"}}],[11,"make_ty","","",78,{"inputs":[{"name":"maceager"}],"output":{"name":"option"}}],[11,"clone","","",79,{"inputs":[{"name":"dummyresult"}],"output":{"name":"dummyresult"}}],[11,"any","","Create a default MacResult that can be anything.",79,{"inputs":[{"name":"dummyresult"},{"name":"span"}],"output":{"name":"box"}}],[11,"expr","","Create a default MacResult that can only be an expression.",79,{"inputs":[{"name":"dummyresult"},{"name":"span"}],"output":{"name":"box"}}],[11,"raw_expr","","A plain dummy expression.",79,{"inputs":[{"name":"dummyresult"},{"name":"span"}],"output":{"name":"p"}}],[11,"raw_pat","","A plain dummy pattern.",79,{"inputs":[{"name":"dummyresult"},{"name":"span"}],"output":{"name":"pat"}}],[11,"raw_ty","","",79,{"inputs":[{"name":"dummyresult"},{"name":"span"}],"output":{"name":"p"}}],[11,"make_expr","","",79,{"inputs":[{"name":"dummyresult"}],"output":{"name":"option"}}],[11,"make_pat","","",79,{"inputs":[{"name":"dummyresult"}],"output":{"name":"option"}}],[11,"make_items","","",79,{"inputs":[{"name":"dummyresult"}],"output":{"name":"option"}}],[11,"make_impl_items","","",79,{"inputs":[{"name":"dummyresult"}],"output":{"name":"option"}}],[11,"make_stmts","","",79,{"inputs":[{"name":"dummyresult"}],"output":{"name":"option"}}],[11,"new","","",80,{"inputs":[{"name":"blockinfo"}],"output":{"name":"blockinfo"}}],[11,"new","","",81,{"inputs":[{"name":"extctxt"},{"name":"parsesess"},{"name":"vec"},{"name":"expansionconfig"},{"name":"vec"}],"output":{"name":"extctxt"}}],[11,"expand_expr","","",81,{"inputs":[{"name":"extctxt"},{"name":"p"}],"output":{"name":"p"}}],[11,"expander","","Returns a `Folder` for deeply expanding all macros in an AST node.",81,{"inputs":[{"name":"extctxt"}],"output":{"name":"macroexpander"}}],[11,"new_parser_from_tts","","",81,null],[11,"codemap","","",81,{"inputs":[{"name":"extctxt"}],"output":{"name":"codemap"}}],[11,"parse_sess","","",81,{"inputs":[{"name":"extctxt"}],"output":{"name":"parsesess"}}],[11,"cfg","","",81,{"inputs":[{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"call_site","","",81,{"inputs":[{"name":"extctxt"}],"output":{"name":"span"}}],[11,"backtrace","","",81,{"inputs":[{"name":"extctxt"}],"output":{"name":"expnid"}}],[11,"original_span","","Original span that caused the current exapnsion to happen.",81,{"inputs":[{"name":"extctxt"}],"output":{"name":"span"}}],[11,"expansion_cause","","Returns span for the macro which originally caused the current expansion to happen.",81,{"inputs":[{"name":"extctxt"}],"output":{"name":"span"}}],[11,"mod_push","","",81,null],[11,"mod_pop","","",81,null],[11,"mod_path","","",81,{"inputs":[{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"bt_push","","",81,null],[11,"bt_pop","","",81,null],[11,"insert_macro","","",81,null],[11,"span_fatal","","Emit `msg` attached to `sp`, and stop compilation immediately.",81,null],[11,"span_err","","Emit `msg` attached to `sp`, without immediately stopping\ncompilation.",81,null],[11,"span_warn","","",81,null],[11,"span_unimpl","","",81,null],[11,"span_bug","","",81,null],[11,"span_note","","",81,null],[11,"span_help","","",81,null],[11,"fileline_help","","",81,null],[11,"bug","","",81,null],[11,"trace_macros","","",81,{"inputs":[{"name":"extctxt"}],"output":{"name":"bool"}}],[11,"set_trace_macros","","",81,null],[11,"ident_of","","",81,{"inputs":[{"name":"extctxt"},{"name":"str"}],"output":{"name":"ident"}}],[11,"std_path","","",81,null],[11,"name_of","","",81,{"inputs":[{"name":"extctxt"},{"name":"str"}],"output":{"name":"name"}}],[11,"push_frame","","",82,null],[11,"pop_frame","","",82,null],[11,"find","","",82,{"inputs":[{"name":"syntaxenv"},{"name":"name"}],"output":{"name":"option"}}],[11,"insert","","",82,null],[11,"info","","",82,{"inputs":[{"name":"syntaxenv"}],"output":{"name":"blockinfo"}}],[11,"path","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"}],"output":{"name":"path"}}],[11,"path_ident","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"}],"output":{"name":"path"}}],[11,"path_global","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"}],"output":{"name":"path"}}],[11,"path_all","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"bool"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"}],"output":{"name":"path"}}],[11,"qpath","","Constructs a qualified path.",81,null],[11,"qpath_all","","Constructs a qualified path.",81,null],[11,"ty_mt","","",81,{"inputs":[{"name":"extctxt"},{"name":"p"},{"name":"mutability"}],"output":{"name":"mutty"}}],[11,"ty","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ty_"}],"output":{"name":"p"}}],[11,"ty_path","","",81,{"inputs":[{"name":"extctxt"},{"name":"path"}],"output":{"name":"p"}}],[11,"ty_sum","","",81,{"inputs":[{"name":"extctxt"},{"name":"path"},{"name":"ownedslice"}],"output":{"name":"p"}}],[11,"ty_ident","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"}],"output":{"name":"p"}}],[11,"ty_rptr","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"},{"name":"option"},{"name":"mutability"}],"output":{"name":"p"}}],[11,"ty_ptr","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"},{"name":"mutability"}],"output":{"name":"p"}}],[11,"ty_option","","",81,{"inputs":[{"name":"extctxt"},{"name":"p"}],"output":{"name":"p"}}],[11,"ty_infer","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"}],"output":{"name":"p"}}],[11,"typaram","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"ownedslice"},{"name":"option"}],"output":{"name":"typaram"}}],[11,"ty_vars","","",81,{"inputs":[{"name":"extctxt"},{"name":"ownedslice"}],"output":{"name":"vec"}}],[11,"ty_vars_global","","",81,{"inputs":[{"name":"extctxt"},{"name":"ownedslice"}],"output":{"name":"vec"}}],[11,"trait_ref","","",81,{"inputs":[{"name":"extctxt"},{"name":"path"}],"output":{"name":"traitref"}}],[11,"poly_trait_ref","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"path"}],"output":{"name":"polytraitref"}}],[11,"typarambound","","",81,{"inputs":[{"name":"extctxt"},{"name":"path"}],"output":{"name":"typarambound"}}],[11,"lifetime","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"name"}],"output":{"name":"lifetime"}}],[11,"lifetime_def","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"name"},{"name":"vec"}],"output":{"name":"lifetimedef"}}],[11,"stmt_expr","","",81,{"inputs":[{"name":"extctxt"},{"name":"p"}],"output":{"name":"p"}}],[11,"stmt_let","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"bool"},{"name":"ident"},{"name":"p"}],"output":{"name":"p"}}],[11,"stmt_let_typed","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"bool"},{"name":"ident"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[11,"block","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"},{"name":"option"}],"output":{"name":"p"}}],[11,"stmt_item","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"block_expr","","",81,{"inputs":[{"name":"extctxt"},{"name":"p"}],"output":{"name":"p"}}],[11,"block_all","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"},{"name":"option"}],"output":{"name":"p"}}],[11,"expr","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"expr_"}],"output":{"name":"p"}}],[11,"expr_path","","",81,{"inputs":[{"name":"extctxt"},{"name":"path"}],"output":{"name":"p"}}],[11,"expr_qpath","","Constructs a QPath expression.",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"qself"},{"name":"path"}],"output":{"name":"p"}}],[11,"expr_ident","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"}],"output":{"name":"p"}}],[11,"expr_self","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"}],"output":{"name":"p"}}],[11,"expr_binary","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"binop_"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_deref","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_unary","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"unop"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_field_access","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"},{"name":"ident"}],"output":{"name":"p"}}],[11,"expr_tup_field_access","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"},{"name":"usize"}],"output":{"name":"p"}}],[11,"expr_addr_of","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_mut_addr_of","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_call","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_call_ident","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_call_global","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_method_call","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"},{"name":"ident"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_block","","",81,{"inputs":[{"name":"extctxt"},{"name":"p"}],"output":{"name":"p"}}],[11,"field_imm","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"p"}],"output":{"name":"field"}}],[11,"expr_struct","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"path"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_struct_ident","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_lit","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"lit_"}],"output":{"name":"p"}}],[11,"expr_usize","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"usize"}],"output":{"name":"p"}}],[11,"expr_isize","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"isize"}],"output":{"name":"p"}}],[11,"expr_u32","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"u32"}],"output":{"name":"p"}}],[11,"expr_u8","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"u8"}],"output":{"name":"p"}}],[11,"expr_bool","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"bool"}],"output":{"name":"p"}}],[11,"expr_vec","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_vec_ng","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"}],"output":{"name":"p"}}],[11,"expr_vec_slice","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_str","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"internedstring"}],"output":{"name":"p"}}],[11,"expr_cast","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_some","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_none","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"}],"output":{"name":"p"}}],[11,"expr_break","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"}],"output":{"name":"p"}}],[11,"expr_tuple","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_fail","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"internedstring"}],"output":{"name":"p"}}],[11,"expr_unreachable","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"}],"output":{"name":"p"}}],[11,"expr_ok","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_err","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"expr_try","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"pat","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"pat_"}],"output":{"name":"p"}}],[11,"pat_wild","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"}],"output":{"name":"p"}}],[11,"pat_lit","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"pat_ident","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"}],"output":{"name":"p"}}],[11,"pat_ident_binding_mode","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"bindingmode"}],"output":{"name":"p"}}],[11,"pat_enum","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"path"},{"name":"vec"}],"output":{"name":"p"}}],[11,"pat_struct","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"path"},{"name":"vec"}],"output":{"name":"p"}}],[11,"pat_tuple","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[11,"pat_some","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"pat_none","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"}],"output":{"name":"p"}}],[11,"pat_ok","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"pat_err","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"arm","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"},{"name":"p"}],"output":{"name":"arm"}}],[11,"arm_unreachable","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"}],"output":{"name":"arm"}}],[11,"expr_match","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"},{"name":"vec"}],"output":{"name":"p"}}],[11,"expr_if","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"},{"name":"p"},{"name":"option"}],"output":{"name":"p"}}],[11,"expr_loop","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"lambda_fn_decl","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[11,"lambda","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"},{"name":"p"}],"output":{"name":"p"}}],[11,"lambda0","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"lambda1","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"},{"name":"ident"}],"output":{"name":"p"}}],[11,"lambda_expr","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"},{"name":"p"}],"output":{"name":"p"}}],[11,"lambda_expr_0","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"p"}}],[11,"lambda_expr_1","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"},{"name":"ident"}],"output":{"name":"p"}}],[11,"lambda_stmts","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"},{"name":"vec"}],"output":{"name":"p"}}],[11,"lambda_stmts_0","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"}],"output":{"name":"p"}}],[11,"lambda_stmts_1","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"vec"},{"name":"ident"}],"output":{"name":"p"}}],[11,"arg","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"p"}],"output":{"name":"arg"}}],[11,"fn_decl","","",81,{"inputs":[{"name":"extctxt"},{"name":"vec"},{"name":"p"}],"output":{"name":"p"}}],[11,"item","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"item_"}],"output":{"name":"p"}}],[11,"item_fn_poly","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"p"},{"name":"generics"},{"name":"p"}],"output":{"name":"p"}}],[11,"item_fn","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[11,"variant","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"vec"}],"output":{"name":"spanned"}}],[11,"item_enum_poly","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"enumdef"},{"name":"generics"}],"output":{"name":"p"}}],[11,"item_enum","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"enumdef"}],"output":{"name":"p"}}],[11,"item_struct","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"variantdata"}],"output":{"name":"p"}}],[11,"item_struct_poly","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"variantdata"},{"name":"generics"}],"output":{"name":"p"}}],[11,"item_mod","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"span"},{"name":"ident"},{"name":"vec"},{"name":"vec"}],"output":{"name":"p"}}],[11,"item_static","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"p"},{"name":"mutability"},{"name":"p"}],"output":{"name":"p"}}],[11,"item_const","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"p"},{"name":"p"}],"output":{"name":"p"}}],[11,"item_ty_poly","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"p"},{"name":"generics"}],"output":{"name":"p"}}],[11,"item_ty","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"p"}],"output":{"name":"p"}}],[11,"attribute","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"p"}],"output":{"name":"spanned"}}],[11,"meta_word","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"internedstring"}],"output":{"name":"p"}}],[11,"meta_list","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"internedstring"},{"name":"vec"}],"output":{"name":"p"}}],[11,"meta_name_value","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"internedstring"},{"name":"lit_"}],"output":{"name":"p"}}],[11,"item_use","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"visibility"},{"name":"p"}],"output":{"name":"p"}}],[11,"item_use_simple","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"visibility"},{"name":"path"}],"output":{"name":"p"}}],[11,"item_use_simple_","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"visibility"},{"name":"ident"},{"name":"path"}],"output":{"name":"p"}}],[11,"item_use_list","","",81,null],[11,"item_use_glob","","",81,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"visibility"},{"name":"vec"}],"output":{"name":"p"}}],[11,"clone","syntax::ext::deriving::partial_ord","",83,{"inputs":[{"name":"orderingop"}],"output":{"name":"orderingop"}}],[11,"eq","syntax::ext::deriving::generic::ty","",84,{"inputs":[{"name":"ptrty"},{"name":"ptrty"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"ptrty"},{"name":"ptrty"}],"output":{"name":"bool"}}],[11,"clone","","",84,{"inputs":[{"name":"ptrty"}],"output":{"name":"ptrty"}}],[11,"eq","","",85,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"bool"}}],[11,"clone","","",85,{"inputs":[{"name":"path"}],"output":{"name":"path"}}],[11,"new","","",85,{"inputs":[{"name":"path"},{"name":"vec"}],"output":{"name":"path"}}],[11,"new_local","","",85,{"inputs":[{"name":"path"},{"name":"str"}],"output":{"name":"path"}}],[11,"new_","","",85,{"inputs":[{"name":"path"},{"name":"vec"},{"name":"option"},{"name":"vec"},{"name":"bool"}],"output":{"name":"path"}}],[11,"to_ty","","",85,{"inputs":[{"name":"path"},{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"generics"}],"output":{"name":"p"}}],[11,"to_path","","",85,{"inputs":[{"name":"path"},{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"generics"}],"output":{"name":"path"}}],[11,"eq","","",86,{"inputs":[{"name":"ty"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"ty"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"clone","","",86,{"inputs":[{"name":"ty"}],"output":{"name":"ty"}}],[11,"to_ty","","",86,{"inputs":[{"name":"ty"},{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"generics"}],"output":{"name":"p"}}],[11,"to_path","","",86,{"inputs":[{"name":"ty"},{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"generics"}],"output":{"name":"path"}}],[11,"clone","","",87,{"inputs":[{"name":"lifetimebounds"}],"output":{"name":"lifetimebounds"}}],[11,"empty","","",87,{"inputs":[{"name":"lifetimebounds"}],"output":{"name":"lifetimebounds"}}],[11,"to_generics","","",87,{"inputs":[{"name":"lifetimebounds"},{"name":"extctxt"},{"name":"span"},{"name":"ident"},{"name":"generics"}],"output":{"name":"generics"}}],[11,"expand","syntax::ext::deriving::generic","",88,null],[11,"eq","","",89,{"inputs":[{"name":"structtype"},{"name":"structtype"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"structtype"},{"name":"structtype"}],"output":{"name":"bool"}}],[11,"clone","syntax::ext::expand","",90,{"inputs":[{"name":"patidentfinder"}],"output":{"name":"patidentfinder"}}],[11,"visit_pat","","",90,null],[11,"fold_ident","","",91,{"inputs":[{"name":"identrenamer"},{"name":"ident"}],"output":{"name":"ident"}}],[11,"fold_mac","","",91,{"inputs":[{"name":"identrenamer"},{"name":"spanned"}],"output":{"name":"spanned"}}],[11,"fold_pat","","",92,{"inputs":[{"name":"patidentrenamer"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_mac","","",92,{"inputs":[{"name":"patidentrenamer"},{"name":"spanned"}],"output":{"name":"spanned"}}],[11,"new","","",93,{"inputs":[{"name":"macroexpander"},{"name":"extctxt"}],"output":{"name":"macroexpander"}}],[11,"fold_expr","","",93,{"inputs":[{"name":"macroexpander"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_pat","","",93,{"inputs":[{"name":"macroexpander"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_item","","",93,{"inputs":[{"name":"macroexpander"},{"name":"p"}],"output":{"name":"smallvector"}}],[11,"fold_item_underscore","","",93,{"inputs":[{"name":"macroexpander"},{"name":"item_"}],"output":{"name":"item_"}}],[11,"fold_stmt","","",93,{"inputs":[{"name":"macroexpander"},{"name":"p"}],"output":{"name":"smallvector"}}],[11,"fold_block","","",93,{"inputs":[{"name":"macroexpander"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_arm","","",93,{"inputs":[{"name":"macroexpander"},{"name":"arm"}],"output":{"name":"arm"}}],[11,"fold_trait_item","","",93,{"inputs":[{"name":"macroexpander"},{"name":"p"}],"output":{"name":"smallvector"}}],[11,"fold_impl_item","","",93,{"inputs":[{"name":"macroexpander"},{"name":"p"}],"output":{"name":"smallvector"}}],[11,"fold_ty","","",93,{"inputs":[{"name":"macroexpander"},{"name":"p"}],"output":{"name":"p"}}],[11,"new_span","","",93,{"inputs":[{"name":"macroexpander"},{"name":"span"}],"output":{"name":"span"}}],[11,"default","","",94,{"inputs":[{"name":"expansionconfig"},{"name":"string"}],"output":{"name":"expansionconfig"}}],[11,"enable_quotes","","",94,{"inputs":[{"name":"expansionconfig"}],"output":{"name":"bool"}}],[11,"enable_asm","","",94,{"inputs":[{"name":"expansionconfig"}],"output":{"name":"bool"}}],[11,"enable_log_syntax","","",94,{"inputs":[{"name":"expansionconfig"}],"output":{"name":"bool"}}],[11,"enable_concat_idents","","",94,{"inputs":[{"name":"expansionconfig"}],"output":{"name":"bool"}}],[11,"enable_trace_macros","","",94,{"inputs":[{"name":"expansionconfig"}],"output":{"name":"bool"}}],[11,"enable_allow_internal_unstable","","",94,{"inputs":[{"name":"expansionconfig"}],"output":{"name":"bool"}}],[11,"enable_custom_derive","","",94,{"inputs":[{"name":"expansionconfig"}],"output":{"name":"bool"}}],[11,"enable_pushpop_unsafe","","",94,{"inputs":[{"name":"expansionconfig"}],"output":{"name":"bool"}}],[11,"fold_ident","","",95,{"inputs":[{"name":"marker"},{"name":"ident"}],"output":{"name":"ident"}}],[11,"fold_mac","","",95,{"inputs":[{"name":"marker"},{"name":"spanned"}],"output":{"name":"spanned"}}],[11,"visit_mac","","",96,null],[11,"eq","syntax::ext::format","",97,{"inputs":[{"name":"argumenttype"},{"name":"argumenttype"}],"output":{"name":"bool"}}],[11,"ne","","",97,{"inputs":[{"name":"argumenttype"},{"name":"argumenttype"}],"output":{"name":"bool"}}],[11,"clone","syntax::ext::mtwt","",98,{"inputs":[{"name":"syntaxcontext_"}],"output":{"name":"syntaxcontext_"}}],[11,"fmt","","",98,{"inputs":[{"name":"syntaxcontext_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",98,null],[11,"decode","","",98,{"inputs":[{"name":"syntaxcontext_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",98,{"inputs":[{"name":"syntaxcontext_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",98,{"inputs":[{"name":"syntaxcontext_"},{"name":"syntaxcontext_"}],"output":{"name":"bool"}}],[11,"ne","","",98,{"inputs":[{"name":"syntaxcontext_"},{"name":"syntaxcontext_"}],"output":{"name":"bool"}}],[11,"to_tokens","syntax::ast","",99,{"inputs":[{"name":"tokentree"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","collections::vec","",100,{"inputs":[{"name":"vec"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::codemap","",101,{"inputs":[{"name":"spanned"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","core::option","",102,{"inputs":[{"name":"option"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::ast","",103,{"inputs":[{"name":"ident"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",104,{"inputs":[{"name":"path"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",105,{"inputs":[{"name":"ty"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",106,{"inputs":[{"name":"block"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",107,{"inputs":[{"name":"generics"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",108,{"inputs":[{"name":"whereclause"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::ptr","",109,{"inputs":[{"name":"p"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",109,{"inputs":[{"name":"p"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",109,{"inputs":[{"name":"p"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",109,{"inputs":[{"name":"p"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",109,{"inputs":[{"name":"p"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",109,{"inputs":[{"name":"p"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::ast","",110,{"inputs":[{"name":"arm"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::ptr","",109,{"inputs":[{"name":"p"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::codemap","",101,{"inputs":[{"name":"spanned"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",101,{"inputs":[{"name":"spanned"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"parse_item","syntax::ext::base","",81,{"inputs":[{"name":"extctxt"},{"name":"string"}],"output":{"name":"p"}}],[11,"parse_stmt","","",81,{"inputs":[{"name":"extctxt"},{"name":"string"}],"output":{"name":"p"}}],[11,"parse_expr","","",81,{"inputs":[{"name":"extctxt"},{"name":"string"}],"output":{"name":"p"}}],[11,"parse_tts","","",81,{"inputs":[{"name":"extctxt"},{"name":"string"}],"output":{"name":"vec"}}],[11,"clone","syntax::ext::tt::transcribe","",111,{"inputs":[{"name":"ttframe"}],"output":{"name":"ttframe"}}],[11,"clone","","",65,{"inputs":[{"name":"ttreader"}],"output":{"name":"ttreader"}}],[11,"clone","","",112,{"inputs":[{"name":"lockstepitersize"}],"output":{"name":"lockstepitersize"}}],[11,"add","","",112,{"inputs":[{"name":"lockstepitersize"},{"name":"lockstepitersize"}],"output":{"name":"lockstepitersize"}}],[11,"clone","syntax::ext::tt::macro_parser","",113,{"inputs":[{"name":"tokentreeortokentreevec"}],"output":{"name":"tokentreeortokentreevec"}}],[11,"clone","","",114,{"inputs":[{"name":"matcherttframe"}],"output":{"name":"matcherttframe"}}],[11,"clone","","",115,{"inputs":[{"name":"matcherpos"}],"output":{"name":"matcherpos"}}],[11,"make_expr","syntax::ext::tt::macro_rules","",116,{"inputs":[{"name":"parseranymacro"}],"output":{"name":"option"}}],[11,"make_pat","","",116,{"inputs":[{"name":"parseranymacro"}],"output":{"name":"option"}}],[11,"make_items","","",116,{"inputs":[{"name":"parseranymacro"}],"output":{"name":"option"}}],[11,"make_impl_items","","",116,{"inputs":[{"name":"parseranymacro"}],"output":{"name":"option"}}],[11,"make_stmts","","",116,{"inputs":[{"name":"parseranymacro"}],"output":{"name":"option"}}],[11,"make_ty","","",116,{"inputs":[{"name":"parseranymacro"}],"output":{"name":"option"}}],[11,"expand","","",117,null],[11,"hash","syntax::ast","",44,null],[11,"cmp","","",44,{"inputs":[{"name":"name"},{"name":"name"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",44,{"inputs":[{"name":"name"},{"name":"name"}],"output":{"name":"option"}}],[11,"lt","","",44,{"inputs":[{"name":"name"},{"name":"name"}],"output":{"name":"bool"}}],[11,"le","","",44,{"inputs":[{"name":"name"},{"name":"name"}],"output":{"name":"bool"}}],[11,"gt","","",44,{"inputs":[{"name":"name"},{"name":"name"}],"output":{"name":"bool"}}],[11,"ge","","",44,{"inputs":[{"name":"name"},{"name":"name"}],"output":{"name":"bool"}}],[11,"eq","","",44,{"inputs":[{"name":"name"},{"name":"name"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"name"},{"name":"name"}],"output":{"name":"bool"}}],[11,"clone","","",44,{"inputs":[{"name":"name"}],"output":{"name":"name"}}],[11,"decode","","",118,{"inputs":[{"name":"syntaxcontext"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",118,{"inputs":[{"name":"syntaxcontext"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",118,{"inputs":[{"name":"syntaxcontext"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",118,null],[11,"eq","","",118,{"inputs":[{"name":"syntaxcontext"},{"name":"syntaxcontext"}],"output":{"name":"bool"}}],[11,"ne","","",118,{"inputs":[{"name":"syntaxcontext"},{"name":"syntaxcontext"}],"output":{"name":"bool"}}],[11,"clone","","",118,{"inputs":[{"name":"syntaxcontext"}],"output":{"name":"syntaxcontext"}}],[11,"clone","","",103,{"inputs":[{"name":"ident"}],"output":{"name":"ident"}}],[11,"fmt","","",44,{"inputs":[{"name":"name"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"name"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",44,{"inputs":[{"name":"name"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",44,{"inputs":[{"name":"name"},{"name":"d"}],"output":{"name":"result"}}],[11,"new","","",103,{"inputs":[{"name":"ident"},{"name":"name"},{"name":"syntaxcontext"}],"output":{"name":"ident"}}],[11,"with_empty_ctxt","","",103,{"inputs":[{"name":"ident"},{"name":"name"}],"output":{"name":"ident"}}],[11,"eq","","",103,{"inputs":[{"name":"ident"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"hash","","",103,null],[11,"fmt","","",103,{"inputs":[{"name":"ident"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",103,{"inputs":[{"name":"ident"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",103,{"inputs":[{"name":"ident"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",103,{"inputs":[{"name":"ident"},{"name":"d"}],"output":{"name":"result"}}],[11,"hash","","",119,null],[11,"decode","","",119,{"inputs":[{"name":"lifetime"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",119,{"inputs":[{"name":"lifetime"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",119,{"inputs":[{"name":"lifetime"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"ne","","",119,{"inputs":[{"name":"lifetime"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"clone","","",119,{"inputs":[{"name":"lifetime"}],"output":{"name":"lifetime"}}],[11,"fmt","","",119,{"inputs":[{"name":"lifetime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",120,{"inputs":[{"name":"lifetimedef"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",120,null],[11,"decode","","",120,{"inputs":[{"name":"lifetimedef"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",120,{"inputs":[{"name":"lifetimedef"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",120,{"inputs":[{"name":"lifetimedef"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"ne","","",120,{"inputs":[{"name":"lifetimedef"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"clone","","",120,{"inputs":[{"name":"lifetimedef"}],"output":{"name":"lifetimedef"}}],[11,"hash","","",104,null],[11,"decode","","",104,{"inputs":[{"name":"path"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",104,{"inputs":[{"name":"path"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",104,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"bool"}}],[11,"ne","","",104,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"bool"}}],[11,"clone","","",104,{"inputs":[{"name":"path"}],"output":{"name":"path"}}],[11,"fmt","","",104,{"inputs":[{"name":"path"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",104,{"inputs":[{"name":"path"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",121,{"inputs":[{"name":"pathsegment"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",121,null],[11,"decode","","",121,{"inputs":[{"name":"pathsegment"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",121,{"inputs":[{"name":"pathsegment"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",121,{"inputs":[{"name":"pathsegment"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"ne","","",121,{"inputs":[{"name":"pathsegment"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"clone","","",121,{"inputs":[{"name":"pathsegment"}],"output":{"name":"pathsegment"}}],[11,"fmt","","",122,{"inputs":[{"name":"pathparameters"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",122,null],[11,"decode","","",122,{"inputs":[{"name":"pathparameters"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",122,{"inputs":[{"name":"pathparameters"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",122,{"inputs":[{"name":"pathparameters"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"ne","","",122,{"inputs":[{"name":"pathparameters"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"clone","","",122,{"inputs":[{"name":"pathparameters"}],"output":{"name":"pathparameters"}}],[11,"none","","",122,{"inputs":[{"name":"pathparameters"}],"output":{"name":"pathparameters"}}],[11,"is_empty","","",122,{"inputs":[{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"has_lifetimes","","",122,{"inputs":[{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"has_types","","",122,{"inputs":[{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"types","","Returns the types that the user wrote. Note that these do not necessarily map to the type\nparameters in the parenthesized case.",122,{"inputs":[{"name":"pathparameters"}],"output":{"name":"vec"}}],[11,"lifetimes","","",122,{"inputs":[{"name":"pathparameters"}],"output":{"name":"vec"}}],[11,"bindings","","",122,{"inputs":[{"name":"pathparameters"}],"output":{"name":"vec"}}],[11,"fmt","","",123,{"inputs":[{"name":"anglebracketedparameterdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",123,null],[11,"decode","","",123,{"inputs":[{"name":"anglebracketedparameterdata"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",123,{"inputs":[{"name":"anglebracketedparameterdata"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",123,{"inputs":[{"name":"anglebracketedparameterdata"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",123,{"inputs":[{"name":"anglebracketedparameterdata"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"clone","","",123,{"inputs":[{"name":"anglebracketedparameterdata"}],"output":{"name":"anglebracketedparameterdata"}}],[11,"fmt","","",124,{"inputs":[{"name":"parenthesizedparameterdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",124,null],[11,"decode","","",124,{"inputs":[{"name":"parenthesizedparameterdata"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",124,{"inputs":[{"name":"parenthesizedparameterdata"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",124,{"inputs":[{"name":"parenthesizedparameterdata"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",124,{"inputs":[{"name":"parenthesizedparameterdata"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"clone","","",124,{"inputs":[{"name":"parenthesizedparameterdata"}],"output":{"name":"parenthesizedparameterdata"}}],[11,"fmt","","",125,{"inputs":[{"name":"typarambound"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",125,null],[11,"decode","","",125,{"inputs":[{"name":"typarambound"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",125,{"inputs":[{"name":"typarambound"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",125,{"inputs":[{"name":"typarambound"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"ne","","",125,{"inputs":[{"name":"typarambound"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"clone","","",125,{"inputs":[{"name":"typarambound"}],"output":{"name":"typarambound"}}],[11,"fmt","","",126,{"inputs":[{"name":"traitboundmodifier"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",126,null],[11,"decode","","",126,{"inputs":[{"name":"traitboundmodifier"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",126,{"inputs":[{"name":"traitboundmodifier"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",126,{"inputs":[{"name":"traitboundmodifier"},{"name":"traitboundmodifier"}],"output":{"name":"bool"}}],[11,"ne","","",126,{"inputs":[{"name":"traitboundmodifier"},{"name":"traitboundmodifier"}],"output":{"name":"bool"}}],[11,"clone","","",126,{"inputs":[{"name":"traitboundmodifier"}],"output":{"name":"traitboundmodifier"}}],[11,"fmt","","",127,{"inputs":[{"name":"typaram"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",127,null],[11,"decode","","",127,{"inputs":[{"name":"typaram"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",127,{"inputs":[{"name":"typaram"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",127,{"inputs":[{"name":"typaram"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"ne","","",127,{"inputs":[{"name":"typaram"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"clone","","",127,{"inputs":[{"name":"typaram"}],"output":{"name":"typaram"}}],[11,"fmt","","",107,{"inputs":[{"name":"generics"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",107,null],[11,"decode","","",107,{"inputs":[{"name":"generics"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",107,{"inputs":[{"name":"generics"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",107,{"inputs":[{"name":"generics"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"ne","","",107,{"inputs":[{"name":"generics"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"clone","","",107,{"inputs":[{"name":"generics"}],"output":{"name":"generics"}}],[11,"is_lt_parameterized","","",107,{"inputs":[{"name":"generics"}],"output":{"name":"bool"}}],[11,"is_type_parameterized","","",107,{"inputs":[{"name":"generics"}],"output":{"name":"bool"}}],[11,"is_parameterized","","",107,{"inputs":[{"name":"generics"}],"output":{"name":"bool"}}],[11,"fmt","","",108,{"inputs":[{"name":"whereclause"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",108,null],[11,"decode","","",108,{"inputs":[{"name":"whereclause"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",108,{"inputs":[{"name":"whereclause"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",108,{"inputs":[{"name":"whereclause"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"ne","","",108,{"inputs":[{"name":"whereclause"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"clone","","",108,{"inputs":[{"name":"whereclause"}],"output":{"name":"whereclause"}}],[11,"fmt","","",128,{"inputs":[{"name":"wherepredicate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",128,null],[11,"decode","","",128,{"inputs":[{"name":"wherepredicate"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",128,{"inputs":[{"name":"wherepredicate"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",128,{"inputs":[{"name":"wherepredicate"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"ne","","",128,{"inputs":[{"name":"wherepredicate"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"clone","","",128,{"inputs":[{"name":"wherepredicate"}],"output":{"name":"wherepredicate"}}],[11,"fmt","","",129,{"inputs":[{"name":"whereboundpredicate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",129,null],[11,"decode","","",129,{"inputs":[{"name":"whereboundpredicate"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",129,{"inputs":[{"name":"whereboundpredicate"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",129,{"inputs":[{"name":"whereboundpredicate"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",129,{"inputs":[{"name":"whereboundpredicate"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"clone","","",129,{"inputs":[{"name":"whereboundpredicate"}],"output":{"name":"whereboundpredicate"}}],[11,"fmt","","",130,{"inputs":[{"name":"whereregionpredicate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",130,null],[11,"decode","","",130,{"inputs":[{"name":"whereregionpredicate"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",130,{"inputs":[{"name":"whereregionpredicate"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",130,{"inputs":[{"name":"whereregionpredicate"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",130,{"inputs":[{"name":"whereregionpredicate"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"clone","","",130,{"inputs":[{"name":"whereregionpredicate"}],"output":{"name":"whereregionpredicate"}}],[11,"fmt","","",131,{"inputs":[{"name":"whereeqpredicate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",131,null],[11,"decode","","",131,{"inputs":[{"name":"whereeqpredicate"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",131,{"inputs":[{"name":"whereeqpredicate"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",131,{"inputs":[{"name":"whereeqpredicate"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",131,{"inputs":[{"name":"whereeqpredicate"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"clone","","",131,{"inputs":[{"name":"whereeqpredicate"}],"output":{"name":"whereeqpredicate"}}],[11,"fmt","","",132,{"inputs":[{"name":"crate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",132,null],[11,"decode","","",132,{"inputs":[{"name":"crate"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",132,{"inputs":[{"name":"crate"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",132,{"inputs":[{"name":"crate"},{"name":"crate"}],"output":{"name":"bool"}}],[11,"ne","","",132,{"inputs":[{"name":"crate"},{"name":"crate"}],"output":{"name":"bool"}}],[11,"clone","","",132,{"inputs":[{"name":"crate"}],"output":{"name":"crate"}}],[11,"fmt","","",133,{"inputs":[{"name":"metaitem_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",133,null],[11,"decode","","",133,{"inputs":[{"name":"metaitem_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",133,{"inputs":[{"name":"metaitem_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",133,{"inputs":[{"name":"metaitem_"}],"output":{"name":"metaitem_"}}],[11,"eq","","",133,{"inputs":[{"name":"metaitem_"},{"name":"metaitem_"}],"output":{"name":"bool"}}],[11,"fmt","","",106,{"inputs":[{"name":"block"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",106,null],[11,"decode","","",106,{"inputs":[{"name":"block"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",106,{"inputs":[{"name":"block"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",106,{"inputs":[{"name":"block"},{"name":"block"}],"output":{"name":"bool"}}],[11,"ne","","",106,{"inputs":[{"name":"block"},{"name":"block"}],"output":{"name":"bool"}}],[11,"clone","","",106,{"inputs":[{"name":"block"}],"output":{"name":"block"}}],[11,"hash","","",134,null],[11,"decode","","",134,{"inputs":[{"name":"pat"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",134,{"inputs":[{"name":"pat"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",134,{"inputs":[{"name":"pat"},{"name":"pat"}],"output":{"name":"bool"}}],[11,"ne","","",134,{"inputs":[{"name":"pat"},{"name":"pat"}],"output":{"name":"bool"}}],[11,"clone","","",134,{"inputs":[{"name":"pat"}],"output":{"name":"pat"}}],[11,"fmt","","",134,{"inputs":[{"name":"pat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",135,{"inputs":[{"name":"fieldpat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",135,null],[11,"decode","","",135,{"inputs":[{"name":"fieldpat"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",135,{"inputs":[{"name":"fieldpat"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",135,{"inputs":[{"name":"fieldpat"},{"name":"fieldpat"}],"output":{"name":"bool"}}],[11,"ne","","",135,{"inputs":[{"name":"fieldpat"},{"name":"fieldpat"}],"output":{"name":"bool"}}],[11,"clone","","",135,{"inputs":[{"name":"fieldpat"}],"output":{"name":"fieldpat"}}],[11,"fmt","","",136,{"inputs":[{"name":"bindingmode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",136,null],[11,"decode","","",136,{"inputs":[{"name":"bindingmode"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",136,{"inputs":[{"name":"bindingmode"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",136,{"inputs":[{"name":"bindingmode"},{"name":"bindingmode"}],"output":{"name":"bool"}}],[11,"ne","","",136,{"inputs":[{"name":"bindingmode"},{"name":"bindingmode"}],"output":{"name":"bool"}}],[11,"clone","","",136,{"inputs":[{"name":"bindingmode"}],"output":{"name":"bindingmode"}}],[11,"fmt","","",137,{"inputs":[{"name":"pat_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",137,null],[11,"decode","","",137,{"inputs":[{"name":"pat_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",137,{"inputs":[{"name":"pat_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",137,{"inputs":[{"name":"pat_"},{"name":"pat_"}],"output":{"name":"bool"}}],[11,"ne","","",137,{"inputs":[{"name":"pat_"},{"name":"pat_"}],"output":{"name":"bool"}}],[11,"clone","","",137,{"inputs":[{"name":"pat_"}],"output":{"name":"pat_"}}],[11,"fmt","","",138,{"inputs":[{"name":"mutability"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",138,null],[11,"decode","","",138,{"inputs":[{"name":"mutability"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",138,{"inputs":[{"name":"mutability"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",138,{"inputs":[{"name":"mutability"},{"name":"mutability"}],"output":{"name":"bool"}}],[11,"ne","","",138,{"inputs":[{"name":"mutability"},{"name":"mutability"}],"output":{"name":"bool"}}],[11,"clone","","",138,{"inputs":[{"name":"mutability"}],"output":{"name":"mutability"}}],[11,"fmt","","",139,{"inputs":[{"name":"binop_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",139,null],[11,"decode","","",139,{"inputs":[{"name":"binop_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",139,{"inputs":[{"name":"binop_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",139,{"inputs":[{"name":"binop_"},{"name":"binop_"}],"output":{"name":"bool"}}],[11,"ne","","",139,{"inputs":[{"name":"binop_"},{"name":"binop_"}],"output":{"name":"bool"}}],[11,"clone","","",139,{"inputs":[{"name":"binop_"}],"output":{"name":"binop_"}}],[11,"fmt","","",140,{"inputs":[{"name":"unop"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",140,null],[11,"decode","","",140,{"inputs":[{"name":"unop"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",140,{"inputs":[{"name":"unop"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",140,{"inputs":[{"name":"unop"},{"name":"unop"}],"output":{"name":"bool"}}],[11,"ne","","",140,{"inputs":[{"name":"unop"},{"name":"unop"}],"output":{"name":"bool"}}],[11,"clone","","",140,{"inputs":[{"name":"unop"}],"output":{"name":"unop"}}],[11,"fmt","syntax::codemap","",101,{"inputs":[{"name":"spanned"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","syntax::ast","",141,null],[11,"decode","","",141,{"inputs":[{"name":"stmt_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",141,{"inputs":[{"name":"stmt_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",141,{"inputs":[{"name":"stmt_"},{"name":"stmt_"}],"output":{"name":"bool"}}],[11,"ne","","",141,{"inputs":[{"name":"stmt_"},{"name":"stmt_"}],"output":{"name":"bool"}}],[11,"clone","","",141,{"inputs":[{"name":"stmt_"}],"output":{"name":"stmt_"}}],[11,"fmt","","",142,{"inputs":[{"name":"macstmtstyle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",142,null],[11,"decode","","",142,{"inputs":[{"name":"macstmtstyle"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",142,{"inputs":[{"name":"macstmtstyle"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",142,{"inputs":[{"name":"macstmtstyle"},{"name":"macstmtstyle"}],"output":{"name":"bool"}}],[11,"ne","","",142,{"inputs":[{"name":"macstmtstyle"},{"name":"macstmtstyle"}],"output":{"name":"bool"}}],[11,"clone","","",142,{"inputs":[{"name":"macstmtstyle"}],"output":{"name":"macstmtstyle"}}],[11,"fmt","","",143,{"inputs":[{"name":"local"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",143,null],[11,"decode","","",143,{"inputs":[{"name":"local"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",143,{"inputs":[{"name":"local"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",143,{"inputs":[{"name":"local"},{"name":"local"}],"output":{"name":"bool"}}],[11,"ne","","",143,{"inputs":[{"name":"local"},{"name":"local"}],"output":{"name":"bool"}}],[11,"clone","","",143,{"inputs":[{"name":"local"}],"output":{"name":"local"}}],[11,"fmt","","",144,{"inputs":[{"name":"decl_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",144,null],[11,"decode","","",144,{"inputs":[{"name":"decl_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",144,{"inputs":[{"name":"decl_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",144,{"inputs":[{"name":"decl_"},{"name":"decl_"}],"output":{"name":"bool"}}],[11,"ne","","",144,{"inputs":[{"name":"decl_"},{"name":"decl_"}],"output":{"name":"bool"}}],[11,"clone","","",144,{"inputs":[{"name":"decl_"}],"output":{"name":"decl_"}}],[11,"fmt","","",110,{"inputs":[{"name":"arm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",110,null],[11,"decode","","",110,{"inputs":[{"name":"arm"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",110,{"inputs":[{"name":"arm"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",110,{"inputs":[{"name":"arm"},{"name":"arm"}],"output":{"name":"bool"}}],[11,"ne","","",110,{"inputs":[{"name":"arm"},{"name":"arm"}],"output":{"name":"bool"}}],[11,"clone","","",110,{"inputs":[{"name":"arm"}],"output":{"name":"arm"}}],[11,"fmt","","",145,{"inputs":[{"name":"field"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",145,null],[11,"decode","","",145,{"inputs":[{"name":"field"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",145,{"inputs":[{"name":"field"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",145,{"inputs":[{"name":"field"},{"name":"field"}],"output":{"name":"bool"}}],[11,"ne","","",145,{"inputs":[{"name":"field"},{"name":"field"}],"output":{"name":"bool"}}],[11,"clone","","",145,{"inputs":[{"name":"field"}],"output":{"name":"field"}}],[11,"fmt","","",146,{"inputs":[{"name":"blockcheckmode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",146,null],[11,"decode","","",146,{"inputs":[{"name":"blockcheckmode"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",146,{"inputs":[{"name":"blockcheckmode"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",146,{"inputs":[{"name":"blockcheckmode"},{"name":"blockcheckmode"}],"output":{"name":"bool"}}],[11,"ne","","",146,{"inputs":[{"name":"blockcheckmode"},{"name":"blockcheckmode"}],"output":{"name":"bool"}}],[11,"clone","","",146,{"inputs":[{"name":"blockcheckmode"}],"output":{"name":"blockcheckmode"}}],[11,"fmt","","",147,{"inputs":[{"name":"unsafesource"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",147,null],[11,"decode","","",147,{"inputs":[{"name":"unsafesource"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",147,{"inputs":[{"name":"unsafesource"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",147,{"inputs":[{"name":"unsafesource"},{"name":"unsafesource"}],"output":{"name":"bool"}}],[11,"ne","","",147,{"inputs":[{"name":"unsafesource"},{"name":"unsafesource"}],"output":{"name":"bool"}}],[11,"clone","","",147,{"inputs":[{"name":"unsafesource"}],"output":{"name":"unsafesource"}}],[11,"hash","","",148,null],[11,"decode","","",148,{"inputs":[{"name":"expr"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",148,{"inputs":[{"name":"expr"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",148,{"inputs":[{"name":"expr"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"ne","","",148,{"inputs":[{"name":"expr"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"clone","","",148,{"inputs":[{"name":"expr"}],"output":{"name":"expr"}}],[11,"fmt","","",148,{"inputs":[{"name":"expr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",149,{"inputs":[{"name":"expr_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",149,null],[11,"decode","","",149,{"inputs":[{"name":"expr_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",149,{"inputs":[{"name":"expr_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",149,{"inputs":[{"name":"expr_"},{"name":"expr_"}],"output":{"name":"bool"}}],[11,"ne","","",149,{"inputs":[{"name":"expr_"},{"name":"expr_"}],"output":{"name":"bool"}}],[11,"clone","","",149,{"inputs":[{"name":"expr_"}],"output":{"name":"expr_"}}],[11,"fmt","","",150,{"inputs":[{"name":"qself"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",150,null],[11,"decode","","",150,{"inputs":[{"name":"qself"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",150,{"inputs":[{"name":"qself"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",150,{"inputs":[{"name":"qself"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"ne","","",150,{"inputs":[{"name":"qself"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"clone","","",150,{"inputs":[{"name":"qself"}],"output":{"name":"qself"}}],[11,"fmt","","",151,{"inputs":[{"name":"captureclause"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",151,null],[11,"decode","","",151,{"inputs":[{"name":"captureclause"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",151,{"inputs":[{"name":"captureclause"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",151,{"inputs":[{"name":"captureclause"},{"name":"captureclause"}],"output":{"name":"bool"}}],[11,"ne","","",151,{"inputs":[{"name":"captureclause"},{"name":"captureclause"}],"output":{"name":"bool"}}],[11,"clone","","",151,{"inputs":[{"name":"captureclause"}],"output":{"name":"captureclause"}}],[11,"fmt","","",152,{"inputs":[{"name":"delimited"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",152,null],[11,"decode","","",152,{"inputs":[{"name":"delimited"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",152,{"inputs":[{"name":"delimited"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",152,{"inputs":[{"name":"delimited"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"ne","","",152,{"inputs":[{"name":"delimited"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"clone","","",152,{"inputs":[{"name":"delimited"}],"output":{"name":"delimited"}}],[11,"open_token","","Returns the opening delimiter as a token.",152,{"inputs":[{"name":"delimited"}],"output":{"name":"token"}}],[11,"close_token","","Returns the closing delimiter as a token.",152,{"inputs":[{"name":"delimited"}],"output":{"name":"token"}}],[11,"open_tt","","Returns the opening delimiter as a token tree.",152,{"inputs":[{"name":"delimited"}],"output":{"name":"tokentree"}}],[11,"close_tt","","Returns the closing delimiter as a token tree.",152,{"inputs":[{"name":"delimited"}],"output":{"name":"tokentree"}}],[11,"fmt","","",153,{"inputs":[{"name":"sequencerepetition"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",153,null],[11,"decode","","",153,{"inputs":[{"name":"sequencerepetition"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",153,{"inputs":[{"name":"sequencerepetition"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",153,{"inputs":[{"name":"sequencerepetition"},{"name":"sequencerepetition"}],"output":{"name":"bool"}}],[11,"ne","","",153,{"inputs":[{"name":"sequencerepetition"},{"name":"sequencerepetition"}],"output":{"name":"bool"}}],[11,"clone","","",153,{"inputs":[{"name":"sequencerepetition"}],"output":{"name":"sequencerepetition"}}],[11,"fmt","","",154,{"inputs":[{"name":"kleeneop"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",154,null],[11,"decode","","",154,{"inputs":[{"name":"kleeneop"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",154,{"inputs":[{"name":"kleeneop"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",154,{"inputs":[{"name":"kleeneop"},{"name":"kleeneop"}],"output":{"name":"bool"}}],[11,"ne","","",154,{"inputs":[{"name":"kleeneop"},{"name":"kleeneop"}],"output":{"name":"bool"}}],[11,"clone","","",154,{"inputs":[{"name":"kleeneop"}],"output":{"name":"kleeneop"}}],[11,"fmt","","",99,{"inputs":[{"name":"tokentree"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",99,null],[11,"decode","","",99,{"inputs":[{"name":"tokentree"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",99,{"inputs":[{"name":"tokentree"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",99,{"inputs":[{"name":"tokentree"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"ne","","",99,{"inputs":[{"name":"tokentree"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"clone","","",99,{"inputs":[{"name":"tokentree"}],"output":{"name":"tokentree"}}],[11,"len","","",99,{"inputs":[{"name":"tokentree"}],"output":{"name":"usize"}}],[11,"get_tt","","",99,{"inputs":[{"name":"tokentree"},{"name":"usize"}],"output":{"name":"tokentree"}}],[11,"get_span","","Returns the `Span` corresponding to this token tree.",99,{"inputs":[{"name":"tokentree"}],"output":{"name":"span"}}],[11,"parse","","Use this token tree as a matcher to parse given tts.",99,null],[11,"fmt","","",155,{"inputs":[{"name":"mac_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",155,null],[11,"decode","","",155,{"inputs":[{"name":"mac_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",155,{"inputs":[{"name":"mac_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",155,{"inputs":[{"name":"mac_"},{"name":"mac_"}],"output":{"name":"bool"}}],[11,"ne","","",155,{"inputs":[{"name":"mac_"},{"name":"mac_"}],"output":{"name":"bool"}}],[11,"clone","","",155,{"inputs":[{"name":"mac_"}],"output":{"name":"mac_"}}],[11,"fmt","","",156,{"inputs":[{"name":"strstyle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",156,null],[11,"decode","","",156,{"inputs":[{"name":"strstyle"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",156,{"inputs":[{"name":"strstyle"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",156,{"inputs":[{"name":"strstyle"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"ne","","",156,{"inputs":[{"name":"strstyle"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"clone","","",156,{"inputs":[{"name":"strstyle"}],"output":{"name":"strstyle"}}],[11,"fmt","","",157,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",157,null],[11,"decode","","",157,{"inputs":[{"name":"sign"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",157,{"inputs":[{"name":"sign"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",157,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ne","","",157,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"clone","","",157,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"new","","",157,{"inputs":[{"name":"sign"},{"name":"t"}],"output":{"name":"sign"}}],[11,"fmt","","",158,{"inputs":[{"name":"litinttype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",158,null],[11,"decode","","",158,{"inputs":[{"name":"litinttype"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",158,{"inputs":[{"name":"litinttype"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",158,{"inputs":[{"name":"litinttype"},{"name":"litinttype"}],"output":{"name":"bool"}}],[11,"ne","","",158,{"inputs":[{"name":"litinttype"},{"name":"litinttype"}],"output":{"name":"bool"}}],[11,"clone","","",158,{"inputs":[{"name":"litinttype"}],"output":{"name":"litinttype"}}],[11,"fmt","","",159,{"inputs":[{"name":"lit_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",159,null],[11,"decode","","",159,{"inputs":[{"name":"lit_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",159,{"inputs":[{"name":"lit_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",159,{"inputs":[{"name":"lit_"},{"name":"lit_"}],"output":{"name":"bool"}}],[11,"ne","","",159,{"inputs":[{"name":"lit_"},{"name":"lit_"}],"output":{"name":"bool"}}],[11,"clone","","",159,{"inputs":[{"name":"lit_"}],"output":{"name":"lit_"}}],[11,"fmt","","",160,{"inputs":[{"name":"mutty"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",160,null],[11,"decode","","",160,{"inputs":[{"name":"mutty"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",160,{"inputs":[{"name":"mutty"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",160,{"inputs":[{"name":"mutty"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"ne","","",160,{"inputs":[{"name":"mutty"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"clone","","",160,{"inputs":[{"name":"mutty"}],"output":{"name":"mutty"}}],[11,"fmt","","",161,{"inputs":[{"name":"methodsig"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",161,null],[11,"decode","","",161,{"inputs":[{"name":"methodsig"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",161,{"inputs":[{"name":"methodsig"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",161,{"inputs":[{"name":"methodsig"},{"name":"methodsig"}],"output":{"name":"bool"}}],[11,"ne","","",161,{"inputs":[{"name":"methodsig"},{"name":"methodsig"}],"output":{"name":"bool"}}],[11,"clone","","",161,{"inputs":[{"name":"methodsig"}],"output":{"name":"methodsig"}}],[11,"fmt","","",162,{"inputs":[{"name":"traititem"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",162,null],[11,"decode","","",162,{"inputs":[{"name":"traititem"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",162,{"inputs":[{"name":"traititem"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",162,{"inputs":[{"name":"traititem"},{"name":"traititem"}],"output":{"name":"bool"}}],[11,"ne","","",162,{"inputs":[{"name":"traititem"},{"name":"traititem"}],"output":{"name":"bool"}}],[11,"clone","","",162,{"inputs":[{"name":"traititem"}],"output":{"name":"traititem"}}],[11,"fmt","","",163,{"inputs":[{"name":"traititem_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",163,null],[11,"decode","","",163,{"inputs":[{"name":"traititem_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",163,{"inputs":[{"name":"traititem_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",163,{"inputs":[{"name":"traititem_"},{"name":"traititem_"}],"output":{"name":"bool"}}],[11,"ne","","",163,{"inputs":[{"name":"traititem_"},{"name":"traititem_"}],"output":{"name":"bool"}}],[11,"clone","","",163,{"inputs":[{"name":"traititem_"}],"output":{"name":"traititem_"}}],[11,"fmt","","",164,{"inputs":[{"name":"implitem"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",164,null],[11,"decode","","",164,{"inputs":[{"name":"implitem"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",164,{"inputs":[{"name":"implitem"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",164,{"inputs":[{"name":"implitem"},{"name":"implitem"}],"output":{"name":"bool"}}],[11,"ne","","",164,{"inputs":[{"name":"implitem"},{"name":"implitem"}],"output":{"name":"bool"}}],[11,"clone","","",164,{"inputs":[{"name":"implitem"}],"output":{"name":"implitem"}}],[11,"fmt","","",165,{"inputs":[{"name":"implitem_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",165,null],[11,"decode","","",165,{"inputs":[{"name":"implitem_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",165,{"inputs":[{"name":"implitem_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",165,{"inputs":[{"name":"implitem_"},{"name":"implitem_"}],"output":{"name":"bool"}}],[11,"ne","","",165,{"inputs":[{"name":"implitem_"},{"name":"implitem_"}],"output":{"name":"bool"}}],[11,"clone","","",165,{"inputs":[{"name":"implitem_"}],"output":{"name":"implitem_"}}],[11,"hash","","",166,null],[11,"decode","","",166,{"inputs":[{"name":"intty"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",166,{"inputs":[{"name":"intty"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",166,{"inputs":[{"name":"intty"},{"name":"intty"}],"output":{"name":"bool"}}],[11,"ne","","",166,{"inputs":[{"name":"intty"},{"name":"intty"}],"output":{"name":"bool"}}],[11,"clone","","",166,{"inputs":[{"name":"intty"}],"output":{"name":"intty"}}],[11,"fmt","","",166,{"inputs":[{"name":"intty"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",166,{"inputs":[{"name":"intty"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bit_width","","",166,{"inputs":[{"name":"intty"}],"output":{"name":"option"}}],[11,"hash","","",167,null],[11,"decode","","",167,{"inputs":[{"name":"uintty"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",167,{"inputs":[{"name":"uintty"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",167,{"inputs":[{"name":"uintty"},{"name":"uintty"}],"output":{"name":"bool"}}],[11,"ne","","",167,{"inputs":[{"name":"uintty"},{"name":"uintty"}],"output":{"name":"bool"}}],[11,"clone","","",167,{"inputs":[{"name":"uintty"}],"output":{"name":"uintty"}}],[11,"bit_width","","",167,{"inputs":[{"name":"uintty"}],"output":{"name":"option"}}],[11,"fmt","","",167,{"inputs":[{"name":"uintty"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",167,{"inputs":[{"name":"uintty"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",168,null],[11,"decode","","",168,{"inputs":[{"name":"floatty"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",168,{"inputs":[{"name":"floatty"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",168,{"inputs":[{"name":"floatty"},{"name":"floatty"}],"output":{"name":"bool"}}],[11,"ne","","",168,{"inputs":[{"name":"floatty"},{"name":"floatty"}],"output":{"name":"bool"}}],[11,"clone","","",168,{"inputs":[{"name":"floatty"}],"output":{"name":"floatty"}}],[11,"fmt","","",168,{"inputs":[{"name":"floatty"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",168,{"inputs":[{"name":"floatty"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bit_width","","",168,{"inputs":[{"name":"floatty"}],"output":{"name":"usize"}}],[11,"fmt","","",169,{"inputs":[{"name":"typebinding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",169,null],[11,"decode","","",169,{"inputs":[{"name":"typebinding"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",169,{"inputs":[{"name":"typebinding"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",169,{"inputs":[{"name":"typebinding"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"ne","","",169,{"inputs":[{"name":"typebinding"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"clone","","",169,{"inputs":[{"name":"typebinding"}],"output":{"name":"typebinding"}}],[11,"hash","","",105,null],[11,"decode","","",105,{"inputs":[{"name":"ty"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",105,{"inputs":[{"name":"ty"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",105,{"inputs":[{"name":"ty"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"ne","","",105,{"inputs":[{"name":"ty"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"clone","","",105,{"inputs":[{"name":"ty"}],"output":{"name":"ty"}}],[11,"fmt","","",105,{"inputs":[{"name":"ty"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",170,{"inputs":[{"name":"primty"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",170,null],[11,"decode","","",170,{"inputs":[{"name":"primty"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",170,{"inputs":[{"name":"primty"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",170,{"inputs":[{"name":"primty"},{"name":"primty"}],"output":{"name":"bool"}}],[11,"ne","","",170,{"inputs":[{"name":"primty"},{"name":"primty"}],"output":{"name":"bool"}}],[11,"clone","","",170,{"inputs":[{"name":"primty"}],"output":{"name":"primty"}}],[11,"fmt","","",171,{"inputs":[{"name":"barefnty"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",171,null],[11,"decode","","",171,{"inputs":[{"name":"barefnty"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",171,{"inputs":[{"name":"barefnty"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",171,{"inputs":[{"name":"barefnty"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"ne","","",171,{"inputs":[{"name":"barefnty"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"clone","","",171,{"inputs":[{"name":"barefnty"}],"output":{"name":"barefnty"}}],[11,"fmt","","",172,{"inputs":[{"name":"ty_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",172,null],[11,"decode","","",172,{"inputs":[{"name":"ty_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",172,{"inputs":[{"name":"ty_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",172,{"inputs":[{"name":"ty_"},{"name":"ty_"}],"output":{"name":"bool"}}],[11,"ne","","",172,{"inputs":[{"name":"ty_"},{"name":"ty_"}],"output":{"name":"bool"}}],[11,"clone","","",172,{"inputs":[{"name":"ty_"}],"output":{"name":"ty_"}}],[11,"fmt","","",173,{"inputs":[{"name":"asmdialect"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",173,null],[11,"decode","","",173,{"inputs":[{"name":"asmdialect"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",173,{"inputs":[{"name":"asmdialect"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",173,{"inputs":[{"name":"asmdialect"},{"name":"asmdialect"}],"output":{"name":"bool"}}],[11,"ne","","",173,{"inputs":[{"name":"asmdialect"},{"name":"asmdialect"}],"output":{"name":"bool"}}],[11,"clone","","",173,{"inputs":[{"name":"asmdialect"}],"output":{"name":"asmdialect"}}],[11,"fmt","","",174,{"inputs":[{"name":"inlineasm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",174,null],[11,"decode","","",174,{"inputs":[{"name":"inlineasm"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",174,{"inputs":[{"name":"inlineasm"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",174,{"inputs":[{"name":"inlineasm"},{"name":"inlineasm"}],"output":{"name":"bool"}}],[11,"ne","","",174,{"inputs":[{"name":"inlineasm"},{"name":"inlineasm"}],"output":{"name":"bool"}}],[11,"clone","","",174,{"inputs":[{"name":"inlineasm"}],"output":{"name":"inlineasm"}}],[11,"fmt","","",175,{"inputs":[{"name":"arg"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",175,null],[11,"decode","","",175,{"inputs":[{"name":"arg"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",175,{"inputs":[{"name":"arg"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",175,{"inputs":[{"name":"arg"},{"name":"arg"}],"output":{"name":"bool"}}],[11,"ne","","",175,{"inputs":[{"name":"arg"},{"name":"arg"}],"output":{"name":"bool"}}],[11,"clone","","",175,{"inputs":[{"name":"arg"}],"output":{"name":"arg"}}],[11,"new_self","","",175,{"inputs":[{"name":"arg"},{"name":"span"},{"name":"mutability"},{"name":"ident"}],"output":{"name":"arg"}}],[11,"fmt","","",176,{"inputs":[{"name":"fndecl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",176,null],[11,"decode","","",176,{"inputs":[{"name":"fndecl"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",176,{"inputs":[{"name":"fndecl"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",176,{"inputs":[{"name":"fndecl"},{"name":"fndecl"}],"output":{"name":"bool"}}],[11,"ne","","",176,{"inputs":[{"name":"fndecl"},{"name":"fndecl"}],"output":{"name":"bool"}}],[11,"clone","","",176,{"inputs":[{"name":"fndecl"}],"output":{"name":"fndecl"}}],[11,"fmt","","",177,{"inputs":[{"name":"unsafety"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",177,null],[11,"decode","","",177,{"inputs":[{"name":"unsafety"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",177,{"inputs":[{"name":"unsafety"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",177,{"inputs":[{"name":"unsafety"},{"name":"unsafety"}],"output":{"name":"bool"}}],[11,"ne","","",177,{"inputs":[{"name":"unsafety"},{"name":"unsafety"}],"output":{"name":"bool"}}],[11,"clone","","",177,{"inputs":[{"name":"unsafety"}],"output":{"name":"unsafety"}}],[11,"fmt","","",178,{"inputs":[{"name":"constness"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",178,null],[11,"decode","","",178,{"inputs":[{"name":"constness"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",178,{"inputs":[{"name":"constness"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",178,{"inputs":[{"name":"constness"},{"name":"constness"}],"output":{"name":"bool"}}],[11,"ne","","",178,{"inputs":[{"name":"constness"},{"name":"constness"}],"output":{"name":"bool"}}],[11,"clone","","",178,{"inputs":[{"name":"constness"}],"output":{"name":"constness"}}],[11,"fmt","","",177,{"inputs":[{"name":"unsafety"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",179,null],[11,"decode","","",179,{"inputs":[{"name":"implpolarity"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",179,{"inputs":[{"name":"implpolarity"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",179,{"inputs":[{"name":"implpolarity"},{"name":"implpolarity"}],"output":{"name":"bool"}}],[11,"ne","","",179,{"inputs":[{"name":"implpolarity"},{"name":"implpolarity"}],"output":{"name":"bool"}}],[11,"clone","","",179,{"inputs":[{"name":"implpolarity"}],"output":{"name":"implpolarity"}}],[11,"fmt","","",179,{"inputs":[{"name":"implpolarity"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",180,{"inputs":[{"name":"functionretty"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",180,null],[11,"decode","","",180,{"inputs":[{"name":"functionretty"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",180,{"inputs":[{"name":"functionretty"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",180,{"inputs":[{"name":"functionretty"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"ne","","",180,{"inputs":[{"name":"functionretty"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"clone","","",180,{"inputs":[{"name":"functionretty"}],"output":{"name":"functionretty"}}],[11,"span","","",180,{"inputs":[{"name":"functionretty"}],"output":{"name":"span"}}],[11,"fmt","","",181,{"inputs":[{"name":"explicitself_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",181,null],[11,"decode","","",181,{"inputs":[{"name":"explicitself_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",181,{"inputs":[{"name":"explicitself_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",181,{"inputs":[{"name":"explicitself_"},{"name":"explicitself_"}],"output":{"name":"bool"}}],[11,"ne","","",181,{"inputs":[{"name":"explicitself_"},{"name":"explicitself_"}],"output":{"name":"bool"}}],[11,"clone","","",181,{"inputs":[{"name":"explicitself_"}],"output":{"name":"explicitself_"}}],[11,"fmt","","",182,{"inputs":[{"name":"mod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",182,null],[11,"decode","","",182,{"inputs":[{"name":"mod"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",182,{"inputs":[{"name":"mod"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",182,{"inputs":[{"name":"mod"},{"name":"mod"}],"output":{"name":"bool"}}],[11,"ne","","",182,{"inputs":[{"name":"mod"},{"name":"mod"}],"output":{"name":"bool"}}],[11,"clone","","",182,{"inputs":[{"name":"mod"}],"output":{"name":"mod"}}],[11,"fmt","","",183,{"inputs":[{"name":"foreignmod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",183,null],[11,"decode","","",183,{"inputs":[{"name":"foreignmod"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",183,{"inputs":[{"name":"foreignmod"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",183,{"inputs":[{"name":"foreignmod"},{"name":"foreignmod"}],"output":{"name":"bool"}}],[11,"ne","","",183,{"inputs":[{"name":"foreignmod"},{"name":"foreignmod"}],"output":{"name":"bool"}}],[11,"clone","","",183,{"inputs":[{"name":"foreignmod"}],"output":{"name":"foreignmod"}}],[11,"fmt","","",184,{"inputs":[{"name":"enumdef"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",184,null],[11,"decode","","",184,{"inputs":[{"name":"enumdef"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",184,{"inputs":[{"name":"enumdef"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",184,{"inputs":[{"name":"enumdef"},{"name":"enumdef"}],"output":{"name":"bool"}}],[11,"ne","","",184,{"inputs":[{"name":"enumdef"},{"name":"enumdef"}],"output":{"name":"bool"}}],[11,"clone","","",184,{"inputs":[{"name":"enumdef"}],"output":{"name":"enumdef"}}],[11,"fmt","","",185,{"inputs":[{"name":"variant_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",185,null],[11,"decode","","",185,{"inputs":[{"name":"variant_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",185,{"inputs":[{"name":"variant_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",185,{"inputs":[{"name":"variant_"},{"name":"variant_"}],"output":{"name":"bool"}}],[11,"ne","","",185,{"inputs":[{"name":"variant_"},{"name":"variant_"}],"output":{"name":"bool"}}],[11,"clone","","",185,{"inputs":[{"name":"variant_"}],"output":{"name":"variant_"}}],[11,"fmt","","",186,{"inputs":[{"name":"pathlistitem_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",186,null],[11,"decode","","",186,{"inputs":[{"name":"pathlistitem_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",186,{"inputs":[{"name":"pathlistitem_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",186,{"inputs":[{"name":"pathlistitem_"},{"name":"pathlistitem_"}],"output":{"name":"bool"}}],[11,"ne","","",186,{"inputs":[{"name":"pathlistitem_"},{"name":"pathlistitem_"}],"output":{"name":"bool"}}],[11,"clone","","",186,{"inputs":[{"name":"pathlistitem_"}],"output":{"name":"pathlistitem_"}}],[11,"id","","",186,{"inputs":[{"name":"pathlistitem_"}],"output":{"name":"u32"}}],[11,"name","","",186,{"inputs":[{"name":"pathlistitem_"}],"output":{"name":"option"}}],[11,"rename","","",186,{"inputs":[{"name":"pathlistitem_"}],"output":{"name":"option"}}],[11,"fmt","","",187,{"inputs":[{"name":"viewpath_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",187,null],[11,"decode","","",187,{"inputs":[{"name":"viewpath_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",187,{"inputs":[{"name":"viewpath_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",187,{"inputs":[{"name":"viewpath_"},{"name":"viewpath_"}],"output":{"name":"bool"}}],[11,"ne","","",187,{"inputs":[{"name":"viewpath_"},{"name":"viewpath_"}],"output":{"name":"bool"}}],[11,"clone","","",187,{"inputs":[{"name":"viewpath_"}],"output":{"name":"viewpath_"}}],[11,"fmt","","",188,{"inputs":[{"name":"attrstyle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",188,null],[11,"decode","","",188,{"inputs":[{"name":"attrstyle"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",188,{"inputs":[{"name":"attrstyle"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",188,{"inputs":[{"name":"attrstyle"},{"name":"attrstyle"}],"output":{"name":"bool"}}],[11,"ne","","",188,{"inputs":[{"name":"attrstyle"},{"name":"attrstyle"}],"output":{"name":"bool"}}],[11,"clone","","",188,{"inputs":[{"name":"attrstyle"}],"output":{"name":"attrstyle"}}],[11,"fmt","","",189,{"inputs":[{"name":"attrid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",189,null],[11,"decode","","",189,{"inputs":[{"name":"attrid"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",189,{"inputs":[{"name":"attrid"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",189,{"inputs":[{"name":"attrid"},{"name":"attrid"}],"output":{"name":"bool"}}],[11,"ne","","",189,{"inputs":[{"name":"attrid"},{"name":"attrid"}],"output":{"name":"bool"}}],[11,"clone","","",189,{"inputs":[{"name":"attrid"}],"output":{"name":"attrid"}}],[11,"fmt","","",190,{"inputs":[{"name":"attribute_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",190,null],[11,"decode","","",190,{"inputs":[{"name":"attribute_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",190,{"inputs":[{"name":"attribute_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",190,{"inputs":[{"name":"attribute_"},{"name":"attribute_"}],"output":{"name":"bool"}}],[11,"ne","","",190,{"inputs":[{"name":"attribute_"},{"name":"attribute_"}],"output":{"name":"bool"}}],[11,"clone","","",190,{"inputs":[{"name":"attribute_"}],"output":{"name":"attribute_"}}],[11,"fmt","","",191,{"inputs":[{"name":"traitref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",191,null],[11,"decode","","",191,{"inputs":[{"name":"traitref"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",191,{"inputs":[{"name":"traitref"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",191,{"inputs":[{"name":"traitref"},{"name":"traitref"}],"output":{"name":"bool"}}],[11,"ne","","",191,{"inputs":[{"name":"traitref"},{"name":"traitref"}],"output":{"name":"bool"}}],[11,"clone","","",191,{"inputs":[{"name":"traitref"}],"output":{"name":"traitref"}}],[11,"fmt","","",192,{"inputs":[{"name":"polytraitref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",192,null],[11,"decode","","",192,{"inputs":[{"name":"polytraitref"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",192,{"inputs":[{"name":"polytraitref"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",192,{"inputs":[{"name":"polytraitref"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"ne","","",192,{"inputs":[{"name":"polytraitref"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"clone","","",192,{"inputs":[{"name":"polytraitref"}],"output":{"name":"polytraitref"}}],[11,"fmt","","",193,{"inputs":[{"name":"visibility"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",193,null],[11,"decode","","",193,{"inputs":[{"name":"visibility"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",193,{"inputs":[{"name":"visibility"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",193,{"inputs":[{"name":"visibility"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"ne","","",193,{"inputs":[{"name":"visibility"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"clone","","",193,{"inputs":[{"name":"visibility"}],"output":{"name":"visibility"}}],[11,"inherit_from","","",193,{"inputs":[{"name":"visibility"},{"name":"visibility"}],"output":{"name":"visibility"}}],[11,"fmt","","",194,{"inputs":[{"name":"structfield_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",194,null],[11,"decode","","",194,{"inputs":[{"name":"structfield_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",194,{"inputs":[{"name":"structfield_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",194,{"inputs":[{"name":"structfield_"},{"name":"structfield_"}],"output":{"name":"bool"}}],[11,"ne","","",194,{"inputs":[{"name":"structfield_"},{"name":"structfield_"}],"output":{"name":"bool"}}],[11,"clone","","",194,{"inputs":[{"name":"structfield_"}],"output":{"name":"structfield_"}}],[11,"ident","","",194,{"inputs":[{"name":"structfield_"}],"output":{"name":"option"}}],[11,"fmt","","",195,{"inputs":[{"name":"structfieldkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",195,null],[11,"decode","","",195,{"inputs":[{"name":"structfieldkind"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",195,{"inputs":[{"name":"structfieldkind"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",195,{"inputs":[{"name":"structfieldkind"},{"name":"structfieldkind"}],"output":{"name":"bool"}}],[11,"ne","","",195,{"inputs":[{"name":"structfieldkind"},{"name":"structfieldkind"}],"output":{"name":"bool"}}],[11,"clone","","",195,{"inputs":[{"name":"structfieldkind"}],"output":{"name":"structfieldkind"}}],[11,"is_unnamed","","",195,{"inputs":[{"name":"structfieldkind"}],"output":{"name":"bool"}}],[11,"visibility","","",195,{"inputs":[{"name":"structfieldkind"}],"output":{"name":"visibility"}}],[11,"fmt","","",196,{"inputs":[{"name":"variantdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",196,null],[11,"decode","","",196,{"inputs":[{"name":"variantdata"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",196,{"inputs":[{"name":"variantdata"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",196,{"inputs":[{"name":"variantdata"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"ne","","",196,{"inputs":[{"name":"variantdata"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"clone","","",196,{"inputs":[{"name":"variantdata"}],"output":{"name":"variantdata"}}],[11,"fields","","",196,null],[11,"id","","",196,{"inputs":[{"name":"variantdata"}],"output":{"name":"u32"}}],[11,"is_struct","","",196,{"inputs":[{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"is_tuple","","",196,{"inputs":[{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"is_unit","","",196,{"inputs":[{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"fmt","","",197,{"inputs":[{"name":"item"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",197,null],[11,"decode","","",197,{"inputs":[{"name":"item"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",197,{"inputs":[{"name":"item"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",197,{"inputs":[{"name":"item"},{"name":"item"}],"output":{"name":"bool"}}],[11,"ne","","",197,{"inputs":[{"name":"item"},{"name":"item"}],"output":{"name":"bool"}}],[11,"clone","","",197,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"fmt","","",198,{"inputs":[{"name":"item_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",198,null],[11,"decode","","",198,{"inputs":[{"name":"item_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",198,{"inputs":[{"name":"item_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",198,{"inputs":[{"name":"item_"},{"name":"item_"}],"output":{"name":"bool"}}],[11,"ne","","",198,{"inputs":[{"name":"item_"},{"name":"item_"}],"output":{"name":"bool"}}],[11,"clone","","",198,{"inputs":[{"name":"item_"}],"output":{"name":"item_"}}],[11,"descriptive_variant","","",198,{"inputs":[{"name":"item_"}],"output":{"name":"str"}}],[11,"fmt","","",199,{"inputs":[{"name":"foreignitem"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",199,null],[11,"decode","","",199,{"inputs":[{"name":"foreignitem"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",199,{"inputs":[{"name":"foreignitem"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",199,{"inputs":[{"name":"foreignitem"},{"name":"foreignitem"}],"output":{"name":"bool"}}],[11,"ne","","",199,{"inputs":[{"name":"foreignitem"},{"name":"foreignitem"}],"output":{"name":"bool"}}],[11,"clone","","",199,{"inputs":[{"name":"foreignitem"}],"output":{"name":"foreignitem"}}],[11,"fmt","","",200,{"inputs":[{"name":"foreignitem_"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",200,null],[11,"decode","","",200,{"inputs":[{"name":"foreignitem_"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",200,{"inputs":[{"name":"foreignitem_"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",200,{"inputs":[{"name":"foreignitem_"},{"name":"foreignitem_"}],"output":{"name":"bool"}}],[11,"ne","","",200,{"inputs":[{"name":"foreignitem_"},{"name":"foreignitem_"}],"output":{"name":"bool"}}],[11,"clone","","",200,{"inputs":[{"name":"foreignitem_"}],"output":{"name":"foreignitem_"}}],[11,"descriptive_variant","","",200,{"inputs":[{"name":"foreignitem_"}],"output":{"name":"str"}}],[11,"fmt","","",201,{"inputs":[{"name":"macrodef"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",201,null],[11,"decode","","",201,{"inputs":[{"name":"macrodef"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",201,{"inputs":[{"name":"macrodef"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",201,{"inputs":[{"name":"macrodef"},{"name":"macrodef"}],"output":{"name":"bool"}}],[11,"ne","","",201,{"inputs":[{"name":"macrodef"},{"name":"macrodef"}],"output":{"name":"bool"}}],[11,"clone","","",201,{"inputs":[{"name":"macrodef"}],"output":{"name":"macrodef"}}],[11,"fmt","syntax::abi","",202,{"inputs":[{"name":"os"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",202,{"inputs":[{"name":"os"},{"name":"os"}],"output":{"name":"bool"}}],[11,"ne","","",202,{"inputs":[{"name":"os"},{"name":"os"}],"output":{"name":"bool"}}],[11,"clone","","",202,{"inputs":[{"name":"os"}],"output":{"name":"os"}}],[11,"fmt","","",203,{"inputs":[{"name":"abi"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",203,{"inputs":[{"name":"abi"}],"output":{"name":"abi"}}],[11,"decode","","",203,{"inputs":[{"name":"abi"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",203,{"inputs":[{"name":"abi"},{"name":"__s"}],"output":{"name":"result"}}],[11,"hash","","",203,null],[11,"eq","","",203,{"inputs":[{"name":"abi"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"ne","","",203,{"inputs":[{"name":"abi"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"fmt","","",204,{"inputs":[{"name":"architecture"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",204,{"inputs":[{"name":"architecture"},{"name":"architecture"}],"output":{"name":"bool"}}],[11,"ne","","",204,{"inputs":[{"name":"architecture"},{"name":"architecture"}],"output":{"name":"bool"}}],[11,"clone","","",204,{"inputs":[{"name":"architecture"}],"output":{"name":"architecture"}}],[11,"clone","","",205,{"inputs":[{"name":"abidata"}],"output":{"name":"abidata"}}],[11,"clone","","",206,{"inputs":[{"name":"abiarchitecture"}],"output":{"name":"abiarchitecture"}}],[11,"index","","",203,{"inputs":[{"name":"abi"}],"output":{"name":"usize"}}],[11,"data","","",203,{"inputs":[{"name":"abi"}],"output":{"name":"abidata"}}],[11,"name","","",203,{"inputs":[{"name":"abi"}],"output":{"name":"str"}}],[11,"fmt","","",203,{"inputs":[{"name":"abi"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",202,{"inputs":[{"name":"os"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","syntax::ast_util","",207,{"inputs":[{"name":"idrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",207,{"inputs":[{"name":"idrange"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",207,{"inputs":[{"name":"idrange"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",207,{"inputs":[{"name":"idrange"}],"output":{"name":"idrange"}}],[11,"max","","",207,{"inputs":[{"name":"idrange"}],"output":{"name":"idrange"}}],[11,"empty","","",207,{"inputs":[{"name":"idrange"}],"output":{"name":"bool"}}],[11,"add","","",207,null],[11,"visit_mod","","",208,null],[11,"visit_foreign_item","","",208,null],[11,"visit_item","","",208,null],[11,"visit_local","","",208,null],[11,"visit_block","","",208,null],[11,"visit_stmt","","",208,null],[11,"visit_pat","","",208,null],[11,"visit_expr","","",208,null],[11,"visit_ty","","",208,null],[11,"visit_generics","","",208,null],[11,"visit_fn","","",208,null],[11,"visit_struct_field","","",208,null],[11,"visit_variant_data","","",208,null],[11,"visit_trait_item","","",208,null],[11,"visit_impl_item","","",208,null],[11,"visit_lifetime","","",208,null],[11,"visit_lifetime_def","","",208,null],[11,"visit_trait_ref","","",208,null],[11,"new","","",209,{"inputs":[{"name":"idrangecomputingvisitor"}],"output":{"name":"idrangecomputingvisitor"}}],[11,"result","","",209,{"inputs":[{"name":"idrangecomputingvisitor"}],"output":{"name":"idrange"}}],[11,"visit_id","","",209,null],[11,"check_name","syntax::codemap","",101,{"inputs":[{"name":"spanned"},{"name":"str"}],"output":{"name":"bool"}}],[11,"name","","",101,{"inputs":[{"name":"spanned"}],"output":{"name":"internedstring"}}],[11,"value_str","","",101,{"inputs":[{"name":"spanned"}],"output":{"name":"option"}}],[11,"meta_item_list","","",101,{"inputs":[{"name":"spanned"}],"output":{"name":"option"}}],[11,"span","","",101,{"inputs":[{"name":"spanned"}],"output":{"name":"span"}}],[11,"name","","",101,{"inputs":[{"name":"spanned"}],"output":{"name":"internedstring"}}],[11,"value_str","","",101,{"inputs":[{"name":"spanned"}],"output":{"name":"option"}}],[11,"meta_item_list","","",101,{"inputs":[{"name":"spanned"}],"output":{"name":"option"}}],[11,"span","","",101,{"inputs":[{"name":"spanned"}],"output":{"name":"span"}}],[11,"name","syntax::ptr","",109,{"inputs":[{"name":"p"}],"output":{"name":"internedstring"}}],[11,"value_str","","",109,{"inputs":[{"name":"p"}],"output":{"name":"option"}}],[11,"meta_item_list","","",109,{"inputs":[{"name":"p"}],"output":{"name":"option"}}],[11,"span","","",109,{"inputs":[{"name":"p"}],"output":{"name":"span"}}],[11,"meta","syntax::codemap","Extract the MetaItem from inside this Attribute.",101,{"inputs":[{"name":"spanned"}],"output":{"name":"spanned"}}],[11,"with_desugared_doc","","Convert self to a normal #[doc=\"foo\"] comment, if it is a\ncomment like `///` or `/** */`. (Returns self unchanged for\nnon-sugared doc attributes.)",101,{"inputs":[{"name":"spanned"},{"name":"f"}],"output":{"name":"t"}}],[11,"eq","syntax::attr","",210,{"inputs":[{"name":"inlineattr"},{"name":"inlineattr"}],"output":{"name":"bool"}}],[11,"ne","","",210,{"inputs":[{"name":"inlineattr"},{"name":"inlineattr"}],"output":{"name":"bool"}}],[11,"clone","","",210,{"inputs":[{"name":"inlineattr"}],"output":{"name":"inlineattr"}}],[11,"hash","","",211,null],[11,"eq","","",211,{"inputs":[{"name":"stability"},{"name":"stability"}],"output":{"name":"bool"}}],[11,"ne","","",211,{"inputs":[{"name":"stability"},{"name":"stability"}],"output":{"name":"bool"}}],[11,"fmt","","",211,{"inputs":[{"name":"stability"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",211,{"inputs":[{"name":"stability"}],"output":{"name":"stability"}}],[11,"decode","","",211,{"inputs":[{"name":"stability"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",211,{"inputs":[{"name":"stability"},{"name":"__s"}],"output":{"name":"result"}}],[11,"hash","","",212,null],[11,"fmt","","",212,{"inputs":[{"name":"stabilitylevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",212,{"inputs":[{"name":"stabilitylevel"}],"output":{"name":"stabilitylevel"}}],[11,"partial_cmp","","",212,{"inputs":[{"name":"stabilitylevel"},{"name":"stabilitylevel"}],"output":{"name":"option"}}],[11,"lt","","",212,{"inputs":[{"name":"stabilitylevel"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"le","","",212,{"inputs":[{"name":"stabilitylevel"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"gt","","",212,{"inputs":[{"name":"stabilitylevel"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"ge","","",212,{"inputs":[{"name":"stabilitylevel"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"eq","","",212,{"inputs":[{"name":"stabilitylevel"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"ne","","",212,{"inputs":[{"name":"stabilitylevel"},{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"decode","","",212,{"inputs":[{"name":"stabilitylevel"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",212,{"inputs":[{"name":"stabilitylevel"},{"name":"__s"}],"output":{"name":"result"}}],[11,"hash","","",213,null],[11,"fmt","","",213,{"inputs":[{"name":"deprecation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",213,{"inputs":[{"name":"deprecation"}],"output":{"name":"deprecation"}}],[11,"partial_cmp","","",213,{"inputs":[{"name":"deprecation"},{"name":"deprecation"}],"output":{"name":"option"}}],[11,"lt","","",213,{"inputs":[{"name":"deprecation"},{"name":"deprecation"}],"output":{"name":"bool"}}],[11,"le","","",213,{"inputs":[{"name":"deprecation"},{"name":"deprecation"}],"output":{"name":"bool"}}],[11,"gt","","",213,{"inputs":[{"name":"deprecation"},{"name":"deprecation"}],"output":{"name":"bool"}}],[11,"ge","","",213,{"inputs":[{"name":"deprecation"},{"name":"deprecation"}],"output":{"name":"bool"}}],[11,"eq","","",213,{"inputs":[{"name":"deprecation"},{"name":"deprecation"}],"output":{"name":"bool"}}],[11,"ne","","",213,{"inputs":[{"name":"deprecation"},{"name":"deprecation"}],"output":{"name":"bool"}}],[11,"decode","","",213,{"inputs":[{"name":"deprecation"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",213,{"inputs":[{"name":"deprecation"},{"name":"__s"}],"output":{"name":"result"}}],[11,"is_unstable","","",212,{"inputs":[{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"is_stable","","",212,{"inputs":[{"name":"stabilitylevel"}],"output":{"name":"bool"}}],[11,"clone","","",214,{"inputs":[{"name":"reprattr"}],"output":{"name":"reprattr"}}],[11,"decode","","",214,{"inputs":[{"name":"reprattr"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",214,{"inputs":[{"name":"reprattr"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",214,{"inputs":[{"name":"reprattr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",214,{"inputs":[{"name":"reprattr"},{"name":"reprattr"}],"output":{"name":"bool"}}],[11,"ne","","",214,{"inputs":[{"name":"reprattr"},{"name":"reprattr"}],"output":{"name":"bool"}}],[11,"is_ffi_safe","","",214,{"inputs":[{"name":"reprattr"}],"output":{"name":"bool"}}],[11,"clone","","",215,{"inputs":[{"name":"inttype"}],"output":{"name":"inttype"}}],[11,"decode","","",215,{"inputs":[{"name":"inttype"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",215,{"inputs":[{"name":"inttype"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",215,{"inputs":[{"name":"inttype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",215,{"inputs":[{"name":"inttype"},{"name":"inttype"}],"output":{"name":"bool"}}],[11,"ne","","",215,{"inputs":[{"name":"inttype"},{"name":"inttype"}],"output":{"name":"bool"}}],[11,"hash","","",215,null],[11,"is_signed","","",215,{"inputs":[{"name":"inttype"}],"output":{"name":"bool"}}],[11,"fmt","syntax::codemap","",216,{"inputs":[{"name":"bytepos"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",216,{"inputs":[{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"option"}}],[11,"lt","","",216,{"inputs":[{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"le","","",216,{"inputs":[{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"gt","","",216,{"inputs":[{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"ge","","",216,{"inputs":[{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"hash","","",216,null],[11,"eq","","",216,{"inputs":[{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"ne","","",216,{"inputs":[{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"clone","","",216,{"inputs":[{"name":"bytepos"}],"output":{"name":"bytepos"}}],[11,"fmt","","",217,{"inputs":[{"name":"charpos"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",217,{"inputs":[{"name":"charpos"},{"name":"charpos"}],"output":{"name":"option"}}],[11,"lt","","",217,{"inputs":[{"name":"charpos"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"le","","",217,{"inputs":[{"name":"charpos"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"gt","","",217,{"inputs":[{"name":"charpos"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"ge","","",217,{"inputs":[{"name":"charpos"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"hash","","",217,null],[11,"eq","","",217,{"inputs":[{"name":"charpos"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"ne","","",217,{"inputs":[{"name":"charpos"},{"name":"charpos"}],"output":{"name":"bool"}}],[11,"clone","","",217,{"inputs":[{"name":"charpos"}],"output":{"name":"charpos"}}],[11,"from_usize","","",216,{"inputs":[{"name":"bytepos"},{"name":"usize"}],"output":{"name":"bytepos"}}],[11,"to_usize","","",216,{"inputs":[{"name":"bytepos"}],"output":{"name":"usize"}}],[11,"add","","",216,{"inputs":[{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"bytepos"}}],[11,"sub","","",216,{"inputs":[{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"bytepos"}}],[11,"encode","","",216,{"inputs":[{"name":"bytepos"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",216,{"inputs":[{"name":"bytepos"},{"name":"d"}],"output":{"name":"result"}}],[11,"from_usize","","",217,{"inputs":[{"name":"charpos"},{"name":"usize"}],"output":{"name":"charpos"}}],[11,"to_usize","","",217,{"inputs":[{"name":"charpos"}],"output":{"name":"usize"}}],[11,"add","","",217,{"inputs":[{"name":"charpos"},{"name":"charpos"}],"output":{"name":"charpos"}}],[11,"sub","","",217,{"inputs":[{"name":"charpos"},{"name":"charpos"}],"output":{"name":"charpos"}}],[11,"hash","","",218,null],[11,"clone","","",218,{"inputs":[{"name":"span"}],"output":{"name":"span"}}],[11,"substitute_dummy","","Returns `self` if `self` is not the dummy span, and `other` otherwise.",218,{"inputs":[{"name":"span"},{"name":"span"}],"output":{"name":"span"}}],[11,"contains","","",218,{"inputs":[{"name":"span"},{"name":"span"}],"output":{"name":"bool"}}],[11,"fmt","","",101,{"inputs":[{"name":"spanned"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",101,null],[11,"decode","","",101,{"inputs":[{"name":"spanned"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",101,{"inputs":[{"name":"spanned"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",101,{"inputs":[{"name":"spanned"},{"name":"spanned"}],"output":{"name":"bool"}}],[11,"ne","","",101,{"inputs":[{"name":"spanned"},{"name":"spanned"}],"output":{"name":"bool"}}],[11,"clone","","",101,{"inputs":[{"name":"spanned"}],"output":{"name":"spanned"}}],[11,"eq","","",218,{"inputs":[{"name":"span"},{"name":"span"}],"output":{"name":"bool"}}],[11,"ne","","",218,{"inputs":[{"name":"span"},{"name":"span"}],"output":{"name":"bool"}}],[11,"encode","","",218,{"inputs":[{"name":"span"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",218,{"inputs":[{"name":"span"},{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",218,{"inputs":[{"name":"span"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",219,{"inputs":[{"name":"loc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",220,{"inputs":[{"name":"locwithopt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",221,{"inputs":[{"name":"filemapandline"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",222,{"inputs":[{"name":"filemapandbytepos"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",223,{"inputs":[{"name":"expnformat"},{"name":"expnformat"}],"output":{"name":"bool"}}],[11,"ne","","",223,{"inputs":[{"name":"expnformat"},{"name":"expnformat"}],"output":{"name":"bool"}}],[11,"fmt","","",223,{"inputs":[{"name":"expnformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",223,null],[11,"clone","","",223,{"inputs":[{"name":"expnformat"}],"output":{"name":"expnformat"}}],[11,"fmt","","",224,{"inputs":[{"name":"nameandspan"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",224,null],[11,"clone","","",224,{"inputs":[{"name":"nameandspan"}],"output":{"name":"nameandspan"}}],[11,"name","","",224,{"inputs":[{"name":"nameandspan"}],"output":{"name":"name"}}],[11,"fmt","","",225,{"inputs":[{"name":"expninfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",225,null],[11,"decode","","",226,{"inputs":[{"name":"expnid"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",226,{"inputs":[{"name":"expnid"},{"name":"__s"}],"output":{"name":"result"}}],[11,"hash","","",226,null],[11,"fmt","","",226,{"inputs":[{"name":"expnid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",226,{"inputs":[{"name":"expnid"}],"output":{"name":"expnid"}}],[11,"eq","","",226,{"inputs":[{"name":"expnid"},{"name":"expnid"}],"output":{"name":"bool"}}],[11,"ne","","",226,{"inputs":[{"name":"expnid"},{"name":"expnid"}],"output":{"name":"bool"}}],[11,"from_u32","","",226,{"inputs":[{"name":"expnid"},{"name":"u32"}],"output":{"name":"expnid"}}],[11,"into_u32","","",226,{"inputs":[{"name":"expnid"}],"output":{"name":"u32"}}],[11,"eq","","",227,{"inputs":[{"name":"lineinfo"},{"name":"lineinfo"}],"output":{"name":"bool"}}],[11,"ne","","",227,{"inputs":[{"name":"lineinfo"},{"name":"lineinfo"}],"output":{"name":"bool"}}],[11,"fmt","","",227,{"inputs":[{"name":"lineinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",227,{"inputs":[{"name":"lineinfo"}],"output":{"name":"lineinfo"}}],[11,"eq","","",228,{"inputs":[{"name":"multibytechar"},{"name":"multibytechar"}],"output":{"name":"bool"}}],[11,"ne","","",228,{"inputs":[{"name":"multibytechar"},{"name":"multibytechar"}],"output":{"name":"bool"}}],[11,"decode","","",228,{"inputs":[{"name":"multibytechar"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",228,{"inputs":[{"name":"multibytechar"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",228,{"inputs":[{"name":"multibytechar"}],"output":{"name":"multibytechar"}}],[11,"encode","","",229,{"inputs":[{"name":"filemap"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",229,{"inputs":[{"name":"filemap"},{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",229,{"inputs":[{"name":"filemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_line","","EFFECT: register a start-of-line offset in the\ntable of line-beginnings.\nUNCHECKED INVARIANT: these offsets must be added in the right\norder and must be in the right places; there is shared knowledge\nabout what ends a line between this file and parse.rs\nWARNING: pos param here is the offset relative to start of CodeMap,\nand CodeMap will append a newline when adding a filemap without a newline at the end,\nso the safe way to call this is with value calculated as\nfilemap.start_pos + newline_offset_relative_to_the_start_of_filemap.",229,null],[11,"get_line","","get a line from the list of pre-computed line-beginnings.\nline-number here is 0-based.",229,{"inputs":[{"name":"filemap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"record_multibyte_char","","",229,null],[11,"is_real_file","","",229,{"inputs":[{"name":"filemap"}],"output":{"name":"bool"}}],[11,"is_imported","","",229,{"inputs":[{"name":"filemap"}],"output":{"name":"bool"}}],[11,"file_exists","","",230,{"inputs":[{"name":"realfileloader"},{"name":"path"}],"output":{"name":"bool"}}],[11,"read_file","","",230,{"inputs":[{"name":"realfileloader"},{"name":"path"}],"output":{"name":"result"}}],[11,"new","","",231,{"inputs":[{"name":"codemap"}],"output":{"name":"codemap"}}],[11,"with_file_loader","","",231,{"inputs":[{"name":"codemap"},{"name":"box"}],"output":{"name":"codemap"}}],[11,"file_exists","","",231,{"inputs":[{"name":"codemap"},{"name":"path"}],"output":{"name":"bool"}}],[11,"load_file","","",231,{"inputs":[{"name":"codemap"},{"name":"path"}],"output":{"name":"result"}}],[11,"new_filemap","","Creates a new filemap without setting its line information. If you don't\nintend to set the line information yourself, you should use new_filemap_and_lines.",231,{"inputs":[{"name":"codemap"},{"name":"string"},{"name":"string"}],"output":{"name":"rc"}}],[11,"new_filemap_and_lines","","Creates a new filemap and sets its line information.",231,{"inputs":[{"name":"codemap"},{"name":"str"},{"name":"str"}],"output":{"name":"rc"}}],[11,"new_imported_filemap","","Allocates a new FileMap representing a source file from an external\ncrate. The source code of such an \"imported filemap\" is not available,\nbut we still know enough to generate accurate debuginfo location\ninformation for things inlined from other crates.",231,{"inputs":[{"name":"codemap"},{"name":"string"},{"name":"usize"},{"name":"vec"},{"name":"vec"}],"output":{"name":"rc"}}],[11,"mk_substr_filename","","",231,{"inputs":[{"name":"codemap"},{"name":"span"}],"output":{"name":"string"}}],[11,"lookup_char_pos","","Lookup source information about a BytePos",231,{"inputs":[{"name":"codemap"},{"name":"bytepos"}],"output":{"name":"loc"}}],[11,"lookup_char_pos_adj","","",231,{"inputs":[{"name":"codemap"},{"name":"bytepos"}],"output":{"name":"locwithopt"}}],[11,"span_to_string","","",231,{"inputs":[{"name":"codemap"},{"name":"span"}],"output":{"name":"string"}}],[11,"span_to_filename","","",231,{"inputs":[{"name":"codemap"},{"name":"span"}],"output":{"name":"string"}}],[11,"span_to_lines","","",231,{"inputs":[{"name":"codemap"},{"name":"span"}],"output":{"name":"result"}}],[11,"span_to_snippet","","",231,{"inputs":[{"name":"codemap"},{"name":"span"}],"output":{"name":"result"}}],[11,"get_filemap","","",231,{"inputs":[{"name":"codemap"},{"name":"str"}],"output":{"name":"rc"}}],[11,"lookup_byte_offset","","For a global BytePos compute the local offset within the containing FileMap",231,{"inputs":[{"name":"codemap"},{"name":"bytepos"}],"output":{"name":"filemapandbytepos"}}],[11,"bytepos_to_file_charpos","","Converts an absolute BytePos to a CharPos relative to the filemap.",231,{"inputs":[{"name":"codemap"},{"name":"bytepos"}],"output":{"name":"charpos"}}],[11,"record_expansion","","",231,{"inputs":[{"name":"codemap"},{"name":"expninfo"}],"output":{"name":"expnid"}}],[11,"with_expn_info","","",231,{"inputs":[{"name":"codemap"},{"name":"expnid"},{"name":"f"}],"output":{"name":"t"}}],[11,"span_allows_unstable","","Check if a span is \"internal\" to a macro in which #[unstable]\nitems can be used (that is, a macro marked with\n`#[allow_internal_unstable]`).",231,{"inputs":[{"name":"codemap"},{"name":"span"}],"output":{"name":"bool"}}],[11,"fmt","","",232,{"inputs":[{"name":"spanlineserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",232,{"inputs":[{"name":"spanlineserror"},{"name":"spanlineserror"}],"output":{"name":"bool"}}],[11,"ne","","",232,{"inputs":[{"name":"spanlineserror"},{"name":"spanlineserror"}],"output":{"name":"bool"}}],[11,"clone","","",232,{"inputs":[{"name":"spanlineserror"}],"output":{"name":"spanlineserror"}}],[11,"fmt","","",233,{"inputs":[{"name":"spansnippeterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",233,{"inputs":[{"name":"spansnippeterror"},{"name":"spansnippeterror"}],"output":{"name":"bool"}}],[11,"ne","","",233,{"inputs":[{"name":"spansnippeterror"},{"name":"spansnippeterror"}],"output":{"name":"bool"}}],[11,"clone","","",233,{"inputs":[{"name":"spansnippeterror"}],"output":{"name":"spansnippeterror"}}],[11,"fmt","","",234,{"inputs":[{"name":"distinctsources"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",234,{"inputs":[{"name":"distinctsources"},{"name":"distinctsources"}],"output":{"name":"bool"}}],[11,"ne","","",234,{"inputs":[{"name":"distinctsources"},{"name":"distinctsources"}],"output":{"name":"bool"}}],[11,"clone","","",234,{"inputs":[{"name":"distinctsources"}],"output":{"name":"distinctsources"}}],[11,"fmt","","",235,{"inputs":[{"name":"malformedcodemappositions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",235,{"inputs":[{"name":"malformedcodemappositions"},{"name":"malformedcodemappositions"}],"output":{"name":"bool"}}],[11,"ne","","",235,{"inputs":[{"name":"malformedcodemappositions"},{"name":"malformedcodemappositions"}],"output":{"name":"bool"}}],[11,"clone","","",235,{"inputs":[{"name":"malformedcodemappositions"}],"output":{"name":"malformedcodemappositions"}}],[11,"fold_mod","syntax::config","",236,{"inputs":[{"name":"context"},{"name":"mod"}],"output":{"name":"mod"}}],[11,"fold_block","","",236,{"inputs":[{"name":"context"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_foreign_mod","","",236,{"inputs":[{"name":"context"},{"name":"foreignmod"}],"output":{"name":"foreignmod"}}],[11,"fold_item_underscore","","",236,{"inputs":[{"name":"context"},{"name":"item_"}],"output":{"name":"item_"}}],[11,"fold_expr","","",236,{"inputs":[{"name":"context"},{"name":"p"}],"output":{"name":"p"}}],[11,"fold_mac","","",236,{"inputs":[{"name":"context"},{"name":"spanned"}],"output":{"name":"spanned"}}],[11,"fold_item","","",236,{"inputs":[{"name":"context"},{"name":"p"}],"output":{"name":"smallvector"}}],[11,"fold_attribute","","",237,{"inputs":[{"name":"cfgattrfolder"},{"name":"spanned"}],"output":{"name":"option"}}],[11,"fold_mac","","",237,{"inputs":[{"name":"cfgattrfolder"},{"name":"spanned"}],"output":{"name":"spanned"}}],[11,"clone","syntax::diagnostic","",238,{"inputs":[{"name":"renderspan"}],"output":{"name":"renderspan"}}],[11,"clone","","",239,{"inputs":[{"name":"colorconfig"}],"output":{"name":"colorconfig"}}],[11,"fmt","","",240,{"inputs":[{"name":"fatalerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",240,{"inputs":[{"name":"fatalerror"}],"output":{"name":"fatalerror"}}],[11,"fmt","","",240,{"inputs":[{"name":"fatalerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",240,{"inputs":[{"name":"fatalerror"}],"output":{"name":"str"}}],[11,"fmt","","",241,{"inputs":[{"name":"explicitbug"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",241,{"inputs":[{"name":"explicitbug"}],"output":{"name":"explicitbug"}}],[11,"fmt","","",241,{"inputs":[{"name":"explicitbug"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",241,{"inputs":[{"name":"explicitbug"}],"output":{"name":"str"}}],[11,"new","","",242,{"inputs":[{"name":"spanhandler"},{"name":"handler"},{"name":"codemap"}],"output":{"name":"spanhandler"}}],[11,"span_fatal","","",242,{"inputs":[{"name":"spanhandler"},{"name":"span"},{"name":"str"}],"output":{"name":"fatalerror"}}],[11,"span_fatal_with_code","","",242,{"inputs":[{"name":"spanhandler"},{"name":"span"},{"name":"str"},{"name":"str"}],"output":{"name":"fatalerror"}}],[11,"span_err","","",242,null],[11,"span_err_with_code","","",242,null],[11,"span_warn","","",242,null],[11,"span_warn_with_code","","",242,null],[11,"span_note","","",242,null],[11,"span_end_note","","",242,null],[11,"span_help","","",242,null],[11,"span_suggestion","","Prints out a message with a suggested edit of the code.",242,null],[11,"fileline_note","","",242,null],[11,"fileline_help","","",242,null],[11,"span_bug","","",242,null],[11,"span_unimpl","","",242,null],[11,"handler","","",242,{"inputs":[{"name":"spanhandler"}],"output":{"name":"handler"}}],[11,"new","","",243,{"inputs":[{"name":"handler"},{"name":"colorconfig"},{"name":"option"},{"name":"bool"}],"output":{"name":"handler"}}],[11,"with_emitter","","",243,{"inputs":[{"name":"handler"},{"name":"bool"},{"name":"box"}],"output":{"name":"handler"}}],[11,"fatal","","",243,{"inputs":[{"name":"handler"},{"name":"str"}],"output":{"name":"fatalerror"}}],[11,"err","","",243,null],[11,"bump_err_count","","",243,null],[11,"err_count","","",243,{"inputs":[{"name":"handler"}],"output":{"name":"usize"}}],[11,"has_errors","","",243,{"inputs":[{"name":"handler"}],"output":{"name":"bool"}}],[11,"abort_if_errors","","",243,null],[11,"warn","","",243,null],[11,"note","","",243,null],[11,"help","","",243,null],[11,"bug","","",243,null],[11,"unimpl","","",243,null],[11,"emit","","",243,null],[11,"emit_with_code","","",243,null],[11,"custom_emit","","",243,null],[11,"fmt","","",244,{"inputs":[{"name":"level"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",244,{"inputs":[{"name":"level"}],"output":{"name":"level"}}],[11,"eq","","",244,{"inputs":[{"name":"level"},{"name":"level"}],"output":{"name":"bool"}}],[11,"ne","","",244,{"inputs":[{"name":"level"},{"name":"level"}],"output":{"name":"bool"}}],[11,"fmt","","",244,{"inputs":[{"name":"level"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"stderr","","",245,{"inputs":[{"name":"emitterwriter"},{"name":"colorconfig"},{"name":"option"}],"output":{"name":"emitterwriter"}}],[11,"new","","",245,{"inputs":[{"name":"emitterwriter"},{"name":"box"},{"name":"option"}],"output":{"name":"emitterwriter"}}],[11,"write","","",246,null],[11,"flush","","",246,{"inputs":[{"name":"destination"}],"output":{"name":"result"}}],[11,"emit","","",245,null],[11,"custom_emit","","",245,null],[11,"eq","syntax::feature_gate","",247,{"inputs":[{"name":"gatedcfg"},{"name":"gatedcfg"}],"output":{"name":"bool"}}],[11,"ne","","",247,{"inputs":[{"name":"gatedcfg"},{"name":"gatedcfg"}],"output":{"name":"bool"}}],[11,"fmt","","",247,{"inputs":[{"name":"gatedcfg"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",247,{"inputs":[{"name":"gatedcfg"},{"name":"gatedcfg"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",247,{"inputs":[{"name":"gatedcfg"},{"name":"gatedcfg"}],"output":{"name":"option"}}],[11,"gate","","",247,{"inputs":[{"name":"gatedcfg"},{"name":"spanned"}],"output":{"name":"option"}}],[11,"check_and_emit","","",247,null],[11,"fmt","","",248,{"inputs":[{"name":"attributetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",248,{"inputs":[{"name":"attributetype"}],"output":{"name":"attributetype"}}],[11,"eq","","",248,{"inputs":[{"name":"attributetype"},{"name":"attributetype"}],"output":{"name":"bool"}}],[11,"ne","","",248,{"inputs":[{"name":"attributetype"},{"name":"attributetype"}],"output":{"name":"bool"}}],[11,"fmt","","",249,{"inputs":[{"name":"attributegate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",249,{"inputs":[{"name":"attributegate"}],"output":{"name":"attributegate"}}],[11,"eq","","",249,{"inputs":[{"name":"attributegate"},{"name":"attributegate"}],"output":{"name":"bool"}}],[11,"ne","","",249,{"inputs":[{"name":"attributegate"},{"name":"attributegate"}],"output":{"name":"bool"}}],[11,"new","","",250,{"inputs":[{"name":"features"}],"output":{"name":"features"}}],[11,"visit_mac","","",251,null],[11,"visit_attribute","","",251,null],[11,"visit_expr","","",251,null],[11,"visit_attribute","","",252,null],[11,"visit_name","","",252,null],[11,"visit_item","","",252,null],[11,"visit_variant_data","","",252,null],[11,"visit_foreign_item","","",252,null],[11,"visit_expr","","",252,null],[11,"visit_pat","","",252,null],[11,"visit_fn","","",252,null],[11,"visit_trait_item","","",252,null],[11,"visit_impl_item","","",252,null],[11,"clone","","",253,{"inputs":[{"name":"unstablefeatures"}],"output":{"name":"unstablefeatures"}}],[11,"move_map","collections::vec","",100,{"inputs":[{"name":"vec"},{"name":"f"}],"output":{"name":"vec"}}],[11,"move_map","syntax::owned_slice","",254,{"inputs":[{"name":"ownedslice"},{"name":"f"}],"output":{"name":"ownedslice"}}],[11,"cmp","","",254,{"inputs":[{"name":"ownedslice"},{"name":"ownedslice"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",254,{"inputs":[{"name":"ownedslice"},{"name":"ownedslice"}],"output":{"name":"option"}}],[11,"lt","","",254,{"inputs":[{"name":"ownedslice"},{"name":"ownedslice"}],"output":{"name":"bool"}}],[11,"le","","",254,{"inputs":[{"name":"ownedslice"},{"name":"ownedslice"}],"output":{"name":"bool"}}],[11,"gt","","",254,{"inputs":[{"name":"ownedslice"},{"name":"ownedslice"}],"output":{"name":"bool"}}],[11,"ge","","",254,{"inputs":[{"name":"ownedslice"},{"name":"ownedslice"}],"output":{"name":"bool"}}],[11,"eq","","",254,{"inputs":[{"name":"ownedslice"},{"name":"ownedslice"}],"output":{"name":"bool"}}],[11,"ne","","",254,{"inputs":[{"name":"ownedslice"},{"name":"ownedslice"}],"output":{"name":"bool"}}],[11,"hash","","",254,null],[11,"fmt","","",254,{"inputs":[{"name":"ownedslice"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","",254,{"inputs":[{"name":"ownedslice"}],"output":{"name":"ownedslice"}}],[11,"from_vec","","",254,{"inputs":[{"name":"ownedslice"},{"name":"vec"}],"output":{"name":"ownedslice"}}],[11,"into_vec","","",254,{"inputs":[{"name":"ownedslice"}],"output":{"name":"vec"}}],[11,"as_slice","","",254,null],[11,"move_iter","","",254,{"inputs":[{"name":"ownedslice"}],"output":{"name":"intoiter"}}],[11,"map","","",254,{"inputs":[{"name":"ownedslice"},{"name":"f"}],"output":{"name":"ownedslice"}}],[11,"deref","","",254,null],[11,"default","","",254,{"inputs":[{"name":"ownedslice"}],"output":{"name":"ownedslice"}}],[11,"clone","","",254,{"inputs":[{"name":"ownedslice"}],"output":{"name":"ownedslice"}}],[11,"from_iter","","",254,{"inputs":[{"name":"ownedslice"},{"name":"i"}],"output":{"name":"ownedslice"}}],[11,"encode","","",254,{"inputs":[{"name":"ownedslice"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",254,{"inputs":[{"name":"ownedslice"},{"name":"d"}],"output":{"name":"result"}}],[11,"and_then","syntax::ptr","Move out of the pointer.\nIntended for chaining transformations not covered by `map`.",109,{"inputs":[{"name":"p"},{"name":"f"}],"output":{"name":"u"}}],[11,"map","","Transform the inner value, consuming `self` and producing a new `P<T>`.",109,{"inputs":[{"name":"p"},{"name":"f"}],"output":{"name":"p"}}],[11,"deref","","",109,{"inputs":[{"name":"p"}],"output":{"name":"t"}}],[11,"clone","","",109,{"inputs":[{"name":"p"}],"output":{"name":"p"}}],[11,"eq","","",109,{"inputs":[{"name":"p"},{"name":"p"}],"output":{"name":"bool"}}],[11,"fmt","","",109,{"inputs":[{"name":"p"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",109,{"inputs":[{"name":"p"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",109,{"inputs":[{"name":"p"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",109,null],[11,"decode","","",109,{"inputs":[{"name":"p"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",109,{"inputs":[{"name":"p"},{"name":"s"}],"output":{"name":"result"}}],[11,"from_str","syntax::show_span","",255,{"inputs":[{"name":"mode"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_expr","","",256,null],[11,"visit_pat","","",256,null],[11,"visit_ty","","",256,null],[11,"visit_mac","","",256,null],[11,"fold_crate","syntax::std_inject","",257,{"inputs":[{"name":"crateinjector"},{"name":"crate"}],"output":{"name":"crate"}}],[11,"fold_crate","","",258,{"inputs":[{"name":"preludeinjector"},{"name":"crate"}],"output":{"name":"crate"}}],[11,"fold_item","","",258,{"inputs":[{"name":"preludeinjector"},{"name":"p"}],"output":{"name":"smallvector"}}],[11,"fold_mod","","",258,{"inputs":[{"name":"preludeinjector"},{"name":"mod"}],"output":{"name":"mod"}}],[11,"fold_crate","syntax::test","",259,{"inputs":[{"name":"testharnessgenerator"},{"name":"crate"}],"output":{"name":"crate"}}],[11,"fold_item","","",259,{"inputs":[{"name":"testharnessgenerator"},{"name":"p"}],"output":{"name":"smallvector"}}],[11,"fold_mod","","",259,{"inputs":[{"name":"testharnessgenerator"},{"name":"mod"}],"output":{"name":"mod"}}],[11,"fold_item","","",260,{"inputs":[{"name":"entrypointcleaner"},{"name":"p"}],"output":{"name":"smallvector"}}],[11,"eq","","",261,{"inputs":[{"name":"hastestsignature"},{"name":"hastestsignature"}],"output":{"name":"bool"}}],[11,"ne","","",261,{"inputs":[{"name":"hastestsignature"},{"name":"hastestsignature"}],"output":{"name":"bool"}}],[11,"eq","syntax::visit","",262,{"inputs":[{"name":"fnkind"},{"name":"fnkind"}],"output":{"name":"bool"}}],[11,"ne","","",262,{"inputs":[{"name":"fnkind"},{"name":"fnkind"}],"output":{"name":"bool"}}],[11,"clone","","",262,{"inputs":[{"name":"fnkind"}],"output":{"name":"fnkind"}}],[11,"eq","syntax::print::pp","",263,{"inputs":[{"name":"breaks"},{"name":"breaks"}],"output":{"name":"bool"}}],[11,"ne","","",263,{"inputs":[{"name":"breaks"},{"name":"breaks"}],"output":{"name":"bool"}}],[11,"clone","","",263,{"inputs":[{"name":"breaks"}],"output":{"name":"breaks"}}],[11,"clone","","",264,{"inputs":[{"name":"breaktoken"}],"output":{"name":"breaktoken"}}],[11,"clone","","",265,{"inputs":[{"name":"begintoken"}],"output":{"name":"begintoken"}}],[11,"clone","","",266,{"inputs":[{"name":"token"}],"output":{"name":"token"}}],[11,"is_eof","","",266,{"inputs":[{"name":"token"}],"output":{"name":"bool"}}],[11,"is_hardbreak_tok","","",266,{"inputs":[{"name":"token"}],"output":{"name":"bool"}}],[11,"clone","","",267,{"inputs":[{"name":"printstackbreak"}],"output":{"name":"printstackbreak"}}],[11,"clone","","",268,{"inputs":[{"name":"printstackelem"}],"output":{"name":"printstackelem"}}],[11,"last_token","","",269,{"inputs":[{"name":"printer"}],"output":{"name":"token"}}],[11,"replace_last_token","","",269,null],[11,"pretty_print","","",269,{"inputs":[{"name":"printer"},{"name":"token"}],"output":{"name":"result"}}],[11,"check_stream","","",269,{"inputs":[{"name":"printer"}],"output":{"name":"result"}}],[11,"scan_push","","",269,null],[11,"scan_pop","","",269,{"inputs":[{"name":"printer"}],"output":{"name":"usize"}}],[11,"scan_top","","",269,{"inputs":[{"name":"printer"}],"output":{"name":"usize"}}],[11,"scan_pop_bottom","","",269,{"inputs":[{"name":"printer"}],"output":{"name":"usize"}}],[11,"advance_right","","",269,null],[11,"advance_left","","",269,{"inputs":[{"name":"printer"}],"output":{"name":"result"}}],[11,"check_stack","","",269,null],[11,"print_newline","","",269,{"inputs":[{"name":"printer"},{"name":"isize"}],"output":{"name":"result"}}],[11,"indent","","",269,null],[11,"get_top","","",269,{"inputs":[{"name":"printer"}],"output":{"name":"printstackelem"}}],[11,"print_str","","",269,{"inputs":[{"name":"printer"},{"name":"str"}],"output":{"name":"result"}}],[11,"print","","",269,{"inputs":[{"name":"printer"},{"name":"token"},{"name":"isize"}],"output":{"name":"result"}}],[11,"clone","syntax::print::pprust","",270,{"inputs":[{"name":"noann"}],"output":{"name":"noann"}}],[11,"clone","","",271,{"inputs":[{"name":"currentcommentandliteral"}],"output":{"name":"currentcommentandliteral"}}],[11,"new_from_input","","",272,{"inputs":[{"name":"state"},{"name":"codemap"},{"name":"spanhandler"},{"name":"string"},{"name":"read"},{"name":"box"},{"name":"ppann"},{"name":"bool"}],"output":{"name":"state"}}],[11,"new","","",272,{"inputs":[{"name":"state"},{"name":"codemap"},{"name":"box"},{"name":"ppann"},{"name":"option"},{"name":"option"}],"output":{"name":"state"}}],[11,"writer","","",272,{"inputs":[{"name":"state"}],"output":{"name":"printer"}}],[11,"boxes","","",272,{"inputs":[{"name":"state"}],"output":{"name":"vec"}}],[11,"comments","","",272,{"inputs":[{"name":"state"}],"output":{"name":"option"}}],[11,"cur_cmnt_and_lit","","",272,{"inputs":[{"name":"state"}],"output":{"name":"currentcommentandliteral"}}],[11,"literals","","",272,{"inputs":[{"name":"state"}],"output":{"name":"option"}}],[11,"cbox","","",272,{"inputs":[{"name":"state"},{"name":"usize"}],"output":{"name":"result"}}],[11,"nbsp","","",272,{"inputs":[{"name":"state"}],"output":{"name":"result"}}],[11,"word_nbsp","","",272,{"inputs":[{"name":"state"},{"name":"str"}],"output":{"name":"result"}}],[11,"head","","",272,{"inputs":[{"name":"state"},{"name":"str"}],"output":{"name":"result"}}],[11,"bopen","","",272,{"inputs":[{"name":"state"}],"output":{"name":"result"}}],[11,"bclose_","","",272,{"inputs":[{"name":"state"},{"name":"span"},{"name":"usize"}],"output":{"name":"result"}}],[11,"bclose_maybe_open","","",272,{"inputs":[{"name":"state"},{"name":"span"},{"name":"usize"},{"name":"bool"}],"output":{"name":"result"}}],[11,"bclose","","",272,{"inputs":[{"name":"state"},{"name":"span"}],"output":{"name":"result"}}],[11,"in_cbox","","",272,{"inputs":[{"name":"state"}],"output":{"name":"bool"}}],[11,"space_if_not_bol","","",272,{"inputs":[{"name":"state"}],"output":{"name":"result"}}],[11,"break_offset_if_not_bol","","",272,{"inputs":[{"name":"state"},{"name":"usize"},{"name":"isize"}],"output":{"name":"result"}}],[11,"synth_comment","","",272,{"inputs":[{"name":"state"},{"name":"string"}],"output":{"name":"result"}}],[11,"commasep_cmnt","","",272,null],[11,"commasep_exprs","","",272,null],[11,"print_mod","","",272,null],[11,"print_foreign_mod","","",272,null],[11,"print_opt_lifetime","","",272,{"inputs":[{"name":"state"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_type","","",272,{"inputs":[{"name":"state"},{"name":"ty"}],"output":{"name":"result"}}],[11,"print_foreign_item","","",272,{"inputs":[{"name":"state"},{"name":"foreignitem"}],"output":{"name":"result"}}],[11,"print_item","","Pretty-print an item",272,{"inputs":[{"name":"state"},{"name":"item"}],"output":{"name":"result"}}],[11,"print_enum_def","","",272,{"inputs":[{"name":"state"},{"name":"enumdef"},{"name":"generics"},{"name":"ident"},{"name":"span"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_variants","","",272,null],[11,"print_visibility","","",272,{"inputs":[{"name":"state"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_struct","","",272,{"inputs":[{"name":"state"},{"name":"variantdata"},{"name":"generics"},{"name":"ident"},{"name":"span"},{"name":"bool"}],"output":{"name":"result"}}],[11,"print_tt","","This doesn't deserve to be called \"pretty\" printing, but it should be\nmeaning-preserving. A quick hack that might help would be to look at the\nspans embedded in the TTs to decide where to put spaces and newlines.\nBut it'd be better to parse these according to the grammar of the\nappropriate macro, transcribe back into the grammar we just parsed from,\nand then pretty-print the resulting AST nodes (so, e.g., we print\nexpression arguments as expressions). It can be done! I think.",272,{"inputs":[{"name":"state"},{"name":"tokentree"}],"output":{"name":"result"}}],[11,"print_tts","","",272,null],[11,"print_variant","","",272,{"inputs":[{"name":"state"},{"name":"spanned"}],"output":{"name":"result"}}],[11,"print_method_sig","","",272,{"inputs":[{"name":"state"},{"name":"ident"},{"name":"methodsig"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_trait_item","","",272,{"inputs":[{"name":"state"},{"name":"traititem"}],"output":{"name":"result"}}],[11,"print_impl_item","","",272,{"inputs":[{"name":"state"},{"name":"implitem"}],"output":{"name":"result"}}],[11,"print_stmt","","",272,{"inputs":[{"name":"state"},{"name":"spanned"}],"output":{"name":"result"}}],[11,"print_block","","",272,{"inputs":[{"name":"state"},{"name":"block"}],"output":{"name":"result"}}],[11,"print_block_unclosed","","",272,{"inputs":[{"name":"state"},{"name":"block"}],"output":{"name":"result"}}],[11,"print_block_unclosed_indent","","",272,{"inputs":[{"name":"state"},{"name":"block"},{"name":"usize"}],"output":{"name":"result"}}],[11,"print_block_with_attrs","","",272,null],[11,"print_block_maybe_unclosed","","",272,null],[11,"print_if","","",272,{"inputs":[{"name":"state"},{"name":"expr"},{"name":"block"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_if_let","","",272,{"inputs":[{"name":"state"},{"name":"pat"},{"name":"expr"},{"name":"block"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_mac","","",272,{"inputs":[{"name":"state"},{"name":"spanned"},{"name":"delimtoken"}],"output":{"name":"result"}}],[11,"check_expr_bin_needs_paren","","",272,{"inputs":[{"name":"state"},{"name":"expr"},{"name":"spanned"}],"output":{"name":"bool"}}],[11,"print_expr_maybe_paren","","",272,{"inputs":[{"name":"state"},{"name":"expr"}],"output":{"name":"result"}}],[11,"print_expr","","",272,{"inputs":[{"name":"state"},{"name":"expr"}],"output":{"name":"result"}}],[11,"print_local_decl","","",272,{"inputs":[{"name":"state"},{"name":"local"}],"output":{"name":"result"}}],[11,"print_decl","","",272,{"inputs":[{"name":"state"},{"name":"spanned"}],"output":{"name":"result"}}],[11,"print_ident","","",272,{"inputs":[{"name":"state"},{"name":"ident"}],"output":{"name":"result"}}],[11,"print_usize","","",272,{"inputs":[{"name":"state"},{"name":"usize"}],"output":{"name":"result"}}],[11,"print_name","","",272,{"inputs":[{"name":"state"},{"name":"name"}],"output":{"name":"result"}}],[11,"print_for_decl","","",272,{"inputs":[{"name":"state"},{"name":"local"},{"name":"expr"}],"output":{"name":"result"}}],[11,"print_pat","","",272,{"inputs":[{"name":"state"},{"name":"pat"}],"output":{"name":"result"}}],[11,"print_fn","","",272,{"inputs":[{"name":"state"},{"name":"fndecl"},{"name":"unsafety"},{"name":"constness"},{"name":"abi"},{"name":"option"},{"name":"generics"},{"name":"option"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_fn_args","","",272,{"inputs":[{"name":"state"},{"name":"fndecl"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_fn_args_and_ret","","",272,{"inputs":[{"name":"state"},{"name":"fndecl"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_fn_block_args","","",272,{"inputs":[{"name":"state"},{"name":"fndecl"}],"output":{"name":"result"}}],[11,"print_capture_clause","","",272,{"inputs":[{"name":"state"},{"name":"captureclause"}],"output":{"name":"result"}}],[11,"print_bounds","","",272,null],[11,"print_lifetime","","",272,{"inputs":[{"name":"state"},{"name":"lifetime"}],"output":{"name":"result"}}],[11,"print_lifetime_def","","",272,{"inputs":[{"name":"state"},{"name":"lifetimedef"}],"output":{"name":"result"}}],[11,"print_generics","","",272,{"inputs":[{"name":"state"},{"name":"generics"}],"output":{"name":"result"}}],[11,"print_ty_param","","",272,{"inputs":[{"name":"state"},{"name":"typaram"}],"output":{"name":"result"}}],[11,"print_where_clause","","",272,{"inputs":[{"name":"state"},{"name":"whereclause"}],"output":{"name":"result"}}],[11,"print_view_path","","",272,{"inputs":[{"name":"state"},{"name":"spanned"}],"output":{"name":"result"}}],[11,"print_mutability","","",272,{"inputs":[{"name":"state"},{"name":"mutability"}],"output":{"name":"result"}}],[11,"print_mt","","",272,{"inputs":[{"name":"state"},{"name":"mutty"}],"output":{"name":"result"}}],[11,"print_arg","","",272,{"inputs":[{"name":"state"},{"name":"arg"}],"output":{"name":"result"}}],[11,"print_fn_output","","",272,{"inputs":[{"name":"state"},{"name":"fndecl"}],"output":{"name":"result"}}],[11,"print_ty_fn","","",272,{"inputs":[{"name":"state"},{"name":"abi"},{"name":"unsafety"},{"name":"fndecl"},{"name":"option"},{"name":"generics"},{"name":"option"}],"output":{"name":"result"}}],[11,"maybe_print_trailing_comment","","",272,{"inputs":[{"name":"state"},{"name":"span"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_remaining_comments","","",272,{"inputs":[{"name":"state"}],"output":{"name":"result"}}],[11,"print_opt_abi_and_extern_if_nondefault","","",272,{"inputs":[{"name":"state"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_extern_opt_abi","","",272,{"inputs":[{"name":"state"},{"name":"option"}],"output":{"name":"result"}}],[11,"print_fn_header_info","","",272,{"inputs":[{"name":"state"},{"name":"unsafety"},{"name":"constness"},{"name":"abi"},{"name":"visibility"}],"output":{"name":"result"}}],[11,"print_unsafety","","",272,{"inputs":[{"name":"state"},{"name":"unsafety"}],"output":{"name":"result"}}],[14,"if_let_chain!","clippy","Produce a nested chain of if-lets and ifs from the patterns:",null,null],[14,"if_let_chain!","","Produce a nested chain of if-lets and ifs from the patterns:",null,null]],"paths":[[4,"FloatWidth"],[4,"Constant"],[3,"TypePass"],[3,"LetPass"],[3,"UnitCmp"],[3,"CastPass"],[3,"TypeComplexityPass"],[3,"TopLevelRefPass"],[3,"CmpNan"],[3,"FloatCmp"],[3,"CmpOwned"],[3,"ModuloOne"],[3,"PatternPass"],[3,"EqOp"],[3,"BitMask"],[3,"PtrArg"],[3,"NeedlessBool"],[3,"ApproxConstant"],[3,"EtaPass"],[3,"IdentityOp"],[3,"MinMaxPass"],[3,"MutMut"],[3,"UnnecessaryMutPassed"],[3,"LenZero"],[3,"AttrPass"],[3,"CollapsibleIf"],[3,"Unicode"],[3,"ShadowPass"],[3,"StringAdd"],[3,"MethodsPass"],[3,"ReturnPass"],[3,"LifetimePass"],[3,"LoopsPass"],[3,"StepByZero"],[3,"MapClonePass"],[3,"MatchPass"],[3,"Precedence"],[3,"MutexAtomic"],[3,"ZeroDivZeroPass"],[3,"NonSensicalOpenOptions"],[3,"NeedlessFeaturesPass"],[3,"NeedlessUpdatePass"],[3,"NoEffectPass"],[3,"TemporaryAssignmentPass"],[3,"Name"],[3,"Interner"],[3,"RcStr"],[3,"StrInterner"],[3,"SmallVector"],[3,"IntoIter"],[4,"AssocOp"],[4,"Fixity"],[3,"Registry"],[3,"ErrorMetadata"],[3,"ErrorLocation"],[3,"Restrictions"],[4,"PathParsingMode"],[4,"BoundParsingMode"],[4,"TokenType"],[3,"Parser"],[4,"CommentStyle"],[3,"Comment"],[3,"Literal"],[3,"TokenAndSpan"],[3,"StringReader"],[3,"TtReader"],[4,"BinOpToken"],[4,"DelimToken"],[4,"IdentStyle"],[4,"SpecialMacroVar"],[4,"Lit"],[4,"Token"],[4,"Nonterminal"],[4,"Keyword"],[3,"InternedString"],[4,"ObsoleteSyntax"],[3,"ParseSess"],[4,"Annotatable"],[3,"MacEager"],[3,"DummyResult"],[3,"BlockInfo"],[3,"ExtCtxt"],[3,"SyntaxEnv"],[4,"OrderingOp"],[4,"PtrTy"],[3,"Path"],[4,"Ty"],[3,"LifetimeBounds"],[3,"TraitDef"],[4,"StructType"],[3,"PatIdentFinder"],[3,"IdentRenamer"],[3,"PatIdentRenamer"],[3,"MacroExpander"],[3,"ExpansionConfig"],[3,"Marker"],[3,"MacroExterminator"],[4,"ArgumentType"],[4,"SyntaxContext_"],[4,"TokenTree"],[3,"Vec"],[3,"Spanned"],[4,"Option"],[3,"Ident"],[3,"Path"],[3,"Ty"],[3,"Block"],[3,"Generics"],[3,"WhereClause"],[3,"P"],[3,"Arm"],[3,"TtFrame"],[4,"LockstepIterSize"],[4,"TokenTreeOrTokenTreeVec"],[3,"MatcherTtFrame"],[3,"MatcherPos"],[3,"ParserAnyMacro"],[3,"MacroRulesMacroExpander"],[3,"SyntaxContext"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"PathSegment"],[4,"PathParameters"],[3,"AngleBracketedParameterData"],[3,"ParenthesizedParameterData"],[4,"TyParamBound"],[4,"TraitBoundModifier"],[3,"TyParam"],[4,"WherePredicate"],[3,"WhereBoundPredicate"],[3,"WhereRegionPredicate"],[3,"WhereEqPredicate"],[3,"Crate"],[4,"MetaItem_"],[3,"Pat"],[3,"FieldPat"],[4,"BindingMode"],[4,"Pat_"],[4,"Mutability"],[4,"BinOp_"],[4,"UnOp"],[4,"Stmt_"],[4,"MacStmtStyle"],[3,"Local"],[4,"Decl_"],[3,"Field"],[4,"BlockCheckMode"],[4,"UnsafeSource"],[3,"Expr"],[4,"Expr_"],[3,"QSelf"],[4,"CaptureClause"],[3,"Delimited"],[3,"SequenceRepetition"],[4,"KleeneOp"],[3,"Mac_"],[4,"StrStyle"],[4,"Sign"],[4,"LitIntType"],[4,"Lit_"],[3,"MutTy"],[3,"MethodSig"],[3,"TraitItem"],[4,"TraitItem_"],[3,"ImplItem"],[4,"ImplItem_"],[4,"IntTy"],[4,"UintTy"],[4,"FloatTy"],[3,"TypeBinding"],[4,"PrimTy"],[3,"BareFnTy"],[4,"Ty_"],[4,"AsmDialect"],[3,"InlineAsm"],[3,"Arg"],[3,"FnDecl"],[4,"Unsafety"],[4,"Constness"],[4,"ImplPolarity"],[4,"FunctionRetTy"],[4,"ExplicitSelf_"],[3,"Mod"],[3,"ForeignMod"],[3,"EnumDef"],[3,"Variant_"],[4,"PathListItem_"],[4,"ViewPath_"],[4,"AttrStyle"],[3,"AttrId"],[3,"Attribute_"],[3,"TraitRef"],[3,"PolyTraitRef"],[4,"Visibility"],[3,"StructField_"],[4,"StructFieldKind"],[4,"VariantData"],[3,"Item"],[4,"Item_"],[3,"ForeignItem"],[4,"ForeignItem_"],[3,"MacroDef"],[4,"Os"],[4,"Abi"],[4,"Architecture"],[3,"AbiData"],[4,"AbiArchitecture"],[3,"IdRange"],[3,"IdVisitor"],[3,"IdRangeComputingVisitor"],[4,"InlineAttr"],[3,"Stability"],[4,"StabilityLevel"],[3,"Deprecation"],[4,"ReprAttr"],[4,"IntType"],[3,"BytePos"],[3,"CharPos"],[3,"Span"],[3,"Loc"],[3,"LocWithOpt"],[3,"FileMapAndLine"],[3,"FileMapAndBytePos"],[4,"ExpnFormat"],[3,"NameAndSpan"],[3,"ExpnInfo"],[3,"ExpnId"],[3,"LineInfo"],[3,"MultiByteChar"],[3,"FileMap"],[3,"RealFileLoader"],[3,"CodeMap"],[4,"SpanLinesError"],[4,"SpanSnippetError"],[3,"DistinctSources"],[3,"MalformedCodemapPositions"],[3,"Context"],[3,"CfgAttrFolder"],[4,"RenderSpan"],[4,"ColorConfig"],[3,"FatalError"],[3,"ExplicitBug"],[3,"SpanHandler"],[3,"Handler"],[4,"Level"],[3,"EmitterWriter"],[4,"Destination"],[3,"GatedCfg"],[4,"AttributeType"],[4,"AttributeGate"],[3,"Features"],[3,"MacroVisitor"],[3,"PostExpansionVisitor"],[4,"UnstableFeatures"],[3,"OwnedSlice"],[4,"Mode"],[3,"ShowSpanVisitor"],[3,"CrateInjector"],[3,"PreludeInjector"],[3,"TestHarnessGenerator"],[3,"EntryPointCleaner"],[4,"HasTestSignature"],[4,"FnKind"],[4,"Breaks"],[3,"BreakToken"],[3,"BeginToken"],[4,"Token"],[4,"PrintStackBreak"],[3,"PrintStackElem"],[3,"Printer"],[3,"NoAnn"],[3,"CurrentCommentAndLiteral"],[3,"State"]]};
searchIndex['advapi32'] = {"items":[],"paths":[]};
searchIndex['winapi'] = {"items":[],"paths":[]};
searchIndex['zipWith'] = {"items":[[0,"","zipWith","",null,null],[3,"ZipWith","","",null,null],[8,"IntoZipWith","","",null,null],[11,"zip_with","","",0,{"inputs":[{"name":"intozipwith"},{"name":"r"},{"name":"f"}],"output":{"name":"zipwith"}}],[11,"clone","","",1,{"inputs":[{"name":"zipwith"}],"output":{"name":"zipwith"}}],[11,"next","","",1,{"inputs":[{"name":"zipwith"}],"output":{"name":"option"}}]],"paths":[[8,"IntoZipWith"],[3,"ZipWith"]]};
searchIndex['unicode_normalization'] = {"items":[[0,"","unicode_normalization","Unicode character composition and decomposition utilities\nas described in\n[Unicode Standard Annex #15](http://www.unicode.org/reports/tr15/).",null,null],[3,"Decompositions","","External iterator for a string decomposition's characters.",null,null],[3,"Recompositions","","External iterator for a string recomposition's characters.",null,null],[11,"clone","","",0,{"inputs":[{"name":"decompositions"}],"output":{"name":"decompositions"}}],[11,"next","","",0,{"inputs":[{"name":"decompositions"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"clone","","",1,{"inputs":[{"name":"recompositions"}],"output":{"name":"recompositions"}}],[11,"next","","",1,{"inputs":[{"name":"recompositions"}],"output":{"name":"option"}}],[0,"char","","Methods for composing and decomposing characters.",null,null],[5,"decompose_canonical","unicode_normalization::char","Compute canonical Unicode decomposition for character.\nSee [Unicode Standard Annex #15](http://www.unicode.org/reports/tr15/)\nfor more information.",null,{"inputs":[{"name":"char"},{"name":"f"}],"output":null}],[5,"decompose_compatible","","Compute canonical or compatible Unicode decomposition for character.\nSee [Unicode Standard Annex #15](http://www.unicode.org/reports/tr15/)\nfor more information.",null,{"inputs":[{"name":"char"},{"name":"f"}],"output":null}],[5,"compose","","Compose two characters into a single character, if possible.\nSee [Unicode Standard Annex #15](http://www.unicode.org/reports/tr15/)\nfor more information.",null,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"option"}}],[5,"canonical_combining_class","","",null,{"inputs":[{"name":"char"}],"output":{"name":"u8"}}],[17,"UNICODE_VERSION","unicode_normalization","The version of [Unicode](http://www.unicode.org/)\nthat this version of unicode-normalization is based on.",null,null],[8,"UnicodeNormalization","","Methods for iterating over strings while applying Unicode normalizations\nas described in\n[Unicode Standard Annex #15](http://www.unicode.org/reports/tr15/).",null,null],[10,"nfd","","Returns an iterator over the string in Unicode Normalization Form D\n(canonical decomposition).",2,{"inputs":[{"name":"unicodenormalization"}],"output":{"name":"decompositions"}}],[10,"nfkd","","Returns an iterator over the string in Unicode Normalization Form KD\n(compatibility decomposition).",2,{"inputs":[{"name":"unicodenormalization"}],"output":{"name":"decompositions"}}],[10,"nfc","","An Iterator over the string in Unicode Normalization Form C\n(canonical decomposition followed by canonical composition).",2,{"inputs":[{"name":"unicodenormalization"}],"output":{"name":"recompositions"}}],[10,"nfkc","","An Iterator over the string in Unicode Normalization Form KC\n(compatibility decomposition followed by canonical composition).",2,{"inputs":[{"name":"unicodenormalization"}],"output":{"name":"recompositions"}}]],"paths":[[3,"Decompositions"],[3,"Recompositions"],[8,"UnicodeNormalization"]]};
searchIndex['blas_sys'] = {"items":[[0,"","blas_sys","Bindings to the [Basic Linear Algebra Subprograms][1].",null,null],[5,"srotg_","","",null,null],[5,"srotmg_","","",null,null],[5,"srot_","","",null,null],[5,"srotm_","","",null,null],[5,"sswap_","","",null,null],[5,"sscal_","","",null,null],[5,"scopy_","","",null,null],[5,"saxpy_","","",null,null],[5,"sdot_","","",null,null],[5,"sdsdot_","","",null,null],[5,"snrm2_","","",null,null],[5,"scnrm2_","","",null,null],[5,"sasum_","","",null,null],[5,"isamax_","","",null,null],[5,"drotg_","","",null,null],[5,"drotmg_","","",null,null],[5,"drot_","","",null,null],[5,"drotm_","","",null,null],[5,"dswap_","","",null,null],[5,"dscal_","","",null,null],[5,"dcopy_","","",null,null],[5,"daxpy_","","",null,null],[5,"ddot_","","",null,null],[5,"dsdot_","","",null,null],[5,"dnrm2_","","",null,null],[5,"dznrm2_","","",null,null],[5,"dasum_","","",null,null],[5,"idamax_","","",null,null],[5,"crotg_","","",null,null],[5,"csrot_","","",null,null],[5,"cswap_","","",null,null],[5,"cscal_","","",null,null],[5,"csscal_","","",null,null],[5,"ccopy_","","",null,null],[5,"caxpy_","","",null,null],[5,"cdotu_","","",null,null],[5,"cdotc_","","",null,null],[5,"scasum_","","",null,null],[5,"icamax_","","",null,null],[5,"zrotg_","","",null,null],[5,"zdrot_","","",null,null],[5,"zswap_","","",null,null],[5,"zscal_","","",null,null],[5,"zdscal_","","",null,null],[5,"zcopy_","","",null,null],[5,"zaxpy_","","",null,null],[5,"zdotu_","","",null,null],[5,"zdotc_","","",null,null],[5,"dzasum_","","",null,null],[5,"izamax_","","",null,null],[5,"sgemv_","","",null,null],[5,"sgbmv_","","",null,null],[5,"ssymv_","","",null,null],[5,"ssbmv_","","",null,null],[5,"sspmv_","","",null,null],[5,"strmv_","","",null,null],[5,"stbmv_","","",null,null],[5,"stpmv_","","",null,null],[5,"strsv_","","",null,null],[5,"stbsv_","","",null,null],[5,"stpsv_","","",null,null],[5,"sger_","","",null,null],[5,"ssyr_","","",null,null],[5,"sspr_","","",null,null],[5,"ssyr2_","","",null,null],[5,"sspr2_","","",null,null],[5,"dgemv_","","",null,null],[5,"dgbmv_","","",null,null],[5,"dsymv_","","",null,null],[5,"dsbmv_","","",null,null],[5,"dspmv_","","",null,null],[5,"dtrmv_","","",null,null],[5,"dtbmv_","","",null,null],[5,"dtpmv_","","",null,null],[5,"dtrsv_","","",null,null],[5,"dtbsv_","","",null,null],[5,"dtpsv_","","",null,null],[5,"dger_","","",null,null],[5,"dsyr_","","",null,null],[5,"dspr_","","",null,null],[5,"dsyr2_","","",null,null],[5,"dspr2_","","",null,null],[5,"cgemv_","","",null,null],[5,"cgbmv_","","",null,null],[5,"chemv_","","",null,null],[5,"chbmv_","","",null,null],[5,"chpmv_","","",null,null],[5,"ctrmv_","","",null,null],[5,"ctbmv_","","",null,null],[5,"ctpmv_","","",null,null],[5,"ctrsv_","","",null,null],[5,"ctbsv_","","",null,null],[5,"ctpsv_","","",null,null],[5,"cgeru_","","",null,null],[5,"cgerc_","","",null,null],[5,"cher_","","",null,null],[5,"chpr_","","",null,null],[5,"chpr2_","","",null,null],[5,"cher2_","","",null,null],[5,"zgemv_","","",null,null],[5,"zgbmv_","","",null,null],[5,"zhemv_","","",null,null],[5,"zhbmv_","","",null,null],[5,"zhpmv_","","",null,null],[5,"ztrmv_","","",null,null],[5,"ztbmv_","","",null,null],[5,"ztpmv_","","",null,null],[5,"ztrsv_","","",null,null],[5,"ztbsv_","","",null,null],[5,"ztpsv_","","",null,null],[5,"zgeru_","","",null,null],[5,"zgerc_","","",null,null],[5,"zher_","","",null,null],[5,"zhpr_","","",null,null],[5,"zher2_","","",null,null],[5,"zhpr2_","","",null,null],[5,"sgemm_","","",null,null],[5,"ssymm_","","",null,null],[5,"ssyrk_","","",null,null],[5,"ssyr2k_","","",null,null],[5,"strmm_","","",null,null],[5,"strsm_","","",null,null],[5,"dgemm_","","",null,null],[5,"dsymm_","","",null,null],[5,"dsyrk_","","",null,null],[5,"dsyr2k_","","",null,null],[5,"dtrmm_","","",null,null],[5,"dtrsm_","","",null,null],[5,"cgemm_","","",null,null],[5,"csymm_","","",null,null],[5,"chemm_","","",null,null],[5,"csyrk_","","",null,null],[5,"cherk_","","",null,null],[5,"csyr2k_","","",null,null],[5,"cher2k_","","",null,null],[5,"ctrmm_","","",null,null],[5,"ctrsm_","","",null,null],[5,"zgemm_","","",null,null],[5,"zsymm_","","",null,null],[5,"zhemm_","","",null,null],[5,"zsyrk_","","",null,null],[5,"zherk_","","",null,null],[5,"zsyr2k_","","",null,null],[5,"zher2k_","","",null,null],[5,"ztrmm_","","",null,null],[5,"ztrsm_","","",null,null],[6,"complex_double","","",null,null],[6,"complex_float","","",null,null]],"paths":[]};
searchIndex['lapack_sys'] = {"items":[[0,"","lapack_sys","Bindings to the [Linear Algebra PACKage][1].",null,null],[5,"sgetrf_","","",null,null],[5,"dgetrf_","","",null,null],[5,"cgetrf_","","",null,null],[5,"zgetrf_","","",null,null],[5,"sgbtrf_","","",null,null],[5,"dgbtrf_","","",null,null],[5,"cgbtrf_","","",null,null],[5,"zgbtrf_","","",null,null],[5,"sgttrf_","","",null,null],[5,"dgttrf_","","",null,null],[5,"cgttrf_","","",null,null],[5,"zgttrf_","","",null,null],[5,"spotrf_","","",null,null],[5,"dpotrf_","","",null,null],[5,"cpotrf_","","",null,null],[5,"zpotrf_","","",null,null],[5,"spstrf_","","",null,null],[5,"dpstrf_","","",null,null],[5,"cpstrf_","","",null,null],[5,"zpstrf_","","",null,null],[5,"spftrf_","","",null,null],[5,"dpftrf_","","",null,null],[5,"cpftrf_","","",null,null],[5,"zpftrf_","","",null,null],[5,"spptrf_","","",null,null],[5,"dpptrf_","","",null,null],[5,"cpptrf_","","",null,null],[5,"zpptrf_","","",null,null],[5,"spbtrf_","","",null,null],[5,"dpbtrf_","","",null,null],[5,"cpbtrf_","","",null,null],[5,"zpbtrf_","","",null,null],[5,"spttrf_","","",null,null],[5,"dpttrf_","","",null,null],[5,"cpttrf_","","",null,null],[5,"zpttrf_","","",null,null],[5,"ssytrf_","","",null,null],[5,"dsytrf_","","",null,null],[5,"csytrf_","","",null,null],[5,"zsytrf_","","",null,null],[5,"chetrf_","","",null,null],[5,"zhetrf_","","",null,null],[5,"ssptrf_","","",null,null],[5,"dsptrf_","","",null,null],[5,"csptrf_","","",null,null],[5,"zsptrf_","","",null,null],[5,"chptrf_","","",null,null],[5,"zhptrf_","","",null,null],[5,"sgetrs_","","",null,null],[5,"dgetrs_","","",null,null],[5,"cgetrs_","","",null,null],[5,"zgetrs_","","",null,null],[5,"sgbtrs_","","",null,null],[5,"dgbtrs_","","",null,null],[5,"cgbtrs_","","",null,null],[5,"zgbtrs_","","",null,null],[5,"sgttrs_","","",null,null],[5,"dgttrs_","","",null,null],[5,"cgttrs_","","",null,null],[5,"zgttrs_","","",null,null],[5,"spotrs_","","",null,null],[5,"dpotrs_","","",null,null],[5,"cpotrs_","","",null,null],[5,"zpotrs_","","",null,null],[5,"spftrs_","","",null,null],[5,"dpftrs_","","",null,null],[5,"cpftrs_","","",null,null],[5,"zpftrs_","","",null,null],[5,"spptrs_","","",null,null],[5,"dpptrs_","","",null,null],[5,"cpptrs_","","",null,null],[5,"zpptrs_","","",null,null],[5,"spbtrs_","","",null,null],[5,"dpbtrs_","","",null,null],[5,"cpbtrs_","","",null,null],[5,"zpbtrs_","","",null,null],[5,"spttrs_","","",null,null],[5,"dpttrs_","","",null,null],[5,"cpttrs_","","",null,null],[5,"zpttrs_","","",null,null],[5,"ssytrs_","","",null,null],[5,"dsytrs_","","",null,null],[5,"csytrs_","","",null,null],[5,"zsytrs_","","",null,null],[5,"chetrs_","","",null,null],[5,"zhetrs_","","",null,null],[5,"ssptrs_","","",null,null],[5,"dsptrs_","","",null,null],[5,"csptrs_","","",null,null],[5,"zsptrs_","","",null,null],[5,"chptrs_","","",null,null],[5,"zhptrs_","","",null,null],[5,"strtrs_","","",null,null],[5,"dtrtrs_","","",null,null],[5,"ctrtrs_","","",null,null],[5,"ztrtrs_","","",null,null],[5,"stptrs_","","",null,null],[5,"dtptrs_","","",null,null],[5,"ctptrs_","","",null,null],[5,"ztptrs_","","",null,null],[5,"stbtrs_","","",null,null],[5,"dtbtrs_","","",null,null],[5,"ctbtrs_","","",null,null],[5,"ztbtrs_","","",null,null],[5,"sgecon_","","",null,null],[5,"dgecon_","","",null,null],[5,"cgecon_","","",null,null],[5,"zgecon_","","",null,null],[5,"sgbcon_","","",null,null],[5,"dgbcon_","","",null,null],[5,"cgbcon_","","",null,null],[5,"zgbcon_","","",null,null],[5,"sgtcon_","","",null,null],[5,"dgtcon_","","",null,null],[5,"cgtcon_","","",null,null],[5,"zgtcon_","","",null,null],[5,"spocon_","","",null,null],[5,"dpocon_","","",null,null],[5,"cpocon_","","",null,null],[5,"zpocon_","","",null,null],[5,"sppcon_","","",null,null],[5,"dppcon_","","",null,null],[5,"cppcon_","","",null,null],[5,"zppcon_","","",null,null],[5,"spbcon_","","",null,null],[5,"dpbcon_","","",null,null],[5,"cpbcon_","","",null,null],[5,"zpbcon_","","",null,null],[5,"sptcon_","","",null,null],[5,"dptcon_","","",null,null],[5,"cptcon_","","",null,null],[5,"zptcon_","","",null,null],[5,"ssycon_","","",null,null],[5,"dsycon_","","",null,null],[5,"csycon_","","",null,null],[5,"zsycon_","","",null,null],[5,"checon_","","",null,null],[5,"zhecon_","","",null,null],[5,"sspcon_","","",null,null],[5,"dspcon_","","",null,null],[5,"cspcon_","","",null,null],[5,"zspcon_","","",null,null],[5,"chpcon_","","",null,null],[5,"zhpcon_","","",null,null],[5,"strcon_","","",null,null],[5,"dtrcon_","","",null,null],[5,"ctrcon_","","",null,null],[5,"ztrcon_","","",null,null],[5,"stpcon_","","",null,null],[5,"dtpcon_","","",null,null],[5,"ctpcon_","","",null,null],[5,"ztpcon_","","",null,null],[5,"stbcon_","","",null,null],[5,"dtbcon_","","",null,null],[5,"ctbcon_","","",null,null],[5,"ztbcon_","","",null,null],[5,"sgerfs_","","",null,null],[5,"dgerfs_","","",null,null],[5,"cgerfs_","","",null,null],[5,"zgerfs_","","",null,null],[5,"sgerfsx_","","",null,null],[5,"dgerfsx_","","",null,null],[5,"cgerfsx_","","",null,null],[5,"zgerfsx_","","",null,null],[5,"sgbrfs_","","",null,null],[5,"dgbrfs_","","",null,null],[5,"cgbrfs_","","",null,null],[5,"zgbrfs_","","",null,null],[5,"sgbrfsx_","","",null,null],[5,"dgbrfsx_","","",null,null],[5,"cgbrfsx_","","",null,null],[5,"zgbrfsx_","","",null,null],[5,"sgtrfs_","","",null,null],[5,"dgtrfs_","","",null,null],[5,"cgtrfs_","","",null,null],[5,"zgtrfs_","","",null,null],[5,"sporfs_","","",null,null],[5,"dporfs_","","",null,null],[5,"cporfs_","","",null,null],[5,"zporfs_","","",null,null],[5,"sporfsx_","","",null,null],[5,"dporfsx_","","",null,null],[5,"cporfsx_","","",null,null],[5,"zporfsx_","","",null,null],[5,"spprfs_","","",null,null],[5,"dpprfs_","","",null,null],[5,"cpprfs_","","",null,null],[5,"zpprfs_","","",null,null],[5,"spbrfs_","","",null,null],[5,"dpbrfs_","","",null,null],[5,"cpbrfs_","","",null,null],[5,"zpbrfs_","","",null,null],[5,"sptrfs_","","",null,null],[5,"dptrfs_","","",null,null],[5,"cptrfs_","","",null,null],[5,"zptrfs_","","",null,null],[5,"ssyrfs_","","",null,null],[5,"dsyrfs_","","",null,null],[5,"csyrfs_","","",null,null],[5,"zsyrfs_","","",null,null],[5,"ssyrfsx_","","",null,null],[5,"dsyrfsx_","","",null,null],[5,"csyrfsx_","","",null,null],[5,"zsyrfsx_","","",null,null],[5,"cherfs_","","",null,null],[5,"zherfs_","","",null,null],[5,"cherfsx_","","",null,null],[5,"zherfsx_","","",null,null],[5,"ssprfs_","","",null,null],[5,"dsprfs_","","",null,null],[5,"csprfs_","","",null,null],[5,"zsprfs_","","",null,null],[5,"chprfs_","","",null,null],[5,"zhprfs_","","",null,null],[5,"strrfs_","","",null,null],[5,"dtrrfs_","","",null,null],[5,"ctrrfs_","","",null,null],[5,"ztrrfs_","","",null,null],[5,"stprfs_","","",null,null],[5,"dtprfs_","","",null,null],[5,"ctprfs_","","",null,null],[5,"ztprfs_","","",null,null],[5,"stbrfs_","","",null,null],[5,"dtbrfs_","","",null,null],[5,"ctbrfs_","","",null,null],[5,"ztbrfs_","","",null,null],[5,"sgetri_","","",null,null],[5,"dgetri_","","",null,null],[5,"cgetri_","","",null,null],[5,"zgetri_","","",null,null],[5,"spotri_","","",null,null],[5,"dpotri_","","",null,null],[5,"cpotri_","","",null,null],[5,"zpotri_","","",null,null],[5,"spftri_","","",null,null],[5,"dpftri_","","",null,null],[5,"cpftri_","","",null,null],[5,"zpftri_","","",null,null],[5,"spptri_","","",null,null],[5,"dpptri_","","",null,null],[5,"cpptri_","","",null,null],[5,"zpptri_","","",null,null],[5,"ssytri_","","",null,null],[5,"dsytri_","","",null,null],[5,"csytri_","","",null,null],[5,"zsytri_","","",null,null],[5,"chetri_","","",null,null],[5,"zhetri_","","",null,null],[5,"ssptri_","","",null,null],[5,"dsptri_","","",null,null],[5,"csptri_","","",null,null],[5,"zsptri_","","",null,null],[5,"chptri_","","",null,null],[5,"zhptri_","","",null,null],[5,"strtri_","","",null,null],[5,"dtrtri_","","",null,null],[5,"ctrtri_","","",null,null],[5,"ztrtri_","","",null,null],[5,"stftri_","","",null,null],[5,"dtftri_","","",null,null],[5,"ctftri_","","",null,null],[5,"ztftri_","","",null,null],[5,"stptri_","","",null,null],[5,"dtptri_","","",null,null],[5,"ctptri_","","",null,null],[5,"ztptri_","","",null,null],[5,"sgeequ_","","",null,null],[5,"dgeequ_","","",null,null],[5,"cgeequ_","","",null,null],[5,"zgeequ_","","",null,null],[5,"sgeequb_","","",null,null],[5,"dgeequb_","","",null,null],[5,"cgeequb_","","",null,null],[5,"zgeequb_","","",null,null],[5,"sgbequ_","","",null,null],[5,"dgbequ_","","",null,null],[5,"cgbequ_","","",null,null],[5,"zgbequ_","","",null,null],[5,"sgbequb_","","",null,null],[5,"dgbequb_","","",null,null],[5,"cgbequb_","","",null,null],[5,"zgbequb_","","",null,null],[5,"spoequ_","","",null,null],[5,"dpoequ_","","",null,null],[5,"cpoequ_","","",null,null],[5,"zpoequ_","","",null,null],[5,"spoequb_","","",null,null],[5,"dpoequb_","","",null,null],[5,"cpoequb_","","",null,null],[5,"zpoequb_","","",null,null],[5,"sppequ_","","",null,null],[5,"dppequ_","","",null,null],[5,"cppequ_","","",null,null],[5,"zppequ_","","",null,null],[5,"spbequ_","","",null,null],[5,"dpbequ_","","",null,null],[5,"cpbequ_","","",null,null],[5,"zpbequ_","","",null,null],[5,"ssyequb_","","",null,null],[5,"dsyequb_","","",null,null],[5,"csyequb_","","",null,null],[5,"zsyequb_","","",null,null],[5,"cheequb_","","",null,null],[5,"zheequb_","","",null,null],[5,"sgesv_","","",null,null],[5,"dgesv_","","",null,null],[5,"cgesv_","","",null,null],[5,"zgesv_","","",null,null],[5,"dsgesv_","","",null,null],[5,"zcgesv_","","",null,null],[5,"sgesvx_","","",null,null],[5,"dgesvx_","","",null,null],[5,"cgesvx_","","",null,null],[5,"zgesvx_","","",null,null],[5,"sgesvxx_","","",null,null],[5,"dgesvxx_","","",null,null],[5,"cgesvxx_","","",null,null],[5,"zgesvxx_","","",null,null],[5,"sgbsv_","","",null,null],[5,"dgbsv_","","",null,null],[5,"cgbsv_","","",null,null],[5,"zgbsv_","","",null,null],[5,"sgbsvx_","","",null,null],[5,"dgbsvx_","","",null,null],[5,"cgbsvx_","","",null,null],[5,"zgbsvx_","","",null,null],[5,"sgbsvxx_","","",null,null],[5,"dgbsvxx_","","",null,null],[5,"cgbsvxx_","","",null,null],[5,"zgbsvxx_","","",null,null],[5,"sgtsv_","","",null,null],[5,"dgtsv_","","",null,null],[5,"cgtsv_","","",null,null],[5,"zgtsv_","","",null,null],[5,"sgtsvx_","","",null,null],[5,"dgtsvx_","","",null,null],[5,"cgtsvx_","","",null,null],[5,"zgtsvx_","","",null,null],[5,"sposv_","","",null,null],[5,"dposv_","","",null,null],[5,"cposv_","","",null,null],[5,"zposv_","","",null,null],[5,"dsposv_","","",null,null],[5,"zcposv_","","",null,null],[5,"sposvx_","","",null,null],[5,"dposvx_","","",null,null],[5,"cposvx_","","",null,null],[5,"zposvx_","","",null,null],[5,"sposvxx_","","",null,null],[5,"dposvxx_","","",null,null],[5,"cposvxx_","","",null,null],[5,"zposvxx_","","",null,null],[5,"sppsv_","","",null,null],[5,"dppsv_","","",null,null],[5,"cppsv_","","",null,null],[5,"zppsv_","","",null,null],[5,"sppsvx_","","",null,null],[5,"dppsvx_","","",null,null],[5,"cppsvx_","","",null,null],[5,"zppsvx_","","",null,null],[5,"spbsv_","","",null,null],[5,"dpbsv_","","",null,null],[5,"cpbsv_","","",null,null],[5,"zpbsv_","","",null,null],[5,"spbsvx_","","",null,null],[5,"dpbsvx_","","",null,null],[5,"cpbsvx_","","",null,null],[5,"zpbsvx_","","",null,null],[5,"sptsv_","","",null,null],[5,"dptsv_","","",null,null],[5,"cptsv_","","",null,null],[5,"zptsv_","","",null,null],[5,"sptsvx_","","",null,null],[5,"dptsvx_","","",null,null],[5,"cptsvx_","","",null,null],[5,"zptsvx_","","",null,null],[5,"ssysv_","","",null,null],[5,"dsysv_","","",null,null],[5,"csysv_","","",null,null],[5,"zsysv_","","",null,null],[5,"ssysvx_","","",null,null],[5,"dsysvx_","","",null,null],[5,"csysvx_","","",null,null],[5,"zsysvx_","","",null,null],[5,"dsysvxx_","","",null,null],[5,"ssysvxx_","","",null,null],[5,"csysvxx_","","",null,null],[5,"zsysvxx_","","",null,null],[5,"chesv_","","",null,null],[5,"zhesv_","","",null,null],[5,"chesvx_","","",null,null],[5,"zhesvx_","","",null,null],[5,"chesvxx_","","",null,null],[5,"zhesvxx_","","",null,null],[5,"sspsv_","","",null,null],[5,"dspsv_","","",null,null],[5,"cspsv_","","",null,null],[5,"zspsv_","","",null,null],[5,"sspsvx_","","",null,null],[5,"dspsvx_","","",null,null],[5,"cspsvx_","","",null,null],[5,"zspsvx_","","",null,null],[5,"chpsv_","","",null,null],[5,"zhpsv_","","",null,null],[5,"chpsvx_","","",null,null],[5,"zhpsvx_","","",null,null],[5,"sgeqrf_","","",null,null],[5,"dgeqrf_","","",null,null],[5,"cgeqrf_","","",null,null],[5,"zgeqrf_","","",null,null],[5,"sgeqpf_","","",null,null],[5,"dgeqpf_","","",null,null],[5,"cgeqpf_","","",null,null],[5,"zgeqpf_","","",null,null],[5,"sgeqp3_","","",null,null],[5,"dgeqp3_","","",null,null],[5,"cgeqp3_","","",null,null],[5,"zgeqp3_","","",null,null],[5,"sorgqr_","","",null,null],[5,"dorgqr_","","",null,null],[5,"sormqr_","","",null,null],[5,"dormqr_","","",null,null],[5,"cungqr_","","",null,null],[5,"zungqr_","","",null,null],[5,"cunmqr_","","",null,null],[5,"zunmqr_","","",null,null],[5,"sgelqf_","","",null,null],[5,"dgelqf_","","",null,null],[5,"cgelqf_","","",null,null],[5,"zgelqf_","","",null,null],[5,"sorglq_","","",null,null],[5,"dorglq_","","",null,null],[5,"sormlq_","","",null,null],[5,"dormlq_","","",null,null],[5,"cunglq_","","",null,null],[5,"zunglq_","","",null,null],[5,"cunmlq_","","",null,null],[5,"zunmlq_","","",null,null],[5,"sgeqlf_","","",null,null],[5,"dgeqlf_","","",null,null],[5,"cgeqlf_","","",null,null],[5,"zgeqlf_","","",null,null],[5,"sorgql_","","",null,null],[5,"dorgql_","","",null,null],[5,"cungql_","","",null,null],[5,"zungql_","","",null,null],[5,"sormql_","","",null,null],[5,"dormql_","","",null,null],[5,"cunmql_","","",null,null],[5,"zunmql_","","",null,null],[5,"sgerqf_","","",null,null],[5,"dgerqf_","","",null,null],[5,"cgerqf_","","",null,null],[5,"zgerqf_","","",null,null],[5,"sorgrq_","","",null,null],[5,"dorgrq_","","",null,null],[5,"cungrq_","","",null,null],[5,"zungrq_","","",null,null],[5,"sormrq_","","",null,null],[5,"dormrq_","","",null,null],[5,"cunmrq_","","",null,null],[5,"zunmrq_","","",null,null],[5,"stzrzf_","","",null,null],[5,"dtzrzf_","","",null,null],[5,"ctzrzf_","","",null,null],[5,"ztzrzf_","","",null,null],[5,"sormrz_","","",null,null],[5,"dormrz_","","",null,null],[5,"cunmrz_","","",null,null],[5,"zunmrz_","","",null,null],[5,"sggqrf_","","",null,null],[5,"dggqrf_","","",null,null],[5,"cggqrf_","","",null,null],[5,"zggqrf_","","",null,null],[5,"sggrqf_","","",null,null],[5,"dggrqf_","","",null,null],[5,"cggrqf_","","",null,null],[5,"zggrqf_","","",null,null],[5,"sgebrd_","","",null,null],[5,"dgebrd_","","",null,null],[5,"cgebrd_","","",null,null],[5,"zgebrd_","","",null,null],[5,"sgbbrd_","","",null,null],[5,"dgbbrd_","","",null,null],[5,"cgbbrd_","","",null,null],[5,"zgbbrd_","","",null,null],[5,"sorgbr_","","",null,null],[5,"dorgbr_","","",null,null],[5,"sormbr_","","",null,null],[5,"dormbr_","","",null,null],[5,"cungbr_","","",null,null],[5,"zungbr_","","",null,null],[5,"cunmbr_","","",null,null],[5,"zunmbr_","","",null,null],[5,"sbdsqr_","","",null,null],[5,"dbdsqr_","","",null,null],[5,"cbdsqr_","","",null,null],[5,"zbdsqr_","","",null,null],[5,"sbdsdc_","","",null,null],[5,"dbdsdc_","","",null,null],[5,"ssytrd_","","",null,null],[5,"dsytrd_","","",null,null],[5,"sorgtr_","","",null,null],[5,"dorgtr_","","",null,null],[5,"sormtr_","","",null,null],[5,"dormtr_","","",null,null],[5,"chetrd_","","",null,null],[5,"zhetrd_","","",null,null],[5,"cungtr_","","",null,null],[5,"zungtr_","","",null,null],[5,"cunmtr_","","",null,null],[5,"zunmtr_","","",null,null],[5,"ssptrd_","","",null,null],[5,"dsptrd_","","",null,null],[5,"sopgtr_","","",null,null],[5,"dopgtr_","","",null,null],[5,"sopmtr_","","",null,null],[5,"dopmtr_","","",null,null],[5,"chptrd_","","",null,null],[5,"zhptrd_","","",null,null],[5,"cupgtr_","","",null,null],[5,"zupgtr_","","",null,null],[5,"cupmtr_","","",null,null],[5,"zupmtr_","","",null,null],[5,"ssbtrd_","","",null,null],[5,"dsbtrd_","","",null,null],[5,"chbtrd_","","",null,null],[5,"zhbtrd_","","",null,null],[5,"ssterf_","","",null,null],[5,"dsterf_","","",null,null],[5,"ssteqr_","","",null,null],[5,"dsteqr_","","",null,null],[5,"csteqr_","","",null,null],[5,"zsteqr_","","",null,null],[5,"sstemr_","","",null,null],[5,"dstemr_","","",null,null],[5,"cstemr_","","",null,null],[5,"zstemr_","","",null,null],[5,"sstedc_","","",null,null],[5,"dstedc_","","",null,null],[5,"cstedc_","","",null,null],[5,"zstedc_","","",null,null],[5,"sstegr_","","",null,null],[5,"dstegr_","","",null,null],[5,"cstegr_","","",null,null],[5,"zstegr_","","",null,null],[5,"spteqr_","","",null,null],[5,"dpteqr_","","",null,null],[5,"cpteqr_","","",null,null],[5,"zpteqr_","","",null,null],[5,"sstebz_","","",null,null],[5,"dstebz_","","",null,null],[5,"sstein_","","",null,null],[5,"dstein_","","",null,null],[5,"cstein_","","",null,null],[5,"zstein_","","",null,null],[5,"sdisna_","","",null,null],[5,"ddisna_","","",null,null],[5,"ssygst_","","",null,null],[5,"dsygst_","","",null,null],[5,"chegst_","","",null,null],[5,"zhegst_","","",null,null],[5,"sspgst_","","",null,null],[5,"dspgst_","","",null,null],[5,"chpgst_","","",null,null],[5,"zhpgst_","","",null,null],[5,"ssbgst_","","",null,null],[5,"dsbgst_","","",null,null],[5,"chbgst_","","",null,null],[5,"zhbgst_","","",null,null],[5,"spbstf_","","",null,null],[5,"dpbstf_","","",null,null],[5,"cpbstf_","","",null,null],[5,"zpbstf_","","",null,null],[5,"sgehrd_","","",null,null],[5,"dgehrd_","","",null,null],[5,"cgehrd_","","",null,null],[5,"zgehrd_","","",null,null],[5,"sorghr_","","",null,null],[5,"dorghr_","","",null,null],[5,"sormhr_","","",null,null],[5,"dormhr_","","",null,null],[5,"cunghr_","","",null,null],[5,"zunghr_","","",null,null],[5,"cunmhr_","","",null,null],[5,"zunmhr_","","",null,null],[5,"sgebal_","","",null,null],[5,"dgebal_","","",null,null],[5,"cgebal_","","",null,null],[5,"zgebal_","","",null,null],[5,"sgebak_","","",null,null],[5,"dgebak_","","",null,null],[5,"cgebak_","","",null,null],[5,"zgebak_","","",null,null],[5,"shseqr_","","",null,null],[5,"dhseqr_","","",null,null],[5,"chseqr_","","",null,null],[5,"zhseqr_","","",null,null],[5,"shsein_","","",null,null],[5,"dhsein_","","",null,null],[5,"chsein_","","",null,null],[5,"zhsein_","","",null,null],[5,"strevc_","","",null,null],[5,"dtrevc_","","",null,null],[5,"ctrevc_","","",null,null],[5,"ztrevc_","","",null,null],[5,"strsna_","","",null,null],[5,"dtrsna_","","",null,null],[5,"ctrsna_","","",null,null],[5,"ztrsna_","","",null,null],[5,"strexc_","","",null,null],[5,"dtrexc_","","",null,null],[5,"ctrexc_","","",null,null],[5,"ztrexc_","","",null,null],[5,"strsen_","","",null,null],[5,"dtrsen_","","",null,null],[5,"ctrsen_","","",null,null],[5,"ztrsen_","","",null,null],[5,"strsyl_","","",null,null],[5,"dtrsyl_","","",null,null],[5,"ctrsyl_","","",null,null],[5,"ztrsyl_","","",null,null],[5,"sgghrd_","","",null,null],[5,"dgghrd_","","",null,null],[5,"cgghrd_","","",null,null],[5,"zgghrd_","","",null,null],[5,"sggbal_","","",null,null],[5,"dggbal_","","",null,null],[5,"cggbal_","","",null,null],[5,"zggbal_","","",null,null],[5,"sggbak_","","",null,null],[5,"dggbak_","","",null,null],[5,"cggbak_","","",null,null],[5,"zggbak_","","",null,null],[5,"shgeqz_","","",null,null],[5,"dhgeqz_","","",null,null],[5,"chgeqz_","","",null,null],[5,"zhgeqz_","","",null,null],[5,"stgevc_","","",null,null],[5,"dtgevc_","","",null,null],[5,"ctgevc_","","",null,null],[5,"ztgevc_","","",null,null],[5,"stgexc_","","",null,null],[5,"dtgexc_","","",null,null],[5,"ctgexc_","","",null,null],[5,"ztgexc_","","",null,null],[5,"stgsen_","","",null,null],[5,"dtgsen_","","",null,null],[5,"ctgsen_","","",null,null],[5,"ztgsen_","","",null,null],[5,"stgsyl_","","",null,null],[5,"dtgsyl_","","",null,null],[5,"ctgsyl_","","",null,null],[5,"ztgsyl_","","",null,null],[5,"stgsna_","","",null,null],[5,"dtgsna_","","",null,null],[5,"ctgsna_","","",null,null],[5,"ztgsna_","","",null,null],[5,"sggsvp_","","",null,null],[5,"dggsvp_","","",null,null],[5,"cggsvp_","","",null,null],[5,"zggsvp_","","",null,null],[5,"stgsja_","","",null,null],[5,"dtgsja_","","",null,null],[5,"ctgsja_","","",null,null],[5,"ztgsja_","","",null,null],[5,"sgels_","","",null,null],[5,"dgels_","","",null,null],[5,"cgels_","","",null,null],[5,"zgels_","","",null,null],[5,"sgelsy_","","",null,null],[5,"dgelsy_","","",null,null],[5,"cgelsy_","","",null,null],[5,"zgelsy_","","",null,null],[5,"sgelss_","","",null,null],[5,"dgelss_","","",null,null],[5,"cgelss_","","",null,null],[5,"zgelss_","","",null,null],[5,"sgelsd_","","",null,null],[5,"dgelsd_","","",null,null],[5,"cgelsd_","","",null,null],[5,"zgelsd_","","",null,null],[5,"sgglse_","","",null,null],[5,"dgglse_","","",null,null],[5,"cgglse_","","",null,null],[5,"zgglse_","","",null,null],[5,"sggglm_","","",null,null],[5,"dggglm_","","",null,null],[5,"cggglm_","","",null,null],[5,"zggglm_","","",null,null],[5,"ssyev_","","",null,null],[5,"dsyev_","","",null,null],[5,"cheev_","","",null,null],[5,"zheev_","","",null,null],[5,"ssyevd_","","",null,null],[5,"dsyevd_","","",null,null],[5,"cheevd_","","",null,null],[5,"zheevd_","","",null,null],[5,"ssyevx_","","",null,null],[5,"dsyevx_","","",null,null],[5,"cheevx_","","",null,null],[5,"zheevx_","","",null,null],[5,"ssyevr_","","",null,null],[5,"dsyevr_","","",null,null],[5,"cheevr_","","",null,null],[5,"zheevr_","","",null,null],[5,"sspev_","","",null,null],[5,"dspev_","","",null,null],[5,"chpev_","","",null,null],[5,"zhpev_","","",null,null],[5,"sspevd_","","",null,null],[5,"dspevd_","","",null,null],[5,"chpevd_","","",null,null],[5,"zhpevd_","","",null,null],[5,"sspevx_","","",null,null],[5,"dspevx_","","",null,null],[5,"chpevx_","","",null,null],[5,"zhpevx_","","",null,null],[5,"ssbev_","","",null,null],[5,"dsbev_","","",null,null],[5,"chbev_","","",null,null],[5,"zhbev_","","",null,null],[5,"ssbevd_","","",null,null],[5,"dsbevd_","","",null,null],[5,"chbevd_","","",null,null],[5,"zhbevd_","","",null,null],[5,"ssbevx_","","",null,null],[5,"dsbevx_","","",null,null],[5,"chbevx_","","",null,null],[5,"zhbevx_","","",null,null],[5,"sstev_","","",null,null],[5,"dstev_","","",null,null],[5,"sstevd_","","",null,null],[5,"dstevd_","","",null,null],[5,"sstevx_","","",null,null],[5,"dstevx_","","",null,null],[5,"sstevr_","","",null,null],[5,"dstevr_","","",null,null],[5,"sgees_","","",null,null],[5,"dgees_","","",null,null],[5,"cgees_","","",null,null],[5,"zgees_","","",null,null],[5,"sgeesx_","","",null,null],[5,"dgeesx_","","",null,null],[5,"cgeesx_","","",null,null],[5,"zgeesx_","","",null,null],[5,"sgeev_","","",null,null],[5,"dgeev_","","",null,null],[5,"cgeev_","","",null,null],[5,"zgeev_","","",null,null],[5,"sgeevx_","","",null,null],[5,"dgeevx_","","",null,null],[5,"cgeevx_","","",null,null],[5,"zgeevx_","","",null,null],[5,"sgesvd_","","",null,null],[5,"dgesvd_","","",null,null],[5,"cgesvd_","","",null,null],[5,"zgesvd_","","",null,null],[5,"sgesdd_","","",null,null],[5,"dgesdd_","","",null,null],[5,"cgesdd_","","",null,null],[5,"zgesdd_","","",null,null],[5,"dgejsv_","","",null,null],[5,"sgejsv_","","",null,null],[5,"dgesvj_","","",null,null],[5,"sgesvj_","","",null,null],[5,"sggsvd_","","",null,null],[5,"dggsvd_","","",null,null],[5,"cggsvd_","","",null,null],[5,"zggsvd_","","",null,null],[5,"ssygv_","","",null,null],[5,"dsygv_","","",null,null],[5,"chegv_","","",null,null],[5,"zhegv_","","",null,null],[5,"ssygvd_","","",null,null],[5,"dsygvd_","","",null,null],[5,"chegvd_","","",null,null],[5,"zhegvd_","","",null,null],[5,"ssygvx_","","",null,null],[5,"dsygvx_","","",null,null],[5,"chegvx_","","",null,null],[5,"zhegvx_","","",null,null],[5,"sspgv_","","",null,null],[5,"dspgv_","","",null,null],[5,"chpgv_","","",null,null],[5,"zhpgv_","","",null,null],[5,"sspgvd_","","",null,null],[5,"dspgvd_","","",null,null],[5,"chpgvd_","","",null,null],[5,"zhpgvd_","","",null,null],[5,"sspgvx_","","",null,null],[5,"dspgvx_","","",null,null],[5,"chpgvx_","","",null,null],[5,"zhpgvx_","","",null,null],[5,"ssbgv_","","",null,null],[5,"dsbgv_","","",null,null],[5,"chbgv_","","",null,null],[5,"zhbgv_","","",null,null],[5,"ssbgvd_","","",null,null],[5,"dsbgvd_","","",null,null],[5,"chbgvd_","","",null,null],[5,"zhbgvd_","","",null,null],[5,"ssbgvx_","","",null,null],[5,"dsbgvx_","","",null,null],[5,"chbgvx_","","",null,null],[5,"zhbgvx_","","",null,null],[5,"sgges_","","",null,null],[5,"dgges_","","",null,null],[5,"cgges_","","",null,null],[5,"zgges_","","",null,null],[5,"sggesx_","","",null,null],[5,"dggesx_","","",null,null],[5,"cggesx_","","",null,null],[5,"zggesx_","","",null,null],[5,"sggev_","","",null,null],[5,"dggev_","","",null,null],[5,"cggev_","","",null,null],[5,"zggev_","","",null,null],[5,"sggevx_","","",null,null],[5,"dggevx_","","",null,null],[5,"cggevx_","","",null,null],[5,"zggevx_","","",null,null],[5,"ssfrk_","","",null,null],[5,"dsfrk_","","",null,null],[5,"chfrk_","","",null,null],[5,"zhfrk_","","",null,null],[5,"stfsm_","","",null,null],[5,"dtfsm_","","",null,null],[5,"ctfsm_","","",null,null],[5,"ztfsm_","","",null,null],[5,"stfttp_","","",null,null],[5,"dtfttp_","","",null,null],[5,"ctfttp_","","",null,null],[5,"ztfttp_","","",null,null],[5,"stfttr_","","",null,null],[5,"dtfttr_","","",null,null],[5,"ctfttr_","","",null,null],[5,"ztfttr_","","",null,null],[5,"stpttf_","","",null,null],[5,"dtpttf_","","",null,null],[5,"ctpttf_","","",null,null],[5,"ztpttf_","","",null,null],[5,"stpttr_","","",null,null],[5,"dtpttr_","","",null,null],[5,"ctpttr_","","",null,null],[5,"ztpttr_","","",null,null],[5,"strttf_","","",null,null],[5,"dtrttf_","","",null,null],[5,"ctrttf_","","",null,null],[5,"ztrttf_","","",null,null],[5,"strttp_","","",null,null],[5,"dtrttp_","","",null,null],[5,"ctrttp_","","",null,null],[5,"ztrttp_","","",null,null],[5,"sgeqrfp_","","",null,null],[5,"dgeqrfp_","","",null,null],[5,"cgeqrfp_","","",null,null],[5,"zgeqrfp_","","",null,null],[5,"clacgv_","","",null,null],[5,"zlacgv_","","",null,null],[5,"slarnv_","","",null,null],[5,"dlarnv_","","",null,null],[5,"clarnv_","","",null,null],[5,"zlarnv_","","",null,null],[5,"sgeqr2_","","",null,null],[5,"dgeqr2_","","",null,null],[5,"cgeqr2_","","",null,null],[5,"zgeqr2_","","",null,null],[5,"slacn2_","","",null,null],[5,"dlacn2_","","",null,null],[5,"clacn2_","","",null,null],[5,"zlacn2_","","",null,null],[5,"slacpy_","","",null,null],[5,"dlacpy_","","",null,null],[5,"clacpy_","","",null,null],[5,"zlacpy_","","",null,null],[5,"clacp2_","","",null,null],[5,"zlacp2_","","",null,null],[5,"sgetf2_","","",null,null],[5,"dgetf2_","","",null,null],[5,"cgetf2_","","",null,null],[5,"zgetf2_","","",null,null],[5,"slaswp_","","",null,null],[5,"dlaswp_","","",null,null],[5,"claswp_","","",null,null],[5,"zlaswp_","","",null,null],[5,"slange_","","",null,null],[5,"dlange_","","",null,null],[5,"clange_","","",null,null],[5,"zlange_","","",null,null],[5,"clanhe_","","",null,null],[5,"zlanhe_","","",null,null],[5,"slansy_","","",null,null],[5,"dlansy_","","",null,null],[5,"clansy_","","",null,null],[5,"zlansy_","","",null,null],[5,"slantr_","","",null,null],[5,"dlantr_","","",null,null],[5,"clantr_","","",null,null],[5,"zlantr_","","",null,null],[5,"slamch_","","",null,null],[5,"dlamch_","","",null,null],[5,"sgelq2_","","",null,null],[5,"dgelq2_","","",null,null],[5,"cgelq2_","","",null,null],[5,"zgelq2_","","",null,null],[5,"slarfb_","","",null,null],[5,"dlarfb_","","",null,null],[5,"clarfb_","","",null,null],[5,"zlarfb_","","",null,null],[5,"slarfg_","","",null,null],[5,"dlarfg_","","",null,null],[5,"clarfg_","","",null,null],[5,"zlarfg_","","",null,null],[5,"slarft_","","",null,null],[5,"dlarft_","","",null,null],[5,"clarft_","","",null,null],[5,"zlarft_","","",null,null],[5,"slarfx_","","",null,null],[5,"dlarfx_","","",null,null],[5,"clarfx_","","",null,null],[5,"zlarfx_","","",null,null],[5,"slatms_","","",null,null],[5,"dlatms_","","",null,null],[5,"clatms_","","",null,null],[5,"zlatms_","","",null,null],[5,"dlag2s_","","",null,null],[5,"slag2d_","","",null,null],[5,"zlag2c_","","",null,null],[5,"clag2z_","","",null,null],[5,"slauum_","","",null,null],[5,"dlauum_","","",null,null],[5,"clauum_","","",null,null],[5,"zlauum_","","",null,null],[5,"slagge_","","",null,null],[5,"dlagge_","","",null,null],[5,"clagge_","","",null,null],[5,"zlagge_","","",null,null],[5,"slaset_","","",null,null],[5,"dlaset_","","",null,null],[5,"claset_","","",null,null],[5,"zlaset_","","",null,null],[5,"slasrt_","","",null,null],[5,"dlasrt_","","",null,null],[5,"claghe_","","",null,null],[5,"zlaghe_","","",null,null],[5,"slagsy_","","",null,null],[5,"dlagsy_","","",null,null],[5,"clagsy_","","",null,null],[5,"zlagsy_","","",null,null],[5,"slapmr_","","",null,null],[5,"dlapmr_","","",null,null],[5,"clapmr_","","",null,null],[5,"zlapmr_","","",null,null],[5,"slapy2_","","",null,null],[5,"dlapy2_","","",null,null],[5,"slapy3_","","",null,null],[5,"dlapy3_","","",null,null],[5,"slartgp_","","",null,null],[5,"dlartgp_","","",null,null],[5,"slartgs_","","",null,null],[5,"dlartgs_","","",null,null],[5,"sbbcsd_","","",null,null],[5,"dbbcsd_","","",null,null],[5,"cbbcsd_","","",null,null],[5,"zbbcsd_","","",null,null],[5,"cheswapr_","","",null,null],[5,"zheswapr_","","",null,null],[5,"chetri2_","","",null,null],[5,"zhetri2_","","",null,null],[5,"chetri2x_","","",null,null],[5,"zhetri2x_","","",null,null],[5,"chetrs2_","","",null,null],[5,"zhetrs2_","","",null,null],[5,"ssyconv_","","",null,null],[5,"dsyconv_","","",null,null],[5,"csyconv_","","",null,null],[5,"zsyconv_","","",null,null],[5,"ssyswapr_","","",null,null],[5,"dsyswapr_","","",null,null],[5,"csyswapr_","","",null,null],[5,"zsyswapr_","","",null,null],[5,"ssytri2_","","",null,null],[5,"dsytri2_","","",null,null],[5,"csytri2_","","",null,null],[5,"zsytri2_","","",null,null],[5,"ssytri2x_","","",null,null],[5,"dsytri2x_","","",null,null],[5,"csytri2x_","","",null,null],[5,"zsytri2x_","","",null,null],[5,"ssytrs2_","","",null,null],[5,"dsytrs2_","","",null,null],[5,"csytrs2_","","",null,null],[5,"zsytrs2_","","",null,null],[5,"cunbdb_","","",null,null],[5,"zunbdb_","","",null,null],[5,"cuncsd_","","",null,null],[5,"zuncsd_","","",null,null],[5,"sorbdb_","","",null,null],[5,"dorbdb_","","",null,null],[5,"sorcsd_","","",null,null],[5,"dorcsd_","","",null,null],[5,"sgemqrt_","","",null,null],[5,"dgemqrt_","","",null,null],[5,"cgemqrt_","","",null,null],[5,"zgemqrt_","","",null,null],[5,"sgeqrt_","","",null,null],[5,"dgeqrt_","","",null,null],[5,"cgeqrt_","","",null,null],[5,"zgeqrt_","","",null,null],[5,"sgeqrt2_","","",null,null],[5,"dgeqrt2_","","",null,null],[5,"cgeqrt2_","","",null,null],[5,"zgeqrt2_","","",null,null],[5,"sgeqrt3_","","",null,null],[5,"dgeqrt3_","","",null,null],[5,"cgeqrt3_","","",null,null],[5,"zgeqrt3_","","",null,null],[5,"stpmqrt_","","",null,null],[5,"dtpmqrt_","","",null,null],[5,"ctpmqrt_","","",null,null],[5,"ztpmqrt_","","",null,null],[5,"stpqrt_","","",null,null],[5,"dtpqrt_","","",null,null],[5,"ctpqrt_","","",null,null],[5,"ztpqrt_","","",null,null],[5,"stpqrt2_","","",null,null],[5,"dtpqrt2_","","",null,null],[5,"ctpqrt2_","","",null,null],[5,"ztpqrt2_","","",null,null],[5,"stprfb_","","",null,null],[5,"dtprfb_","","",null,null],[5,"ctprfb_","","",null,null],[5,"ztprfb_","","",null,null],[5,"ssysv_rook_","","",null,null],[5,"dsysv_rook_","","",null,null],[5,"csysv_rook_","","",null,null],[5,"zsysv_rook_","","",null,null],[5,"csyr_","","",null,null],[5,"zsyr_","","",null,null],[5,"ilaver_","","",null,null],[6,"complex_double","","",null,null],[6,"complex_float","","",null,null],[6,"LAPACK_S_SELECT2","","",null,null],[6,"LAPACK_S_SELECT3","","",null,null],[6,"LAPACK_D_SELECT2","","",null,null],[6,"LAPACK_D_SELECT3","","",null,null],[6,"LAPACK_C_SELECT1","","",null,null],[6,"LAPACK_C_SELECT2","","",null,null],[6,"LAPACK_Z_SELECT1","","",null,null],[6,"LAPACK_Z_SELECT2","","",null,null]],"paths":[]};
searchIndex['libc'] = {"items":[[0,"","libc","Crate docs",null,null],[3,"utimbuf","","",null,null],[12,"actime","","",0,null],[12,"modtime","","",0,null],[3,"timeval","","",null,null],[12,"tv_sec","","",1,null],[12,"tv_usec","","",1,null],[3,"timespec","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_nsec","","",2,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",3,null],[12,"rlim_max","","",3,null],[3,"rusage","","",null,null],[12,"ru_utime","","",4,null],[12,"ru_stime","","",4,null],[12,"ru_maxrss","","",4,null],[12,"ru_ixrss","","",4,null],[12,"ru_idrss","","",4,null],[12,"ru_isrss","","",4,null],[12,"ru_minflt","","",4,null],[12,"ru_majflt","","",4,null],[12,"ru_nswap","","",4,null],[12,"ru_inblock","","",4,null],[12,"ru_oublock","","",4,null],[12,"ru_msgsnd","","",4,null],[12,"ru_msgrcv","","",4,null],[12,"ru_nsignals","","",4,null],[12,"ru_nvcsw","","",4,null],[12,"ru_nivcsw","","",4,null],[3,"in_addr","","",null,null],[12,"s_addr","","",5,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",6,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",7,null],[12,"imr_interface","","",7,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",8,null],[12,"ipv6mr_interface","","",8,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",9,null],[12,"dli_fbase","","",9,null],[12,"dli_sname","","",9,null],[12,"dli_saddr","","",9,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",10,null],[12,"sa_data","","",10,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",11,null],[12,"sin_port","","",11,null],[12,"sin_addr","","",11,null],[12,"sin_zero","","",11,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",12,null],[12,"sin6_port","","",12,null],[12,"sin6_flowinfo","","",12,null],[12,"sin6_addr","","",12,null],[12,"sin6_scope_id","","",12,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",13,null],[12,"sun_path","","",13,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",14,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",15,null],[12,"ai_family","","",15,null],[12,"ai_socktype","","",15,null],[12,"ai_protocol","","",15,null],[12,"ai_addrlen","","",15,null],[12,"ai_addr","","",15,null],[12,"ai_canonname","","",15,null],[12,"ai_next","","",15,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",16,null],[12,"sll_protocol","","",16,null],[12,"sll_ifindex","","",16,null],[12,"sll_hatype","","",16,null],[12,"sll_pkttype","","",16,null],[12,"sll_halen","","",16,null],[12,"sll_addr","","",16,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",17,null],[12,"tm_min","","",17,null],[12,"tm_hour","","",17,null],[12,"tm_mday","","",17,null],[12,"tm_mon","","",17,null],[12,"tm_year","","",17,null],[12,"tm_wday","","",17,null],[12,"tm_yday","","",17,null],[12,"tm_isdst","","",17,null],[12,"tm_gmtoff","","",17,null],[12,"tm_zone","","",17,null],[3,"dirent","","",null,null],[12,"d_ino","","",18,null],[12,"d_off","","",18,null],[12,"d_reclen","","",18,null],[12,"d_type","","",18,null],[12,"d_name","","",18,null],[3,"dirent64","","",null,null],[12,"d_ino","","",19,null],[12,"d_off","","",19,null],[12,"d_reclen","","",19,null],[12,"d_type","","",19,null],[12,"d_name","","",19,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",20,null],[12,"rlim_max","","",20,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",21,null],[12,"gl_pathv","","",21,null],[12,"gl_offs","","",21,null],[12,"gl_flags","","",21,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",22,null],[12,"ifa_name","","",22,null],[12,"ifa_flags","","",22,null],[12,"ifa_addr","","",22,null],[12,"ifa_netmask","","",22,null],[12,"ifa_ifu","","",22,null],[12,"ifa_data","","",22,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",23,null],[12,"pw_passwd","","",23,null],[12,"pw_uid","","",23,null],[12,"pw_gid","","",23,null],[12,"pw_gecos","","",23,null],[12,"pw_dir","","",23,null],[12,"pw_shell","","",23,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",24,null],[12,"gl_pathv","","",24,null],[12,"gl_offs","","",24,null],[12,"gl_flags","","",24,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",25,null],[12,"sa_mask","","",25,null],[12,"sa_flags","","",25,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",26,null],[12,"ss_flags","","",26,null],[12,"ss_size","","",26,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",27,null],[12,"si_errno","","",27,null],[12,"si_code","","",27,null],[12,"_pad","","",27,null],[3,"sigset_t","","",null,null],[3,"stat","","",null,null],[12,"st_dev","","",28,null],[12,"st_ino","","",28,null],[12,"st_nlink","","",28,null],[12,"st_mode","","",28,null],[12,"st_uid","","",28,null],[12,"st_gid","","",28,null],[12,"st_rdev","","",28,null],[12,"st_size","","",28,null],[12,"st_blksize","","",28,null],[12,"st_blocks","","",28,null],[12,"st_atime","","",28,null],[12,"st_atime_nsec","","",28,null],[12,"st_mtime","","",28,null],[12,"st_mtime_nsec","","",28,null],[12,"st_ctime","","",28,null],[12,"st_ctime_nsec","","",28,null],[3,"stat64","","",null,null],[12,"st_dev","","",29,null],[12,"st_ino","","",29,null],[12,"st_nlink","","",29,null],[12,"st_mode","","",29,null],[12,"st_uid","","",29,null],[12,"st_gid","","",29,null],[12,"st_rdev","","",29,null],[12,"st_size","","",29,null],[12,"st_blksize","","",29,null],[12,"st_blocks","","",29,null],[12,"st_atime","","",29,null],[12,"st_atime_nsec","","",29,null],[12,"st_mtime","","",29,null],[12,"st_mtime_nsec","","",29,null],[12,"st_ctime","","",29,null],[12,"st_ctime_nsec","","",29,null],[3,"pthread_attr_t","","",null,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memcmp","","",null,null],[5,"memchr","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"getsid","","",null,null],[5,"madvise","","",null,null],[5,"putenv","","",null,null],[5,"readlink","","",null,null],[5,"msync","","",null,null],[5,"sysconf","","",null,null],[5,"usleep","","",null,null],[5,"recvfrom","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"mkfifo","","",null,null],[5,"getpwuid_r","","",null,null],[5,"posix_memalign","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"select","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"timegm","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_gettime","","",null,null],[5,"prctl","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"shm_open","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fstat64","","",null,null],[5,"stat64","","",null,null],[5,"open64","","",null,null],[5,"creat64","","",null,null],[5,"lseek64","","",null,null],[5,"pread64","","",null,null],[5,"pwrite64","","",null,null],[5,"mmap64","","",null,null],[5,"lstat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"readdir64_r","","",null,null],[5,"getrlimit64","","",null,null],[5,"setrlimit64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"sysctl","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"getnameinfo","","",null,null],[11,"is_some","core::option","Returns `true` if the option is a `Some` value",30,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",30,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`",30,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`",30,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut_slice","","Converts from `Option<T>` to `&mut [T]` (without copying)",30,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`",30,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is `Some(v)`.",30,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",30,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",30,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",30,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",30,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",30,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",30,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",30,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",30,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",30,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",30,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",30,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",30,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",30,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",30,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_slice","","Converts from `Option<T>` to `&[T]` (without copying)",30,null],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the\noption.",30,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",30,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"default","core::num","",31,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"fmt","","",31,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"cmp","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"eq","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"shl","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"add","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",31,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",31,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",31,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",31,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",31,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",31,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",31,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",31,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",31,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",31,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"eq","core::num::flt2dec::decoder","",32,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"fmt","","",32,{"inputs":[{"name":"decoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"decoded"}],"output":{"name":"decoded"}}],[11,"eq","","",33,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"fulldecoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"fulldecoded"}],"output":{"name":"fulldecoded"}}],[11,"fmt","core::num::flt2dec","",34,{"inputs":[{"name":"part"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",34,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"clone","","",34,{"inputs":[{"name":"part"}],"output":{"name":"part"}}],[11,"len","","Returns the exact byte length of given part.",34,{"inputs":[{"name":"part"}],"output":{"name":"usize"}}],[11,"write","","Writes a part into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",34,null],[11,"clone","","",35,{"inputs":[{"name":"formatted"}],"output":{"name":"formatted"}}],[11,"len","","Returns the exact byte length of combined formatted result.",35,{"inputs":[{"name":"formatted"}],"output":{"name":"usize"}}],[11,"write","","Writes all formatted parts into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",35,null],[11,"fmt","","",36,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"fmt","core::num::dec2flt::rawfp","",37,{"inputs":[{"name":"unpacked"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"unpacked"}],"output":{"name":"unpacked"}}],[11,"new","","",37,{"inputs":[{"name":"unpacked"},{"name":"u64"},{"name":"i16"}],"output":{"name":"unpacked"}}],[11,"fmt","core::num::dec2flt::parse","",38,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"fmt","","",39,{"inputs":[{"name":"decimal"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",39,null],[11,"eq","","",40,{"inputs":[{"name":"parseresult"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"parseresult"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"fmt","","",40,{"inputs":[{"name":"parseresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","core::num::dec2flt","",41,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"clone","","",41,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"parsefloaterror"}}],[11,"fmt","","",41,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",42,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",42,{"inputs":[{"name":"floaterrorkind"}],"output":{"name":"floaterrorkind"}}],[11,"fmt","","",42,{"inputs":[{"name":"floaterrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_small","core::num::bignum","Makes a bignum from one digit.",43,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"from_u64","","Makes a bignum from `u64` value.",43,{"inputs":[{"name":"big32x40"},{"name":"u64"}],"output":{"name":"big32x40"}}],[11,"digits","","Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\nvalue is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\nthe digit type.",43,null],[11,"get_bit","","Return the `i`-th bit where bit 0 is the least significant one.\nIn other words, the bit with weight `2^i`.",43,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"is_zero","","Returns true if the bignum is zero.",43,{"inputs":[{"name":"big32x40"}],"output":{"name":"bool"}}],[11,"bit_length","","Returns the number of bits necessary to represent this value. Note that zero\nis considered to need 0 bits.",43,{"inputs":[{"name":"big32x40"}],"output":{"name":"usize"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",43,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"add_small","","",43,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",43,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",43,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",43,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[11,"mul_pow5","","Multiplies itself by `5^e` and returns its own mutable reference.",43,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",43,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",43,null],[11,"div_rem","","Divide self by another bignum, overwriting `q` with the quotient and `r` with the\nremainder.",43,null],[11,"eq","","",43,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",43,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"option"}}],[11,"cmp","","",43,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"ordering"}}],[11,"clone","","",43,{"inputs":[{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"fmt","","",43,{"inputs":[{"name":"big32x40"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_small","core::num::bignum::tests","Makes a bignum from one digit.",44,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"from_u64","","Makes a bignum from `u64` value.",44,{"inputs":[{"name":"big8x3"},{"name":"u64"}],"output":{"name":"big8x3"}}],[11,"digits","","Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\nvalue is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\nthe digit type.",44,null],[11,"get_bit","","Return the `i`-th bit where bit 0 is the least significant one.\nIn other words, the bit with weight `2^i`.",44,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"is_zero","","Returns true if the bignum is zero.",44,{"inputs":[{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"bit_length","","Returns the number of bits necessary to represent this value. Note that zero\nis considered to need 0 bits.",44,{"inputs":[{"name":"big8x3"}],"output":{"name":"usize"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",44,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"add_small","","",44,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",44,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",44,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",44,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_pow5","","Multiplies itself by `5^e` and returns its own mutable reference.",44,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",44,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",44,null],[11,"div_rem","","Divide self by another bignum, overwriting `q` with the quotient and `r` with the\nremainder.",44,null],[11,"eq","","",44,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",44,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"option"}}],[11,"cmp","","",44,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"ordering"}}],[11,"clone","","",44,{"inputs":[{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"fmt","","",44,{"inputs":[{"name":"big8x3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::num::diy_float","",45,{"inputs":[{"name":"fp"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"mul","","Returns a correctly rounded product of itself and `other`.",45,{"inputs":[{"name":"fp"},{"name":"fp"}],"output":{"name":"fp"}}],[11,"normalize","","Normalizes itself so that the resulting mantissa is at least `2^63`.",45,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"normalize_to","","Normalizes itself to have the shared exponent.\nIt can only decrease the exponent (and thus increase the mantissa).",45,{"inputs":[{"name":"fp"},{"name":"i16"}],"output":{"name":"fp"}}],[11,"fmt","core::num","",46,{"inputs":[{"name":"fpcategory"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"clone","","",46,{"inputs":[{"name":"fpcategory"}],"output":{"name":"fpcategory"}}],[11,"eq","","",47,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"clone","","",47,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseinterror"}}],[11,"fmt","","",47,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",48,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",48,{"inputs":[{"name":"interrorkind"}],"output":{"name":"interrorkind"}}],[11,"fmt","","",48,{"inputs":[{"name":"interrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",47,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::nonzero","",49,null],[11,"fmt","","",49,{"inputs":[{"name":"nonzero"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",49,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"option"}}],[11,"lt","","",49,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"le","","",49,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"gt","","",49,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ge","","",49,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"cmp","","",49,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"ordering"}}],[11,"eq","","",49,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"clone","","",49,{"inputs":[{"name":"nonzero"}],"output":{"name":"nonzero"}}],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually \"non-zero\".",49,{"inputs":[{"name":"nonzero"},{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",49,{"inputs":[{"name":"nonzero"}],"output":{"name":"t"}}],[11,"new","core::ptr","Creates a new `Unique`.",50,null],[11,"get","","Dereferences the content.",50,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",50,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",50,null],[11,"fmt","","",50,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Shared`.",51,null],[11,"clone","","",51,{"inputs":[{"name":"shared"}],"output":{"name":"shared"}}],[11,"deref","","",51,null],[11,"fmt","","",51,{"inputs":[{"name":"shared"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::marker","",52,null],[11,"eq","","",52,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",52,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",52,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",52,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"default","","",52,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",53,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",53,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",53,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",54,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",54,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",54,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",55,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",55,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",55,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",56,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",56,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",56,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cmp","",57,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",57,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",57,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",57,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",57,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",57,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"fmt","libc","",58,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",58,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",58,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",58,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",58,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",58,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",58,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",59,null],[11,"fmt","","",59,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",59,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",59,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",59,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",60,{"inputs":[{"name":"atomicbool"}],"output":{"name":"atomicbool"}}],[11,"default","","",61,{"inputs":[{"name":"atomicisize"}],"output":{"name":"atomicisize"}}],[11,"default","","",62,{"inputs":[{"name":"atomicusize"}],"output":{"name":"atomicusize"}}],[11,"default","","",63,{"inputs":[{"name":"atomicptr"}],"output":{"name":"atomicptr"}}],[11,"clone","","",64,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",60,{"inputs":[{"name":"atomicbool"},{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",60,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",60,null],[11,"swap","","Stores a value into the bool, returning the old value.",60,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",60,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_and","","Logical \"and\" with a boolean value.",60,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",60,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical \"or\" with a boolean value.",60,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",60,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",61,{"inputs":[{"name":"atomicisize"},{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",61,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",61,null],[11,"swap","","Stores a value into the isize, returning the old value.",61,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",61,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",61,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",61,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",61,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",61,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",61,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",62,{"inputs":[{"name":"atomicusize"},{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",62,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",62,null],[11,"swap","","Stores a value into the usize, returning the old value.",62,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",62,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_add","","Add to the current usize, returning the previous value.",62,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",62,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",62,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",62,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",62,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",63,null],[11,"load","","Loads a value from the pointer.",63,null],[11,"store","","Stores a value into the pointer.",63,null],[11,"swap","","Stores a value into the pointer, returning the old value.",63,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",63,null],[11,"fmt","","",62,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",63,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",65,{"inputs":[{"name":"cell"},{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",65,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",65,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",65,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",65,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",65,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"eq","","",65,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",66,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",66,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",66,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",67,{"inputs":[{"name":"refcell"},{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",67,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",67,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",67,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",67,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",67,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",67,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",67,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"eq","","",67,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"drop","","",68,null],[11,"clone","","",68,{"inputs":[{"name":"borrowref"}],"output":{"name":"borrowref"}}],[11,"deref","","",69,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",69,{"inputs":[{"name":"ref"},{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",69,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",69,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",70,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",70,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"drop","","",71,null],[11,"deref","","",70,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",70,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",72,{"inputs":[{"name":"unsafecell"},{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",72,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",72,null],[11,"clone","core::char","",73,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"escapeunicode"}}],[11,"clone","","",74,{"inputs":[{"name":"escapeunicodestate"}],"output":{"name":"escapeunicodestate"}}],[11,"next","","",73,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"option"}}],[11,"size_hint","","",73,null],[11,"clone","","",75,{"inputs":[{"name":"escapedefault"}],"output":{"name":"escapedefault"}}],[11,"clone","","",76,{"inputs":[{"name":"escapedefaultstate"}],"output":{"name":"escapedefaultstate"}}],[11,"next","","",75,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",75,null],[11,"clone","core::iter","",77,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",77,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",77,null],[11,"next_back","","",77,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"clone","","",78,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",78,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",78,null],[11,"next_back","","",78,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"clone","","",79,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",79,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",79,null],[11,"clone","","",80,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"clone","","",81,{"inputs":[{"name":"chainstate"}],"output":{"name":"chainstate"}}],[11,"next","","",80,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",80,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",80,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",80,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",80,null],[11,"next_back","","",80,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"clone","","",82,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",82,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",82,null],[11,"next_back","","",82,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"clone","","",83,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"next","","",83,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",83,null],[11,"next_back","","",83,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"clone","","",84,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next","","",84,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",84,null],[11,"next_back","","",84,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",85,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next","","",85,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",85,null],[11,"next_back","","",85,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"clone","","",86,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",86,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",86,null],[11,"nth","","",86,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",86,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",86,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"clone","","",87,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",87,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",87,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",87,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",87,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",87,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",87,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks if the iterator has finished iterating.",87,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",88,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",88,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",88,null],[11,"clone","","",89,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",89,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",89,null],[11,"clone","","",90,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",90,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",90,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",90,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",90,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",90,null],[11,"clone","","",91,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",91,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",91,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",91,null],[11,"clone","","",92,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"next","","",92,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",92,null],[11,"clone","","",93,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next","","",93,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",93,null],[11,"next_back","","",93,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"clone","","",94,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",94,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",94,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",94,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",94,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",94,null],[11,"next_back","","",94,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"clone","","",95,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next","","",95,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",95,null],[11,"next_back","","",95,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"clone","","",96,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",55,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",54,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter","",96,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",96,null],[11,"clone","","",97,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",97,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",97,null],[11,"next_back","","",97,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",96,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",96,null],[11,"next","core::ops","",54,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",54,null],[11,"next_back","","",54,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",55,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"clone","core::iter","",98,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",98,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",98,null],[11,"next_back","","",98,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"next","","",99,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",99,null],[11,"next_back","","",99,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",99,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",99,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",99,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"clone","","",100,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",100,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",100,null],[11,"next_back","","",100,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",100,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"hash","core::option","",30,null],[11,"fmt","","",30,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",30,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",30,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",30,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",30,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",30,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",30,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",30,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"default","","",30,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",30,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"clone","","",101,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"next","","",101,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"size_hint","","",101,null],[11,"next_back","","",101,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"next","","",102,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",102,null],[11,"next_back","","",102,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",102,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",103,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",103,null],[11,"next_back","","",103,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",104,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",104,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",104,null],[11,"next_back","","",104,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",30,{"inputs":[{"name":"option"},{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",105,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",106,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"hash","core::result","",107,null],[11,"fmt","","",107,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",107,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",107,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",107,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",107,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",107,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",107,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",107,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",107,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",107,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",107,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",107,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result<T, E>` to `Option<T>`",107,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result<T, E>` to `Option<E>`",107,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`",107,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`",107,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_slice","","Converts from `Result<T, E>` to `&[T]` (without copying)",107,null],[11,"as_mut_slice","","Converts from `Result<T, E>` to `&mut [T]` (without copying)",107,null],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to an\ncontained `Ok` value, leaving an `Err` value untouched.",107,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to an\ncontained `Err` value, leaving an `Ok` value untouched.",107,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",107,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",107,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",107,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",107,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",107,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",107,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",107,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",107,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",107,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",107,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",107,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",107,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"next","","",108,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",108,null],[11,"next_back","","",108,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",108,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",109,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",109,null],[11,"next_back","","",109,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",110,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",110,null],[11,"next_back","","",110,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",107,{"inputs":[{"name":"result"},{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::simd","",111,{"inputs":[{"name":"i8x16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",111,{"inputs":[{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"fmt","","",112,{"inputs":[{"name":"i16x8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",112,{"inputs":[{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"fmt","","",113,{"inputs":[{"name":"i32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",113,{"inputs":[{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"fmt","","",114,{"inputs":[{"name":"i64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",114,{"inputs":[{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"fmt","","",115,{"inputs":[{"name":"u8x16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",115,{"inputs":[{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"fmt","","",116,{"inputs":[{"name":"u16x8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",116,{"inputs":[{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"fmt","","",117,{"inputs":[{"name":"u32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",117,{"inputs":[{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"fmt","","",118,{"inputs":[{"name":"u64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",118,{"inputs":[{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"fmt","","",119,{"inputs":[{"name":"f32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",119,{"inputs":[{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"fmt","","",120,{"inputs":[{"name":"f64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",120,{"inputs":[{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"add","","",115,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"add","","",116,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"add","","",117,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"add","","",118,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"add","","",111,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"add","","",112,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"add","","",113,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"add","","",114,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"add","","",119,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"add","","",120,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"sub","","",115,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"sub","","",116,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"sub","","",117,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"sub","","",118,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"sub","","",111,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"sub","","",112,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"sub","","",113,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"sub","","",114,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"sub","","",119,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"sub","","",120,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"mul","","",115,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"mul","","",116,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"mul","","",117,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"mul","","",118,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"mul","","",111,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"mul","","",112,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"mul","","",113,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"mul","","",114,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"mul","","",119,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"mul","","",120,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"div","","",119,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"div","","",120,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"shl","","",115,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"shl","","",116,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"shl","","",117,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"shl","","",118,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"shl","","",111,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"shl","","",112,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"shl","","",113,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"shl","","",114,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"shr","","",115,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"shr","","",116,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"shr","","",117,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"shr","","",118,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"shr","","",111,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"shr","","",112,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"shr","","",113,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"shr","","",114,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"bitand","","",115,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"bitand","","",116,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"bitand","","",117,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"bitand","","",118,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"bitand","","",111,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"bitand","","",112,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"bitand","","",113,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"bitand","","",114,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"bitor","","",115,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"bitor","","",116,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"bitor","","",117,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"bitor","","",118,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"bitor","","",111,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"bitor","","",112,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"bitor","","",113,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"bitor","","",114,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"bitxor","","",115,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"bitxor","","",116,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"bitxor","","",117,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"bitxor","","",118,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"bitxor","","",111,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"bitxor","","",112,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"bitxor","","",113,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"bitxor","","",114,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"as_slice","core::slice","View the underlying data as a subslice of the original data.",121,null],[11,"next","","",121,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",121,null],[11,"count","","",121,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"nth","","",121,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",121,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",121,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",121,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"into_slice","","View the underlying data as a subslice of the original data.",122,null],[11,"next","","",122,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",122,null],[11,"count","","",122,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"nth","","",122,{"inputs":[{"name":"itermut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",122,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next_back","","",122,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",123,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",123,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"size_hint","","",123,null],[11,"next_back","","",123,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",123,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",124,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",124,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"size_hint","","",124,null],[11,"next_back","","",124,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",125,{"inputs":[{"name":"genericsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",125,null],[11,"next","","",126,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"size_hint","","",126,null],[11,"next","","",127,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",127,null],[11,"next","","",128,{"inputs":[{"name":"splitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",128,null],[11,"next","","",129,{"inputs":[{"name":"rsplitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",129,null],[11,"clone","","",130,{"inputs":[{"name":"windows"}],"output":{"name":"windows"}}],[11,"next","","",130,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"size_hint","","",130,null],[11,"count","","",130,{"inputs":[{"name":"windows"}],"output":{"name":"usize"}}],[11,"nth","","",130,{"inputs":[{"name":"windows"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",130,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"next_back","","",130,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"clone","","",131,{"inputs":[{"name":"chunks"}],"output":{"name":"chunks"}}],[11,"next","","",131,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"size_hint","","",131,null],[11,"count","","",131,{"inputs":[{"name":"chunks"}],"output":{"name":"usize"}}],[11,"nth","","",131,{"inputs":[{"name":"chunks"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",131,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next_back","","",131,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next","","",132,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"size_hint","","",132,null],[11,"count","","",132,{"inputs":[{"name":"chunksmut"}],"output":{"name":"usize"}}],[11,"nth","","",132,{"inputs":[{"name":"chunksmut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",132,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"next_back","","",132,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"fmt","core::str::pattern","",133,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",133,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",133,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",133,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",134,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",135,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",134,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",134,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",134,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",136,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",136,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",136,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",136,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",136,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",136,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",136,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",136,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",137,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",137,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",137,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",137,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",137,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",137,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",137,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",137,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",138,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",138,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",138,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",138,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",138,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",138,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",138,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",138,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",139,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",139,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",140,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",140,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",141,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",141,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",139,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",139,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",139,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",139,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",139,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",142,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",142,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",143,{"inputs":[{"name":"matchonly"}],"output":{"name":"bool"}}],[11,"rejecting","","",143,null],[11,"matching","","",143,null],[11,"use_early_reject","","",144,{"inputs":[{"name":"rejectandmatch"}],"output":{"name":"bool"}}],[11,"rejecting","","",144,null],[11,"matching","","",144,null],[11,"eq","core::str","",145,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",145,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"clone","","",145,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"parseboolerror"}}],[11,"fmt","","",145,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",145,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",146,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",146,{"inputs":[{"name":"utf8error"}],"output":{"name":"utf8error"}}],[11,"eq","","",146,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",146,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",146,{"inputs":[{"name":"utf8error"}],"output":{"name":"usize"}}],[11,"fmt","","",146,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",147,{"inputs":[{"name":"chars"}],"output":{"name":"chars"}}],[11,"next","","",147,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"size_hint","","",147,null],[11,"next_back","","",147,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",147,{"inputs":[{"name":"chars"}],"output":{"name":"str"}}],[11,"clone","","",148,{"inputs":[{"name":"charindices"}],"output":{"name":"charindices"}}],[11,"next","","",148,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"size_hint","","",148,null],[11,"next_back","","",148,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",148,{"inputs":[{"name":"charindices"}],"output":{"name":"str"}}],[11,"clone","","",149,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"next","","",149,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"size_hint","","",149,null],[11,"count","","",149,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"last","","",149,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"nth","","",149,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next_back","","",149,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"len","","",149,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"clone","","",150,{"inputs":[{"name":"splitinternal"}],"output":{"name":"splitinternal"}}],[11,"next","","",151,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"clone","","",151,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",152,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"clone","","",152,{"inputs":[{"name":"rsplit"}],"output":{"name":"rsplit"}}],[11,"next_back","","",151,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next_back","","",152,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"next","","",153,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"clone","","",153,{"inputs":[{"name":"splitterminator"}],"output":{"name":"splitterminator"}}],[11,"next","","",154,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",154,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"rsplitterminator"}}],[11,"next_back","","",153,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"next_back","","",154,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",155,{"inputs":[{"name":"splitninternal"}],"output":{"name":"splitninternal"}}],[11,"next","","",156,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"clone","","",156,{"inputs":[{"name":"splitn"}],"output":{"name":"splitn"}}],[11,"next","","",157,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"clone","","",157,{"inputs":[{"name":"rsplitn"}],"output":{"name":"rsplitn"}}],[11,"clone","","",158,{"inputs":[{"name":"matchindicesinternal"}],"output":{"name":"matchindicesinternal"}}],[11,"next","","",159,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"clone","","",159,{"inputs":[{"name":"matchindices"}],"output":{"name":"matchindices"}}],[11,"next","","",160,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",160,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"rmatchindices"}}],[11,"next_back","","",159,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"next_back","","",160,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",161,{"inputs":[{"name":"matchesinternal"}],"output":{"name":"matchesinternal"}}],[11,"next","","",162,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"clone","","",162,{"inputs":[{"name":"matches"}],"output":{"name":"matches"}}],[11,"next","","",163,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",163,{"inputs":[{"name":"rmatches"}],"output":{"name":"rmatches"}}],[11,"next_back","","",162,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"next_back","","",163,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",164,{"inputs":[{"name":"lines"}],"output":{"name":"lines"}}],[11,"next","","",164,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"size_hint","","",164,null],[11,"next_back","","",164,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"clone","","",165,{"inputs":[{"name":"linesany"}],"output":{"name":"linesany"}}],[11,"clone","","",166,{"inputs":[{"name":"linesanymap"}],"output":{"name":"linesanymap"}}],[11,"call","","",166,null],[11,"call_mut","","",166,null],[11,"call_once","","",166,null],[11,"next","","",165,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"size_hint","","",165,null],[11,"next_back","","",165,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"clone","","",167,{"inputs":[{"name":"charrange"}],"output":{"name":"charrange"}}],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",168,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",168,{"inputs":[{"name":"siphasher"},{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",168,null],[11,"finish","","",168,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",168,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",168,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"eq","core::fmt::num","",169,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"ne","","",169,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"clone","","",169,{"inputs":[{"name":"binary"}],"output":{"name":"binary"}}],[11,"eq","","",170,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"ne","","",170,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"clone","","",170,{"inputs":[{"name":"octal"}],"output":{"name":"octal"}}],[11,"eq","","",171,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",171,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"clone","","",171,{"inputs":[{"name":"decimal"}],"output":{"name":"decimal"}}],[11,"eq","","",172,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"ne","","",172,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"clone","","",172,{"inputs":[{"name":"lowerhex"}],"output":{"name":"lowerhex"}}],[11,"eq","","",173,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"ne","","",173,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"clone","","",173,{"inputs":[{"name":"upperhex"}],"output":{"name":"upperhex"}}],[11,"eq","","",174,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"ne","","",174,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"clone","","",174,{"inputs":[{"name":"radix"}],"output":{"name":"radix"}}],[11,"clone","","",175,{"inputs":[{"name":"radixfmt"}],"output":{"name":"radixfmt"}}],[11,"fmt","","",175,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",175,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",175,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",175,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",175,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",175,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",175,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",175,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",175,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",175,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",175,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",175,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",175,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",175,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",175,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",175,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",175,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",175,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",175,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",175,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_str","core::fmt::builders","",176,{"inputs":[{"name":"padadapter"},{"name":"str"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated struct output.",177,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",177,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",178,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",178,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[11,"formatter","","Returns the wrapped `Formatter`.",178,{"inputs":[{"name":"debugtuple"}],"output":{"name":"formatter"}}],[11,"finish","","",179,null],[11,"entry","","Adds a new entry to the set output.",180,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",180,{"inputs":[{"name":"debugset"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",180,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",181,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",181,{"inputs":[{"name":"debuglist"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",181,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",182,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",182,{"inputs":[{"name":"debugmap"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",182,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}],[11,"clone","core::fmt::rt::v1","",183,{"inputs":[{"name":"argument"}],"output":{"name":"argument"}}],[11,"clone","","",184,{"inputs":[{"name":"formatspec"}],"output":{"name":"formatspec"}}],[11,"eq","","",185,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"ne","","",185,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",185,{"inputs":[{"name":"alignment"}],"output":{"name":"alignment"}}],[11,"clone","","",186,{"inputs":[{"name":"count"}],"output":{"name":"count"}}],[11,"clone","","",187,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[11,"fmt","core::fmt","",188,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",188,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"clone","","",189,{"inputs":[{"name":"argumentv1"}],"output":{"name":"argumentv1"}}],[11,"clone","","",190,{"inputs":[{"name":"flagv1"}],"output":{"name":"flagv1"}}],[11,"clone","","",191,{"inputs":[{"name":"arguments"}],"output":{"name":"arguments"}}],[11,"fmt","","",191,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",191,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",192,{"inputs":[{"name":"formatter"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",192,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",192,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",192,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",192,{"inputs":[{"name":"formatter"}],"output":{"name":"u32"}}],[11,"fill","","Character used as 'fill' whenever there is alignment",192,{"inputs":[{"name":"formatter"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",192,{"inputs":[{"name":"formatter"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",192,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",192,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",192,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",192,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",192,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",192,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",192,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",192,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",192,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",192,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",192,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[11,"write_str","","",192,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",192,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",192,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"fmt","","",188,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::marker","",52,{"inputs":[{"name":"phantomdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cell","",65,{"inputs":[{"name":"cell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",67,{"inputs":[{"name":"refcell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",69,{"inputs":[{"name":"ref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",70,{"inputs":[{"name":"refmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone_from","libc::dox","Performs copy-assignment from `source`.",193,null],[11,"clone_from","libc::dox::imp","Performs copy-assignment from `source`.",193,null],[11,"clone","libc","",24,{"inputs":[{"name":"glob64_t"}],"output":{"name":"glob64_t"}}],[11,"clone","","",28,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"clone","","",29,{"inputs":[{"name":"stat64"}],"output":{"name":"stat64"}}],[11,"clone","","",194,{"inputs":[{"name":"pthread_attr_t"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",195,{"inputs":[{"name":"sigset_t"}],"output":{"name":"sigset_t"}}],[11,"clone","","",25,{"inputs":[{"name":"sigaction"}],"output":{"name":"sigaction"}}],[11,"clone","","",26,{"inputs":[{"name":"stack_t"}],"output":{"name":"stack_t"}}],[11,"clone","","",27,{"inputs":[{"name":"siginfo_t"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",18,{"inputs":[{"name":"dirent"}],"output":{"name":"dirent"}}],[11,"clone","","",19,{"inputs":[{"name":"dirent64"}],"output":{"name":"dirent64"}}],[11,"clone","","",20,{"inputs":[{"name":"rlimit64"}],"output":{"name":"rlimit64"}}],[11,"clone","","",21,{"inputs":[{"name":"glob_t"}],"output":{"name":"glob_t"}}],[11,"clone","","",22,{"inputs":[{"name":"ifaddrs"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",196,{"inputs":[{"name":"pthread_mutex_t"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",197,{"inputs":[{"name":"pthread_rwlock_t"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",198,{"inputs":[{"name":"pthread_mutexattr_t"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",199,{"inputs":[{"name":"pthread_cond_t"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",23,{"inputs":[{"name":"passwd"}],"output":{"name":"passwd"}}],[11,"clone","","",10,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"clone","","",11,{"inputs":[{"name":"sockaddr_in"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",12,{"inputs":[{"name":"sockaddr_in6"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",13,{"inputs":[{"name":"sockaddr_un"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",14,{"inputs":[{"name":"sockaddr_storage"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",15,{"inputs":[{"name":"addrinfo"}],"output":{"name":"addrinfo"}}],[11,"clone","","",16,{"inputs":[{"name":"sockaddr_ll"}],"output":{"name":"sockaddr_ll"}}],[11,"clone","","",200,{"inputs":[{"name":"fd_set"}],"output":{"name":"fd_set"}}],[11,"clone","","",17,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"clone","","",0,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",1,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",2,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"clone","","",3,{"inputs":[{"name":"rlimit"}],"output":{"name":"rlimit"}}],[11,"clone","","",4,{"inputs":[{"name":"rusage"}],"output":{"name":"rusage"}}],[11,"clone","","",5,{"inputs":[{"name":"in_addr"}],"output":{"name":"in_addr"}}],[11,"clone","","",6,{"inputs":[{"name":"in6_addr"}],"output":{"name":"in6_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",8,{"inputs":[{"name":"ipv6_mreq"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"dl_info"}],"output":{"name":"dl_info"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"rlim_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[17,"WNOHANG","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"AF_PACKET","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null]],"paths":[[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"Dl_info"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_ll"],[3,"tm"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"glob64_t"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"stat"],[3,"stat64"],[4,"Option"],[3,"Wrapping"],[3,"Decoded"],[4,"FullDecoded"],[4,"Part"],[3,"Formatted"],[4,"Sign"],[3,"Unpacked"],[4,"Sign"],[3,"Decimal"],[4,"ParseResult"],[3,"ParseFloatError"],[4,"FloatErrorKind"],[3,"Big32x40"],[3,"Big8x3"],[3,"Fp"],[4,"FpCategory"],[3,"ParseIntError"],[4,"IntErrorKind"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"RefMut"],[3,"BorrowRefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[4,"EscapeUnicodeState"],[3,"EscapeDefault"],[4,"EscapeDefaultState"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[4,"ChainState"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"StepBy"],[3,"RangeInclusive"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"i8x16"],[3,"i16x8"],[3,"i32x4"],[3,"i64x2"],[3,"u8x16"],[3,"u16x8"],[3,"u32x4"],[3,"u64x2"],[3,"f32x4"],[3,"f64x2"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"GenericSplitN"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"SplitInternal"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitNInternal"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndicesInternal"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"MatchesInternal"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"LinesAnyMap"],[3,"CharRange"],[3,"SipHasher"],[3,"Binary"],[3,"Octal"],[3,"Decimal"],[3,"LowerHex"],[3,"UpperHex"],[3,"Radix"],[3,"RadixFmt"],[3,"PadAdapter"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugInner"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Argument"],[3,"FormatSpec"],[4,"Alignment"],[4,"Count"],[4,"Position"],[3,"Error"],[3,"ArgumentV1"],[4,"FlagV1"],[3,"Arguments"],[3,"Formatter"],[8,"Clone"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"fd_set"]]};
searchIndex['openblas_provider'] = {"items":[],"paths":[]};
initSearch(searchIndex);
